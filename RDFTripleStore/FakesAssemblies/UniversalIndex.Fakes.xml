<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UniversalIndex.Fakes</name>
    </assembly>
    <members>
        <member name="T:Global.Fakes.ShimStructString">
            <summary>Тип оболочки совместимости для StructString</summary>
        </member>
        <member name="M:Global.Fakes.ShimStructString.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="T:Global.Fakes.ShimStructString.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Global.Fakes.ShimStructString.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.ShimStructString.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.ShimStructString.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimBuffer4Nametable">
            <summary>Тип оболочки совместимости для UniversalIndex.Buffer4Nametable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimBuffer4Nametable.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimBuffer4Nametable.#ctor(UniversalIndex.Buffer4Nametable)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.Clear">
            <summary>Задает оболочка совместимости Buffer4Nametable.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.ContainsKeyString">
            <summary>Задает оболочка совместимости Buffer4Nametable.ContainsKey(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.CountGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.FilterExistingIEnumerableOfKeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости Buffer4Nametable.FilterExisting(IEnumerable`1&lt;KeyValueHash`3&lt;String,Int32,UInt64&gt;&gt; portion)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.FreeMemory">
            <summary>Задает оболочка совместимости Buffer4Nametable.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.ItemGetString">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Item(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.KeysGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.NotSavedGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_NotSaved()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.OnSaved">
            <summary>Задает оболочка совместимости Buffer4Nametable.OnSaved()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.TryGetValueKeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости Buffer4Nametable.TryGetValue(KeyValueHash`3&lt;String,Int32,UInt64&gt; key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.TryGetValueStringInt32Out">
            <summary>Задает оболочка совместимости Buffer4Nametable.TryGetValue(String key, Int32&amp; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.AllInstances.ValuesGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Values()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimBuffer4Nametable.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimBuffer4Nametable.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimBuffer4Nametable.Bind(UniversalIndex.IGetDictionaryLong{System.String,System.Int32})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.Clear">
            <summary>Задает оболочка совместимости Buffer4Nametable.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.ConstructorFuncOfStringUInt64UInt64UInt64Single">
            <summary>Задает оболочка совместимости Buffer4Nametable.Buffer4Nametable(Func`2&lt;String,UInt64&gt; hashFunc, UInt64 notSavedcapacity, UInt64 insertCapacity, Single factor)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.ContainsKeyString">
            <summary>Задает оболочка совместимости Buffer4Nametable.ContainsKey(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.CountGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.FilterExistingIEnumerableOfKeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости Buffer4Nametable.FilterExisting(IEnumerable`1&lt;KeyValueHash`3&lt;String,Int32,UInt64&gt;&gt; portion)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.FreeMemory">
            <summary>Задает оболочка совместимости Buffer4Nametable.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.ItemGetString">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Item(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.KeysGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.NotSavedGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_NotSaved()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.OnSaved">
            <summary>Задает оболочка совместимости Buffer4Nametable.OnSaved()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.TryGetValueKeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости Buffer4Nametable.TryGetValue(KeyValueHash`3&lt;String,Int32,UInt64&gt; key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.TryGetValueStringInt32Out">
            <summary>Задает оболочка совместимости Buffer4Nametable.TryGetValue(String key, Int32&amp; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimBuffer4Nametable.ValuesGet">
            <summary>Задает оболочка совместимости Buffer4Nametable.get_Values()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimCodedString">
            <summary>Тип оболочки совместимости для UniversalIndex.CodedString</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCodedString.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCodedString.#ctor(UniversalIndex.CodedString)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimCodedString.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.AllInstances.CodeGet">
            <summary>Задает оболочка совместимости CodedString.get_Code()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.AllInstances.CodeSetInt32">
            <summary>Задает оболочка совместимости CodedString.set_Code(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.AllInstances.StringValueGet">
            <summary>Задает оболочка совместимости CodedString.get_StringValue()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.AllInstances.StringValueSetString">
            <summary>Задает оболочка совместимости CodedString.set_StringValue(String value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCodedString.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCodedString.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.CodeGet">
            <summary>Задает оболочка совместимости CodedString.get_Code()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.CodeSetInt32">
            <summary>Задает оболочка совместимости CodedString.set_Code(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.ConstructorObjectArray">
            <summary>Задает оболочка совместимости CodedString.CodedString(Object[] row)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.StringValueGet">
            <summary>Задает оболочка совместимости CodedString.get_StringValue()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCodedString.StringValueSetString">
            <summary>Задает оболочка совместимости CodedString.set_StringValue(String value)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimCoding`1">
            <summary>Тип оболочки совместимости для UniversalIndex.Coding`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCoding`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCoding`1.#ctor(UniversalIndex.Coding{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AddT0UInt64">
            <summary>Задает оболочка совместимости Coding`1.Add(!0 key, UInt64 hash)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimCoding`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.AddT0UInt64">
            <summary>Задает оболочка совместимости Coding`1.Add(!0 key, UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.Clear">
            <summary>Задает оболочка совместимости Coding`1.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.ContainsKeyT0">
            <summary>Задает оболочка совместимости Coding`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.FreeMemory">
            <summary>Задает оболочка совместимости Coding`1.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.GetNewCode">
            <summary>Задает оболочка совместимости Coding`1.GetNewCode()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.Grow">
            <summary>Задает оболочка совместимости Coding`1.Grow()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.Hash2PositionUInt64">
            <summary>Задает оболочка совместимости Coding`1.Hash2Position(UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.KeysGet">
            <summary>Задает оболочка совместимости Coding`1.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.RemoveT0">
            <summary>Задает оболочка совместимости Coding`1.Remove(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.TryGetValueKeyValueHashOfT0UInt64UInt64">
            <summary>Задает оболочка совместимости Coding`1.TryGetValue(KeyValueHash`3&lt;!0,UInt64,UInt64&gt; key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.AllInstances.TryGetValueT0UInt64Out">
            <summary>Задает оболочка совместимости Coding`1.TryGetValue(!0 key, UInt64&amp; code)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCoding`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimCoding`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.Clear">
            <summary>Задает оболочка совместимости Coding`1.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.ConstructorFuncOfT0UInt64UInt64Single">
            <summary>Задает оболочка совместимости Coding`1.Coding`1(Func`2&lt;!0,UInt64&gt; hashFunc, UInt64 capacity, Single factor)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.ContainsKeyT0">
            <summary>Задает оболочка совместимости Coding`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.FreeMemory">
            <summary>Задает оболочка совместимости Coding`1.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.GetNewCode">
            <summary>Задает оболочка совместимости Coding`1.GetNewCode()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.Grow">
            <summary>Задает оболочка совместимости Coding`1.Grow()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.Hash2PositionUInt64">
            <summary>Задает оболочка совместимости Coding`1.Hash2Position(UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.KeysGet">
            <summary>Задает оболочка совместимости Coding`1.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.RemoveT0">
            <summary>Задает оболочка совместимости Coding`1.Remove(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.TryGetValueKeyValueHashOfT0UInt64UInt64">
            <summary>Задает оболочка совместимости Coding`1.TryGetValue(KeyValueHash`3&lt;!0,UInt64,UInt64&gt; key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimCoding`1.TryGetValueT0UInt64Out">
            <summary>Задает оболочка совместимости Coding`1.TryGetValue(!0 key, UInt64&amp; code)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimDictionaryLong`2">
            <summary>Тип оболочки совместимости для UniversalIndex.DictionaryLong`2</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimDictionaryLong`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimDictionaryLong`2.#ctor(UniversalIndex.DictionaryLong{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AddT0T1UInt64">
            <summary>Задает оболочка совместимости DictionaryLong`2.Add(!0 key, !1 value, UInt64 hash)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.AddT0T1UInt64">
            <summary>Задает оболочка совместимости DictionaryLong`2.Add(!0 key, !1 value, UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.Clear">
            <summary>Задает оболочка совместимости DictionaryLong`2.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.CountGet">
            <summary>Задает оболочка совместимости DictionaryLong`2.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.FreeMemory">
            <summary>Задает оболочка совместимости DictionaryLong`2.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.ItemGetT0">
            <summary>Задает оболочка совместимости DictionaryLong`2.get_Item(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.ItemSetT0T1">
            <summary>Задает оболочка совместимости DictionaryLong`2.set_Item(!0 key, !1 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.TryGetValueKeyValueHashOfT0T1UInt64">
            <summary>Задает оболочка совместимости DictionaryLong`2.TryGetValue(KeyValueHash`3&lt;!0,!1,UInt64&gt; key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.TryGetValueT0T1Out">
            <summary>Задает оболочка совместимости DictionaryLong`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.AllInstances.ValuesGet">
            <summary>Задает оболочка совместимости DictionaryLong`2.get_Values()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimDictionaryLong`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimDictionaryLong`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimDictionaryLong`2.Bind(UniversalIndex.IGetDictionaryLong{`0,`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.Clear">
            <summary>Задает оболочка совместимости DictionaryLong`2.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.ConstructorFuncOfT0UInt64UInt64Single">
            <summary>Задает оболочка совместимости DictionaryLong`2.DictionaryLong`2(Func`2&lt;!0,UInt64&gt; hashFunc, UInt64 capacity, Single factor)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.CountGet">
            <summary>Задает оболочка совместимости DictionaryLong`2.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.FreeMemory">
            <summary>Задает оболочка совместимости DictionaryLong`2.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.ItemGetT0">
            <summary>Задает оболочка совместимости DictionaryLong`2.get_Item(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.ItemSetT0T1">
            <summary>Задает оболочка совместимости DictionaryLong`2.set_Item(!0 key, !1 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.TryGetValueKeyValueHashOfT0T1UInt64">
            <summary>Задает оболочка совместимости DictionaryLong`2.TryGetValue(KeyValueHash`3&lt;!0,!1,UInt64&gt; key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.TryGetValueT0T1Out">
            <summary>Задает оболочка совместимости DictionaryLong`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimDictionaryLong`2.ValuesGet">
            <summary>Задает оболочка совместимости DictionaryLong`2.get_Values()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimHashFunction">
            <summary>Тип оболочки совместимости для UniversalIndex.HashFunction</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimHashFunction.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimHashFunction.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimHashFunction.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetHashModifiedBernsteinString">
            <summary>Задает оболочка совместимости HashFunction.GetHashModifiedBernstein(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetHashModifiedBernsteinStringInt32">
            <summary>Задает оболочка совместимости HashFunction.GetHashModifiedBernstein(String s, Int32 shift)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetHashSpookyByteArrayInt32">
            <summary>Задает оболочка совместимости HashFunction.GetHashSpooky(Byte[] data, Int32 size)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetHashSpookyString">
            <summary>Задает оболочка совместимости HashFunction.GetHashSpooky(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetHashSpookyStringInt32">
            <summary>Задает оболочка совместимости HashFunction.GetHashSpooky(String s, Int32 shift)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetHashesSpookyString">
            <summary>Задает оболочка совместимости HashFunction.GetHashesSpooky(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.GetULongHashSpookyString">
            <summary>Задает оболочка совместимости HashFunction.GetULongHashSpooky(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimHashFunction.StaticConstructor">
            <summary>Задает оболочка совместимости HashFunction.HashFunction()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascading`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexCascading`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascading`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascading`1.#ctor(UniversalIndex.IndexCascading{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexCascading`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.BuildGroupsIndexSpecial">
            <summary>Задает оболочка совместимости IndexCascading`1.BuildGroupsIndexSpecial()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.CreateDiscaleDictionary">
            <summary>Задает оболочка совместимости IndexCascading`1.CreateDiscaleDictionary()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetAll">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAll()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetAllByKeysInt32T0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllByKeys(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetAllByKeysTestInt32T0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllByKeysTest(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetAllInDiapDiapasonT0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllInDiap(Diapason dia, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetAllInDiapTestDiapasonT0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllInDiapTest(Diapason dia, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetDiapasonByKey1Int32">
            <summary>Задает оболочка совместимости IndexCascading`1.GetDiapasonByKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.GetLocalDiapasonInt32T0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetLocalDiapason(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Half2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Half2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Half2ProducerSetFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Half2Producer(Func`2&lt;!0,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Key1ProducerGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Key1Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Key1ProducerSetFuncOfObjectInt32">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Key1Producer(Func`2&lt;Object,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Key2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Key2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.Key2ProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Key2Producer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances.TableSetIBearingTableImmutable">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Table(IBearingTableImmutable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.AllInstances._Buildb__21_0Int64Object">
            <summary>Задает оболочка совместимости IndexCascading`1.&lt;Build&gt;b__21_0(Int64 offset, Object o)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascading`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascading`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Build">
            <summary>Задает оболочка совместимости IndexCascading`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.BuildGroupsIndexSpecial">
            <summary>Задает оболочка совместимости IndexCascading`1.BuildGroupsIndexSpecial()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.ConstructorString">
            <summary>Задает оболочка совместимости IndexCascading`1.IndexCascading`1(String path_name)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.CreateDiscaleDictionary">
            <summary>Задает оболочка совместимости IndexCascading`1.CreateDiscaleDictionary()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetAll">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAll()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetAllByKeysInt32T0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllByKeys(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetAllByKeysTestInt32T0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllByKeysTest(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetAllInDiapDiapasonT0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllInDiap(Diapason dia, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetAllInDiapTestDiapasonT0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetAllInDiapTest(Diapason dia, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetDiapasonByKey1Int32">
            <summary>Задает оболочка совместимости IndexCascading`1.GetDiapasonByKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.GetLocalDiapasonInt32T0">
            <summary>Задает оболочка совместимости IndexCascading`1.GetLocalDiapason(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Half2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Half2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Half2ProducerSetFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Half2Producer(Func`2&lt;!0,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.IndexCellGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Key1ProducerGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Key1Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Key1ProducerSetFuncOfObjectInt32">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Key1Producer(Func`2&lt;Object,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Key2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Key2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.Key2ProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Key2Producer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.TableGet">
            <summary>Задает оболочка совместимости IndexCascading`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1.TableSetIBearingTableImmutable">
            <summary>Задает оболочка совместимости IndexCascading`1.set_Table(IBearingTableImmutable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascading`1._Buildb__21_0Int64Object">
            <summary>Задает оболочка совместимости IndexCascading`1.&lt;Build&gt;b__21_0(Int64 offset, Object o)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascadingCellRow">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexCascadingCellRow</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingCellRow.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascadingCellRow.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingCellRow.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingCellRow.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingCellRow.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexCascadingDynamic`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.#ctor(UniversalIndex.IndexCascadingDynamic{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.ActivateCache">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.CreateDiscaleDictionary">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.CreateDiscaleDictionary()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.DropIndex">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.DropIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.GetDiapasonByKey1Int32">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetDiapasonByKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.GetRecordsAll">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsAll()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.GetRecordsWithKey1Int32">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsWithKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.GetRecordsWithKey2T0">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsWithKey2(!0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.GetRecordsWithKeysInt32T0">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsWithKeys(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.OnAppendElementPaEntry">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.Bind(UniversalIndex.IIndexCommon)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.Build">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.ConstructorStringTableViewFuncOfObjectInt32FuncOfObjectT0FuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.IndexCascadingDynamic`1(String path, TableView table, Func`2&lt;Object,Int32&gt; key1Producer, Func`2&lt;Object,!0&gt; key2Producer, Func`2&lt;!0,Int32&gt; half2Producer)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.CreateDiscaleDictionary">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.CreateDiscaleDictionary()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.DropIndex">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.DropIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.FillFinish">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.FillInit">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.GetDiapasonByKey1Int32">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetDiapasonByKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.GetRecordsAll">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsAll()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.GetRecordsWithKey1Int32">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsWithKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.GetRecordsWithKey2T0">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsWithKey2(!0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.GetRecordsWithKeysInt32T0">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.GetRecordsWithKeys(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.OnAppendElementPaEntry">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingDynamic`1.Warmup">
            <summary>Задает оболочка совместимости IndexCascadingDynamic`1.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexCascadingImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.#ctor(UniversalIndex.IndexCascadingImmutable{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.ActivateCache">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.CreateDiscaleDictionary">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.CreateDiscaleDictionary()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.DropIndex">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.DropIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; rows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetAll">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAll()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetAllByKeysInt32T0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAllByKeys(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetAllInDiapDiapason">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAllInDiap(Diapason dia)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetAllInDiapDiapasonT0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAllInDiap(Diapason dia, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetDiapasonByKey1Int32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetDiapasonByKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetKey1All">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetKey1All()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.GetLocalDiapasonInt32T0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetLocalDiapason(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Half2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Half2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Half2ProducerSetFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Half2Producer(Func`2&lt;!0,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Key1ProducerGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Key1Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Key1ProducerSetFuncOfObjectInt32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Key1Producer(Func`2&lt;Object,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Key2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Key2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Key2ProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Key2Producer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.OnAppendElementPaEntry">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.TableSetIBearingTableImmutable">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Table(IBearingTableImmutable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Bind(UniversalIndex.IIndexCommon)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Build">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.ConstructorStringTableViewFuncOfObjectInt32FuncOfObjectT0FuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.IndexCascadingImmutable`1(String pathName, TableView table, Func`2&lt;Object,Int32&gt; key1Producer, Func`2&lt;Object,!0&gt; key2Producer, Func`2&lt;!0,Int32&gt; half2Producer)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.CreateDiscaleDictionary">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.CreateDiscaleDictionary()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.DropIndex">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.DropIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.FillFinish">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.FillInit">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; rows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetAll">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAll()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetAllByKeysInt32T0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAllByKeys(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetAllInDiapDiapason">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAllInDiap(Diapason dia)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetAllInDiapDiapasonT0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetAllInDiap(Diapason dia, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetDiapasonByKey1Int32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetDiapasonByKey1(Int32 key1)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetKey1All">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetKey1All()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.GetLocalDiapasonInt32T0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.GetLocalDiapason(Int32 key1, !0 key2)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Half2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Half2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Half2ProducerSetFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Half2Producer(Func`2&lt;!0,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.IndexCellGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Key1ProducerGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Key1Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Key1ProducerSetFuncOfObjectInt32">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Key1Producer(Func`2&lt;Object,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Key2ProducerGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Key2Producer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Key2ProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Key2Producer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.OnAppendElementPaEntry">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.TableGet">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.TableSetIBearingTableImmutable">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.set_Table(IBearingTableImmutable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexCascadingImmutable`1.Warmup">
            <summary>Задает оболочка совместимости IndexCascadingImmutable`1.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexDynamic`2">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexDynamic`2</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.#ctor(UniversalIndex.IndexDynamic{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.ActivateCache">
            <summary>Задает оболочка совместимости IndexDynamic`2.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexDynamic`2.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexDynamic`2.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.Count">
            <summary>Задает оболочка совместимости IndexDynamic`2.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.DropIndex">
            <summary>Задает оболочка совместимости IndexDynamic`2.DropIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexDynamic`2.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexDynamic`2.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexDynamic`2.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.GetAllByLevelFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByLevel(Func`2&lt;!0,Int32&gt; LevelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.IndexArrayGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_IndexArray()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.IndexArraySetT1">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_IndexArray(!1 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.OnAppendElementPaEntry">
            <summary>Задает оболочка совместимости IndexDynamic`2.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.ScaleGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.ToString01">
            <summary>Задает оболочка совместимости IndexDynamic`2.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.UniqueGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_Unique()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexDynamic`2.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.Bind(UniversalIndex.IIndexCommon)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.Bind(UniversalIndex.IIndexImmutable{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexDynamic`2.Bind(UniversalIndex.IIndex{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.Build">
            <summary>Задает оболочка совместимости IndexDynamic`2.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.ConstructorBoolean">
            <summary>Задает оболочка совместимости IndexDynamic`2.IndexDynamic`2(Boolean unique)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.ConstructorBooleanT1">
            <summary>Задает оболочка совместимости IndexDynamic`2.IndexDynamic`2(Boolean unique, !1 index)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.Count">
            <summary>Задает оболочка совместимости IndexDynamic`2.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.DropIndex">
            <summary>Задает оболочка совместимости IndexDynamic`2.DropIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.FillFinish">
            <summary>Задает оболочка совместимости IndexDynamic`2.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.FillInit">
            <summary>Задает оболочка совместимости IndexDynamic`2.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexDynamic`2.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.GetAllByLevelFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexDynamic`2.GetAllByLevel(Func`2&lt;!0,Int32&gt; LevelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.IndexArrayGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_IndexArray()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.IndexArraySetT1">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_IndexArray(!1 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.IndexCellGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.OnAppendElementPaEntry">
            <summary>Задает оболочка совместимости IndexDynamic`2.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.ScaleGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.TableGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexDynamic`2.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.ToString">
            <summary>Задает оболочка совместимости IndexDynamic`2.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.UniqueGet">
            <summary>Задает оболочка совместимости IndexDynamic`2.get_Unique()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexDynamic`2.Warmup">
            <summary>Задает оболочка совместимости IndexDynamic`2.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexHalfkeyImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.#ctor(UniversalIndex.IndexHalfkeyImmutable{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ActivateCache">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.BuildScale">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.BuildScale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.Count">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; rows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.GetAllByKey2Int64Int64T0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByKey2(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.HalfProducerGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_HalfProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.HalfProducerSetFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_HalfProducer(Func`2&lt;!0,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.IndexCellSetPaCell">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.ScaleGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.Statistics">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Statistics()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.StatisticsAfterSorting">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.StatisticsAfterSorting()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.Bind(UniversalIndex.IIndexImmutable{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.Build">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.BuildScale">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.BuildScale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ConstructorString">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.IndexHalfkeyImmutable`1(String path_name)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.Count">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.FillFinish">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.FillInit">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; rows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.GetAllByKey2Int64Int64T0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByKey2(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.HalfProducerGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_HalfProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.HalfProducerSetFuncOfT0Int32">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_HalfProducer(Func`2&lt;!0,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.IndexCellGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.IndexCellSetPaCell">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ScaleGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexHalfkeyImmutable`1+HalfPair</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.#ctor(UniversalIndex.IndexHalfkeyImmutable{`0}.HalfPair)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.AllInstances.CompareT0T0">
            <summary>Задает оболочка совместимости HalfPair.Compare(!0 x, !0 y)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.AllInstances.CompareToObject">
            <summary>Задает оболочка совместимости HalfPair.CompareTo(Object pair)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.AllInstances.KeyGet">
            <summary>Задает оболочка совместимости HalfPair.get_Key()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.Bind(System.IComparable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.Bind(System.Collections.Generic.IComparer{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.CompareT0T0">
            <summary>Задает оболочка совместимости HalfPair.Compare(!0 x, !0 y)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.CompareToObject">
            <summary>Задает оболочка совместимости HalfPair.CompareTo(Object pair)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.ConstructorInt64Int32IndexHalfkeyImmutableOfT0">
            <summary>Задает оболочка совместимости HalfPair.HalfPair(Int64 rec_off, Int32 hkey, IndexHalfkeyImmutable`1&lt;!0&gt; index)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.ShimHalfPair.KeyGet">
            <summary>Задает оболочка совместимости HalfPair.get_Key()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.Statistics">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Statistics()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.StatisticsAfterSorting">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.StatisticsAfterSorting()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.TableGet">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexHalfkeyImmutable`1.Warmup">
            <summary>Задает оболочка совместимости IndexHalfkeyImmutable`1.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexKeyImmutable`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexKeyImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.#ctor(UniversalIndex.IndexKeyImmutable{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.ActivateCache">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.Count">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.ScaleGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.Bind(UniversalIndex.IIndexImmutable{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.Build">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.ConstructorString">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.IndexKeyImmutable`1(String path_name)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.ConstructorStringIBearingTableFuncOfObjectT0IScale">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.IndexKeyImmutable`1(String path_name, IBearingTable table, Func`2&lt;Object,!0&gt; keyProducer, IScale scale)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.Count">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.FillFinish">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.FillInit">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.IndexCellGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.ScaleGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.TableGet">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexKeyImmutable`1.Warmup">
            <summary>Задает оболочка совместимости IndexKeyImmutable`1.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexToSortableTableImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.#ctor(UniversalIndex.IndexToSortableTableImmutable{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.ActivateCache">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.Count">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.ScaleGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.ToString01">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.tosortGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_tosort()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.AllInstances.tosortSetBoolean">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_tosort(Boolean value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.Bind(UniversalIndex.IIndexImmutable{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.Build">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.ConstructorTableViewFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.IndexToSortableTableImmutable`1(TableView table, Func`2&lt;Object,!0&gt; keyProducer)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.Count">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.FillFinish">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.FillInit">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.IndexCellGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.ScaleGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.TableGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.ToString">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.Warmup">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.tosortGet">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.get_tosort()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexToSortableTableImmutable`1.tosortSetBoolean">
            <summary>Задает оболочка совместимости IndexToSortableTableImmutable`1.set_tosort(Boolean value)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexViewImmutable`1">
            <summary>Тип оболочки совместимости для UniversalIndex.IndexViewImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexViewImmutable`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexViewImmutable`1.#ctor(UniversalIndex.IndexViewImmutable{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.ActivateCache">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.Build">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.Count">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.FillFinish">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.FillInit">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.ScaleGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.TableGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.ToString01">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.Warmup">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.tosortGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_tosort()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.AllInstances.tosortSetBoolean">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_tosort(Boolean value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexViewImmutable`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexViewImmutable`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimIndexViewImmutable`1.Bind(UniversalIndex.IIndexImmutable{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.Build">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.ConstructorString">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.IndexViewImmutable`1(String path_name)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.Count">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.FillFinish">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.FillFinish()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.FillInit">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.FillInit()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.GetAllByKeyInt64Int64T0">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.GetAllByKeyT0">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.IndexCellGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.KeyProducerGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.KeyProducerSetFuncOfObjectT0">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.ScaleGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_Scale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.ScaleSetIScale">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.TableGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_Table()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.TableSetIBearingTable">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.ToString">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.Warmup">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.tosortGet">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.get_tosort()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimIndexViewImmutable`1.tosortSetBoolean">
            <summary>Задает оболочка совместимости IndexViewImmutable`1.set_tosort(Boolean value)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimKeyOffsetPair`1">
            <summary>Тип оболочки совместимости для UniversalIndex.KeyOffsetPair`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimKeyOffsetPair`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimKeyOffsetPair`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimKeyOffsetPair`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimKeyOffsetPair`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimKeyOffsetPair`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimKeyValueHash`3">
            <summary>Тип оболочки совместимости для UniversalIndex.KeyValueHash`3</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimKeyValueHash`3.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimKeyValueHash`3.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimKeyValueHash`3.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimKeyValueHash`3.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimKeyValueHash`3.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNameTableUniversal">
            <summary>Тип оболочки совместимости для UniversalIndex.NameTableUniversal</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.#ctor(UniversalIndex.NameTableUniversal)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ActivateCache">
            <summary>Задает оболочка совместимости NameTableUniversal.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AddString">
            <summary>Задает оболочка совместимости NameTableUniversal.Add(String s)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости NameTableUniversal.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.AddString">
            <summary>Задает оболочка совместимости NameTableUniversal.Add(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.BuildIndexes">
            <summary>Задает оболочка совместимости NameTableUniversal.BuildIndexes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.BuildScale">
            <summary>Задает оболочка совместимости NameTableUniversal.BuildScale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.CapacityGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Capacity()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.CapacitySetInt32">
            <summary>Задает оболочка совместимости NameTableUniversal.set_Capacity(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.Clear">
            <summary>Задает оболочка совместимости NameTableUniversal.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.CodesGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Codes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.CountGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.ExpandInt32IEnumerableOfString">
            <summary>Задает оболочка совместимости NameTableUniversal.Expand(Int32 estimationLength, IEnumerable`1&lt;String&gt; different_strings)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.FreeMemory">
            <summary>Задает оболочка совместимости NameTableUniversal.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.GetAllCodedStrings">
            <summary>Задает оболочка совместимости NameTableUniversal.GetAllCodedStrings()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.GetCodeString">
            <summary>Задает оболочка совместимости NameTableUniversal.GetCode(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.GetSetCodeString">
            <summary>Задает оболочка совместимости NameTableUniversal.GetSetCode(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.GetStringInt32">
            <summary>Задает оболочка совместимости NameTableUniversal.GetString(Int32 cod)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.InsertPortionIEnumerableOfString">
            <summary>Задает оболочка совместимости NameTableUniversal.InsertPortion(IEnumerable`1&lt;String&gt; s_flow)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.KeysGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.Save">
            <summary>Задает оболочка совместимости NameTableUniversal.Save()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.ToString01">
            <summary>Задает оболочка совместимости NameTableUniversal.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.AllInstances.Warmup">
            <summary>Задает оболочка совместимости NameTableUniversal.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.Bind(UniversalIndex.INametable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.BuildIndexes">
            <summary>Задает оболочка совместимости NameTableUniversal.BuildIndexes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.BuildScale">
            <summary>Задает оболочка совместимости NameTableUniversal.BuildScale()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.CapacityGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Capacity()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.CapacitySetInt32">
            <summary>Задает оболочка совместимости NameTableUniversal.set_Capacity(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.Clear">
            <summary>Задает оболочка совместимости NameTableUniversal.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.CodesGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Codes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ConstructorString">
            <summary>Задает оболочка совместимости NameTableUniversal.NameTableUniversal(String path)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.CountGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ExpandInt32IEnumerableOfString">
            <summary>Задает оболочка совместимости NameTableUniversal.Expand(Int32 estimationLength, IEnumerable`1&lt;String&gt; different_strings)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.FreeMemory">
            <summary>Задает оболочка совместимости NameTableUniversal.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.GetAllCodedStrings">
            <summary>Задает оболочка совместимости NameTableUniversal.GetAllCodedStrings()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.GetCodeString">
            <summary>Задает оболочка совместимости NameTableUniversal.GetCode(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.GetSetCodeString">
            <summary>Задает оболочка совместимости NameTableUniversal.GetSetCode(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.GetStringInt32">
            <summary>Задает оболочка совместимости NameTableUniversal.GetString(Int32 cod)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.InsertPortionIEnumerableOfString">
            <summary>Задает оболочка совместимости NameTableUniversal.InsertPortion(IEnumerable`1&lt;String&gt; s_flow)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.KeysGet">
            <summary>Задает оболочка совместимости NameTableUniversal.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.Main8">
            <summary>Задает оболочка совместимости NameTableUniversal.Main8()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.Save">
            <summary>Задает оболочка совместимости NameTableUniversal.Save()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString">
            <summary>Тип оболочки совместимости для UniversalIndex.NameTableUniversal+HashedString</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.#ctor(UniversalIndex.NameTableUniversal.HashedString)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.AllInstances.CompareToObject">
            <summary>Задает оболочка совместимости HashedString.CompareTo(Object ob)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.AllInstances.HashGet">
            <summary>Задает оболочка совместимости HashedString.get_Hash()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.AllInstances.StrGet">
            <summary>Задает оболочка совместимости HashedString.get_Str()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.AllInstances.StrSetString">
            <summary>Задает оболочка совместимости HashedString.set_Str(String value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.Bind(System.IComparable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.CompareToObject">
            <summary>Задает оболочка совместимости HashedString.CompareTo(Object ob)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.Constructor">
            <summary>Задает оболочка совместимости HashedString.HashedString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.HashGet">
            <summary>Задает оболочка совместимости HashedString.get_Hash()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.StrGet">
            <summary>Задает оболочка совместимости HashedString.get_Str()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ShimHashedString.StrSetString">
            <summary>Задает оболочка совместимости HashedString.set_Str(String value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.ToString">
            <summary>Задает оболочка совместимости NameTableUniversal.ToString()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNameTableUniversal.Warmup">
            <summary>Задает оболочка совместимости NameTableUniversal.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNametableLinear">
            <summary>Тип оболочки совместимости для UniversalIndex.NametableLinear</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinear.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinear.#ctor(UniversalIndex.NametableLinear)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNametableLinear.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.CapacityGet">
            <summary>Задает оболочка совместимости NametableLinear.get_Capacity()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.CapacitySetInt32">
            <summary>Задает оболочка совместимости NametableLinear.set_Capacity(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.Check">
            <summary>Задает оболочка совместимости NametableLinear.Check()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.Clear">
            <summary>Задает оболочка совместимости NametableLinear.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.ExpandInt32IEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinear.Expand(Int32 length_estimation, IEnumerable`1&lt;String&gt; keyflow)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.F1String">
            <summary>Задает оболочка совместимости NametableLinear.F1(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.F2String">
            <summary>Задает оболочка совместимости NametableLinear.F2(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.FreeMemory">
            <summary>Задает оболочка совместимости NametableLinear.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.GetCodeString">
            <summary>Задает оболочка совместимости NametableLinear.GetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.GetSetCodeString">
            <summary>Задает оболочка совместимости NametableLinear.GetSetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.GetStringInt32">
            <summary>Задает оболочка совместимости NametableLinear.GetString(Int32 c)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.InsertPortionIEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinear.InsertPortion(IEnumerable`1&lt;String&gt; unsorted)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances.Save">
            <summary>Задает оболочка совместимости NametableLinear.Save()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances._Expandb__12_0String">
            <summary>Задает оболочка совместимости NametableLinear.&lt;Expand&gt;b__12_0(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.AllInstances._ctorb__9_0String">
            <summary>Задает оболочка совместимости NametableLinear.&lt;.ctor&gt;b__9_0(String s)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinear.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinear.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinear.Bind(UniversalIndex.INametable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.CapacityGet">
            <summary>Задает оболочка совместимости NametableLinear.get_Capacity()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.CapacitySetInt32">
            <summary>Задает оболочка совместимости NametableLinear.set_Capacity(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.Check">
            <summary>Задает оболочка совместимости NametableLinear.Check()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.Clear">
            <summary>Задает оболочка совместимости NametableLinear.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.ConstructorString">
            <summary>Задает оболочка совместимости NametableLinear.NametableLinear(String path)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.ExpandInt32IEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinear.Expand(Int32 length_estimation, IEnumerable`1&lt;String&gt; keyflow)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.F1String">
            <summary>Задает оболочка совместимости NametableLinear.F1(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.F2String">
            <summary>Задает оболочка совместимости NametableLinear.F2(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.FreeMemory">
            <summary>Задает оболочка совместимости NametableLinear.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.GetCodeString">
            <summary>Задает оболочка совместимости NametableLinear.GetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.GetSetCodeString">
            <summary>Задает оболочка совместимости NametableLinear.GetSetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.GetStringInt32">
            <summary>Задает оболочка совместимости NametableLinear.GetString(Int32 c)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.InsertPortionIEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinear.InsertPortion(IEnumerable`1&lt;String&gt; unsorted)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear.Save">
            <summary>Задает оболочка совместимости NametableLinear.Save()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear._Expandb__12_0String">
            <summary>Задает оболочка совместимости NametableLinear.&lt;Expand&gt;b__12_0(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinear._ctorb__9_0String">
            <summary>Задает оболочка совместимости NametableLinear.&lt;.ctor&gt;b__9_0(String s)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNametableLinearBuffered">
            <summary>Тип оболочки совместимости для UniversalIndex.NametableLinearBuffered</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinearBuffered.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinearBuffered.#ctor(UniversalIndex.NametableLinearBuffered)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.ActivateCache">
            <summary>Задает оболочка совместимости NametableLinearBuffered.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости NametableLinearBuffered.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.CapacityGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Capacity()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.CapacitySetInt32">
            <summary>Задает оболочка совместимости NametableLinearBuffered.set_Capacity(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.Clear">
            <summary>Задает оболочка совместимости NametableLinearBuffered.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.CodesGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Codes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.CountGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.ExpandInt32IEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.Expand(Int32 length_estimation, IEnumerable`1&lt;String&gt; keyflow)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.F1UInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.F1(UInt64 h)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.F2String">
            <summary>Задает оболочка совместимости NametableLinearBuffered.F2(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.FreeMemory">
            <summary>Задает оболочка совместимости NametableLinearBuffered.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.GetCodeKeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetCode(KeyValueHash`3&lt;String,Int32,UInt64&gt; keyValueHash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.GetCodeString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.GetSetCodeString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetSetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.GetStringInt32">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetString(Int32 c)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.InsertPortionIEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.InsertPortion(IEnumerable`1&lt;String&gt; unsorted)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.KeysGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.Save">
            <summary>Задает оболочка совместимости NametableLinearBuffered.Save()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.SetNewCodeStringUInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.SetNewCode(String key, UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.WharmUp">
            <summary>Задает оболочка совместимости NametableLinearBuffered.WharmUp()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances.WriteBuffer">
            <summary>Задает оболочка совместимости NametableLinearBuffered.WriteBuffer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances._InsertPortionb__23_2KeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.&lt;InsertPortion&gt;b__23_2(KeyValueHash`3&lt;String,Int32,UInt64&gt; s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.AllInstances._ctorb__18_0String">
            <summary>Задает оболочка совместимости NametableLinearBuffered.&lt;.ctor&gt;b__18_0(String s)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinearBuffered.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinearBuffered.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimNametableLinearBuffered.Bind(UniversalIndex.INametable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.CapacityGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Capacity()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.CapacitySetInt32">
            <summary>Задает оболочка совместимости NametableLinearBuffered.set_Capacity(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.Clear">
            <summary>Задает оболочка совместимости NametableLinearBuffered.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.CodesGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Codes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.ConstructorStringUInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.NametableLinearBuffered(String path, UInt64 buffer_size)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.CountGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.ExpandInt32IEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.Expand(Int32 length_estimation, IEnumerable`1&lt;String&gt; keyflow)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.F1UInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.F1(UInt64 h)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.F2String">
            <summary>Задает оболочка совместимости NametableLinearBuffered.F2(String s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.FreeMemory">
            <summary>Задает оболочка совместимости NametableLinearBuffered.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.GetCodeKeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetCode(KeyValueHash`3&lt;String,Int32,UInt64&gt; keyValueHash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.GetCodeString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.GetSetCodeString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetSetCode(String key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.GetStringInt32">
            <summary>Задает оболочка совместимости NametableLinearBuffered.GetString(Int32 c)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.InsertPortionIEnumerableOfString">
            <summary>Задает оболочка совместимости NametableLinearBuffered.InsertPortion(IEnumerable`1&lt;String&gt; unsorted)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.KeysGet">
            <summary>Задает оболочка совместимости NametableLinearBuffered.get_Keys()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.Save">
            <summary>Задает оболочка совместимости NametableLinearBuffered.Save()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.SetNewCodeStringUInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.SetNewCode(String key, UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.WharmUp">
            <summary>Задает оболочка совместимости NametableLinearBuffered.WharmUp()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered.WriteBuffer">
            <summary>Задает оболочка совместимости NametableLinearBuffered.WriteBuffer()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered._InsertPortionb__23_2KeyValueHashOfStringInt32UInt64">
            <summary>Задает оболочка совместимости NametableLinearBuffered.&lt;InsertPortion&gt;b__23_2(KeyValueHash`3&lt;String,Int32,UInt64&gt; s)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimNametableLinearBuffered._ctorb__18_0String">
            <summary>Задает оболочка совместимости NametableLinearBuffered.&lt;.ctor&gt;b__18_0(String s)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimPaTypeGenerator">
            <summary>Тип оболочки совместимости для UniversalIndex.PaTypeGenerator</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPaTypeGenerator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPaTypeGenerator.#ctor(UniversalIndex.PaTypeGenerator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimPaTypeGenerator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.AllInstances.AppendObjectBinaryWriter">
            <summary>Задает оболочка совместимости PaTypeGenerator.Append(Object value, BinaryWriter bw)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.AllInstances.AppendPTypeObjectBinaryWriter">
            <summary>Задает оболочка совместимости PaTypeGenerator.Append(PType pType, Object value, BinaryWriter bw)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPaTypeGenerator.AllInstances.GetPTypeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{UniversalIndex.PaTypeGenerator,``0,PolarDB.PType})">
            <summary>Задает оболочка совместимости PaTypeGenerator.GetPType(!!0 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.AllInstances.GetPTypeType">
            <summary>Задает оболочка совместимости PaTypeGenerator.GetPType(Type type)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.AllInstances._GetPTypeb__1_0FieldInfo">
            <summary>Задает оболочка совместимости PaTypeGenerator.&lt;GetPType&gt;b__1_0(FieldInfo st)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.AppendObjectBinaryWriter">
            <summary>Задает оболочка совместимости PaTypeGenerator.Append(Object value, BinaryWriter bw)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.AppendPTypeObjectBinaryWriter">
            <summary>Задает оболочка совместимости PaTypeGenerator.Append(PType pType, Object value, BinaryWriter bw)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPaTypeGenerator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPaTypeGenerator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.Constructor">
            <summary>Задает оболочка совместимости PaTypeGenerator.PaTypeGenerator()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPaTypeGenerator.GetPTypeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,PolarDB.PType})">
            <summary>Задает оболочка совместимости PaTypeGenerator.GetPType(!!0 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator.GetPTypeType">
            <summary>Задает оболочка совместимости PaTypeGenerator.GetPType(Type type)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPaTypeGenerator._GetPTypeb__1_0FieldInfo">
            <summary>Задает оболочка совместимости PaTypeGenerator.&lt;GetPType&gt;b__1_0(FieldInfo st)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimPrimes">
            <summary>Тип оболочки совместимости для UniversalIndex.Primes</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPrimes.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPrimes.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimPrimes.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPrimes.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPrimes.GetGCDUInt64UInt64">
            <summary>Задает оболочка совместимости Primes.GetGCD(UInt64 a, UInt64 b)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPrimes.GetMultiplyUInt64UInt64UInt64">
            <summary>Задает оболочка совместимости Primes.GetMultiply(UInt64 a, UInt64 b, UInt64 m)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPrimes.GetNextPrimeUInt64">
            <summary>Задает оболочка совместимости Primes.GetNextPrime(UInt64 start)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPrimes.GetPowerUInt64UInt64UInt64">
            <summary>Задает оболочка совместимости Primes.GetPower(UInt64 a, UInt64 b, UInt64 m)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimPrimes.IsPrimeByFermaUInt64">
            <summary>Задает оболочка совместимости Primes.IsPrimeByFerma(UInt64 number)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScaleCell">
            <summary>Тип оболочки совместимости для UniversalIndex.ScaleCell</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleCell.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleCell.#ctor(UniversalIndex.ScaleCell)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.ActivateCache">
            <summary>Задает оболочка совместимости ScaleCell.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScaleCell.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости ScaleCell.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.Build">
            <summary>Задает оболочка совместимости ScaleCell.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.BuildInt64">
            <summary>Задает оболочка совместимости ScaleCell.Build(Int64 n)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.CreateMethodToPosition">
            <summary>Задает оболочка совместимости ScaleCell.CreateMethodToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScaleCell.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости ScaleCell.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.IndexCellSetPaCell">
            <summary>Задает оболочка совместимости ScaleCell.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.ToPositionGet">
            <summary>Задает оболочка совместимости ScaleCell.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScaleCell.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances.Warmup">
            <summary>Задает оболочка совместимости ScaleCell.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances._CreateMethodToPositionb__15_0Int32">
            <summary>Задает оболочка совместимости ScaleCell.&lt;CreateMethodToPosition&gt;b__15_0(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.AllInstances._CreateMethodToPositionb__15_1Int32">
            <summary>Задает оболочка совместимости ScaleCell.&lt;CreateMethodToPosition&gt;b__15_1(Int32 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleCell.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleCell.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleCell.Bind(UniversalIndex.IScale)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.Build">
            <summary>Задает оболочка совместимости ScaleCell.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.BuildInt64">
            <summary>Задает оболочка совместимости ScaleCell.Build(Int64 n)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.ConstructorString">
            <summary>Задает оболочка совместимости ScaleCell.ScaleCell(String index_path_name)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.CreateMethodToPosition">
            <summary>Задает оболочка совместимости ScaleCell.CreateMethodToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScaleCell.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.IndexCellGet">
            <summary>Задает оболочка совместимости ScaleCell.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.IndexCellSetPaCell">
            <summary>Задает оболочка совместимости ScaleCell.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.ToPositionGet">
            <summary>Задает оболочка совместимости ScaleCell.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScaleCell.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell.Warmup">
            <summary>Задает оболочка совместимости ScaleCell.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell._CreateMethodToPositionb__15_0Int32">
            <summary>Задает оболочка совместимости ScaleCell.&lt;CreateMethodToPosition&gt;b__15_0(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleCell._CreateMethodToPositionb__15_1Int32">
            <summary>Задает оболочка совместимости ScaleCell.&lt;CreateMethodToPosition&gt;b__15_1(Int32 key)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScaleInMemory">
            <summary>Тип оболочки совместимости для UniversalIndex.ScaleInMemory</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleInMemory.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleInMemory.#ctor(UniversalIndex.ScaleInMemory)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScaleInMemory.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.AllInstances.Build">
            <summary>Задает оболочка совместимости ScaleInMemory.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.AllInstances.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScaleInMemory.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.AllInstances.ToPositionGet">
            <summary>Задает оболочка совместимости ScaleInMemory.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.AllInstances.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScaleInMemory.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.AllInstances._Buildb__13_1Int32">
            <summary>Задает оболочка совместимости ScaleInMemory.&lt;Build&gt;b__13_1(Int32 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleInMemory.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleInMemory.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.Build">
            <summary>Задает оболочка совместимости ScaleInMemory.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.ConstructorPaEntryInt64Int64FuncOfObjectInt32Int32">
            <summary>Задает оболочка совместимости ScaleInMemory.ScaleInMemory(PaEntry seq, Int64 start, Int64 number, Func`2&lt;Object,Int32&gt; keyFunction, Int32 n_scale)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScaleInMemory.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.ToPositionGet">
            <summary>Задает оболочка совместимости ScaleInMemory.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScaleInMemory.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleInMemory._Buildb__13_1Int32">
            <summary>Задает оболочка совместимости ScaleInMemory.&lt;Build&gt;b__13_1(Int32 key)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScaleMemory">
            <summary>Тип оболочки совместимости для UniversalIndex.ScaleMemory</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleMemory.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleMemory.#ctor(UniversalIndex.ScaleMemory)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.ActivateCache">
            <summary>Задает оболочка совместимости ScaleMemory.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScaleMemory.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости ScaleMemory.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.Build">
            <summary>Задает оболочка совместимости ScaleMemory.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.BuildInt64">
            <summary>Задает оболочка совместимости ScaleMemory.Build(Int64 n)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScaleMemory.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.IndexCellGet">
            <summary>Задает оболочка совместимости ScaleMemory.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.IndexCellSetPaCell">
            <summary>Задает оболочка совместимости ScaleMemory.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.ToPositionGet">
            <summary>Задает оболочка совместимости ScaleMemory.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScaleMemory.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances.Warmup">
            <summary>Задает оболочка совместимости ScaleMemory.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.AllInstances._Buildb__16_1Int64Object">
            <summary>Задает оболочка совместимости ScaleMemory.&lt;Build&gt;b__16_1(Int64 off, Object val)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleMemory.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleMemory.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScaleMemory.Bind(UniversalIndex.IScale)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.Build">
            <summary>Задает оболочка совместимости ScaleMemory.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.BuildInt64">
            <summary>Задает оболочка совместимости ScaleMemory.Build(Int64 n)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.Constructor">
            <summary>Задает оболочка совместимости ScaleMemory.ScaleMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.ConstructorInt64">
            <summary>Задает оболочка совместимости ScaleMemory.ScaleMemory(Int64 n)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScaleMemory.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.IndexCellGet">
            <summary>Задает оболочка совместимости ScaleMemory.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.IndexCellSetPaCell">
            <summary>Задает оболочка совместимости ScaleMemory.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.ToPositionGet">
            <summary>Задает оболочка совместимости ScaleMemory.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScaleMemory.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory.Warmup">
            <summary>Задает оболочка совместимости ScaleMemory.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScaleMemory._Buildb__16_1Int64Object">
            <summary>Задает оболочка совместимости ScaleMemory.&lt;Build&gt;b__16_1(Int64 off, Object val)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScalePaCell">
            <summary>Тип оболочки совместимости для UniversalIndex.ScalePaCell</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScalePaCell.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScalePaCell.#ctor(UniversalIndex.ScalePaCell)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimScalePaCell.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.AllInstances.Build">
            <summary>Задает оболочка совместимости ScalePaCell.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.AllInstances.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScalePaCell.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.AllInstances.ToPositionGet">
            <summary>Задает оболочка совместимости ScalePaCell.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.AllInstances.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScalePaCell.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.AllInstances._Buildb__13_1Int32">
            <summary>Задает оболочка совместимости ScalePaCell.&lt;Build&gt;b__13_1(Int32 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScalePaCell.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimScalePaCell.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.Build">
            <summary>Задает оболочка совместимости ScalePaCell.Build()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.ConstructorStringPaEntryInt64Int64FuncOfObjectInt32Int32">
            <summary>Задает оболочка совместимости ScalePaCell.ScalePaCell(String scale_cell_path, PaEntry seq, Int64 start, Int64 number, Func`2&lt;Object,Int32&gt; keyFunction, Int32 n_scale)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.GetDiapasonInt32">
            <summary>Задает оболочка совместимости ScalePaCell.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.ToPositionGet">
            <summary>Задает оболочка совместимости ScalePaCell.get_ToPosition()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell.ToPositionSetFuncOfInt32Int32">
            <summary>Задает оболочка совместимости ScalePaCell.set_ToPosition(Func`2&lt;Int32,Int32&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimScalePaCell._Buildb__13_1Int32">
            <summary>Задает оболочка совместимости ScalePaCell.&lt;Build&gt;b__13_1(Int32 key)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimTableRow">
            <summary>Тип оболочки совместимости для UniversalIndex.TableRow</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableRow.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimTableRow.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableRow.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableRow.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableRow.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimTableView">
            <summary>Тип оболочки совместимости для UniversalIndex.TableView</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableView.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableView.#ctor(UniversalIndex.TableView)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.ActivateCache">
            <summary>Задает оболочка совместимости TableView.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AddIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableView.Add(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimTableView.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости TableView.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.AddIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableView.Add(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.AppendValueObject">
            <summary>Задает оболочка совместимости TableView.AppendValue(Object value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.BuildIndexes">
            <summary>Задает оболочка совместимости TableView.BuildIndexes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.DeleteEntryPaEntry">
            <summary>Задает оболочка совместимости TableView.DeleteEntry(PaEntry record)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.Elements">
            <summary>Задает оболочка совместимости TableView.Elements()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.FillIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableView.Fill(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.GetUndeletedIEnumerableOfPaEntry">
            <summary>Задает оболочка совместимости TableView.GetUndeleted(IEnumerable`1&lt;PaEntry&gt; elements)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.RegisterIndexIIndexCommon">
            <summary>Задает оболочка совместимости TableView.RegisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.TableCellGet">
            <summary>Задает оболочка совместимости TableView.get_TableCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.UnregisterIndexIIndexCommon">
            <summary>Задает оболочка совместимости TableView.UnregisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances.Warmup">
            <summary>Задает оболочка совместимости TableView.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AllInstances._Addb__4_1ObjectArray">
            <summary>Задает оболочка совместимости TableView.&lt;Add&gt;b__4_1(Object[] v)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.AppendValueObject">
            <summary>Задает оболочка совместимости TableView.AppendValue(Object value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableView.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableView.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableView.Bind(UniversalIndex.IBearingTable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableView.Bind(UniversalIndex.IBearingTableImmutable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.BuildIndexes">
            <summary>Задает оболочка совместимости TableView.BuildIndexes()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.ConstructorStringPType">
            <summary>Задает оболочка совместимости TableView.TableView(String path_name, PType e_type)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.DeleteEntryPaEntry">
            <summary>Задает оболочка совместимости TableView.DeleteEntry(PaEntry record)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.Elements">
            <summary>Задает оболочка совместимости TableView.Elements()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.FillIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableView.Fill(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.GetUndeletedIEnumerableOfPaEntry">
            <summary>Задает оболочка совместимости TableView.GetUndeleted(IEnumerable`1&lt;PaEntry&gt; elements)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.RegisterIndexIIndexCommon">
            <summary>Задает оболочка совместимости TableView.RegisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.TableCellGet">
            <summary>Задает оболочка совместимости TableView.get_TableCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.UnregisterIndexIIndexCommon">
            <summary>Задает оболочка совместимости TableView.UnregisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView.Warmup">
            <summary>Задает оболочка совместимости TableView.Warmup()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableView._Addb__4_1ObjectArray">
            <summary>Задает оболочка совместимости TableView.&lt;Add&gt;b__4_1(Object[] v)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimTableViewImmutable">
            <summary>Тип оболочки совместимости для UniversalIndex.TableViewImmutable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableViewImmutable.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableViewImmutable.#ctor(UniversalIndex.TableViewImmutable)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.ActivateCache">
            <summary>Задает оболочка совместимости TableViewImmutable.ActivateCache()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.ActivateCache">
            <summary>Задает оболочка совместимости TableViewImmutable.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.Clear">
            <summary>Задает оболочка совместимости TableViewImmutable.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.Count">
            <summary>Задает оболочка совместимости TableViewImmutable.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.ElementInt64">
            <summary>Задает оболочка совместимости TableViewImmutable.Element(Int64 ind)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.FillIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableViewImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.FillTVIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableViewImmutable.FillTV(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.AllInstances.ScanFuncOfInt64ObjectBoolean">
            <summary>Задает оболочка совместимости TableViewImmutable.Scan(Func`3&lt;Int64,Object,Boolean&gt; doit)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableViewImmutable.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableViewImmutable.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.ShimTableViewImmutable.Bind(UniversalIndex.IBearingTableImmutable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.Clear">
            <summary>Задает оболочка совместимости TableViewImmutable.Clear()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.Constructor">
            <summary>Задает оболочка совместимости TableViewImmutable.TableViewImmutable()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.ConstructorStringPType">
            <summary>Задает оболочка совместимости TableViewImmutable.TableViewImmutable(String path_name, PType e_type)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.Count">
            <summary>Задает оболочка совместимости TableViewImmutable.Count()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.ElementInt64">
            <summary>Задает оболочка совместимости TableViewImmutable.Element(Int64 ind)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.FillIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableViewImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.FillTVIEnumerableOfObject">
            <summary>Задает оболочка совместимости TableViewImmutable.FillTV(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.ShimTableViewImmutable.ScanFuncOfInt64ObjectBoolean">
            <summary>Задает оболочка совместимости TableViewImmutable.Scan(Func`3&lt;Int64,Object,Boolean&gt; doit)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubBuffer4Nametable">
            <summary>Тип заглушки UniversalIndex.Buffer4Nametable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubBuffer4Nametable.#ctor(System.Func{System.String,System.UInt64},System.UInt64,System.UInt64,System.Single)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubBuffer4Nametable.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubBuffer4Nametable.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubBuffer4Nametable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubBuffer4Nametable.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubBuffer4Nametable.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubCodedString">
            <summary>Тип заглушки UniversalIndex.CodedString</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCodedString.#ctor(System.Object[])">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCodedString.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCodedString.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCodedString</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCodedString.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCodedString.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubCoding`1">
            <summary>Тип заглушки UniversalIndex.Coding`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.#ctor(System.Func{`0,System.UInt64},System.UInt64,System.Single)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.Add(`0,System.UInt64)">
            <summary>Задает заглушка Coding`1.Add(!0 key, UInt64 hash)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.AddT0UInt64">
            <summary>Задает stub Coding`1.Add(!0 key, UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCoding`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.Clear">
            <summary>Задает заглушка Coding`1.Clear()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.Clear01">
            <summary>Задает stub Coding`1.Clear()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.ContainsKey(`0)">
            <summary>Задает заглушка Coding`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.ContainsKeyT0">
            <summary>Задает stub Coding`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.FreeMemory">
            <summary>Задает заглушка Coding`1.FreeMemory()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.FreeMemory01">
            <summary>Задает stub Coding`1.FreeMemory()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCoding</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCoding`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCoding`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubCoding`1.Keys">
            <summary>Задает stub Coding`1.get_Keys()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.KeysGet">
            <summary>Задает stub Coding`1.get_Keys()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.Remove(`0)">
            <summary>Задает заглушка Coding`1.Remove(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.RemoveT0">
            <summary>Задает stub Coding`1.Remove(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.TryGetValue(UniversalIndex.KeyValueHash{`0,System.UInt64,System.UInt64})">
            <summary>Задает заглушка Coding`1.TryGetValue(KeyValueHash`3&lt;!0,UInt64,UInt64&gt; key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubCoding`1.TryGetValue(`0,System.UInt64@)">
            <summary>Задает заглушка Coding`1.TryGetValue(!0 key, UInt64&amp; code)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.TryGetValueKeyValueHashOfT0UInt64UInt64">
            <summary>Задает stub Coding`1.TryGetValue(KeyValueHash`3&lt;!0,UInt64,UInt64&gt; key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubCoding`1.TryGetValueT0UInt64Out">
            <summary>Задает stub Coding`1.TryGetValue(!0 key, UInt64&amp; code)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubDictionaryLong`2">
            <summary>Тип заглушки UniversalIndex.DictionaryLong`2</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.#ctor(System.Func{`0,System.UInt64},System.UInt64,System.Single)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.Add(`0,System.UInt64)">
            <summary>Задает заглушка Coding`1.Add(!0 key, UInt64 hash)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.Add(`0,`1,System.UInt64)">
            <summary>Задает заглушка DictionaryLong`2.Add(!0 key, !1 value, UInt64 hash)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.AddT0T1UInt64">
            <summary>Задает stub DictionaryLong`2.Add(!0 key, !1 value, UInt64 hash)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.AddT0UInt64">
            <summary>Задает stub Coding`1.Add(!0 key, UInt64 hash)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubDictionaryLong`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.Clear">
            <summary>Задает заглушка DictionaryLong`2.Clear()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.Clear01">
            <summary>Задает stub DictionaryLong`2.Clear()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.ContainsKey(`0)">
            <summary>Задает заглушка Coding`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.ContainsKeyT0">
            <summary>Задает stub Coding`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.FreeMemory">
            <summary>Задает заглушка DictionaryLong`2.FreeMemory()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.FreeMemory01">
            <summary>Задает stub DictionaryLong`2.FreeMemory()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDictionaryLong</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubDictionaryLong`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubDictionaryLong`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubDictionaryLong`2.Item(`0)">
            <summary>Задает stub DictionaryLong`2.get_Item(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.ItemGetT0">
            <summary>Задает stub DictionaryLong`2.get_Item(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.ItemSetT0T1">
            <summary>Задает stub DictionaryLong`2.set_Item(!0 key, !1 value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubDictionaryLong`2.Keys">
            <summary>Задает stub Coding`1.get_Keys()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.KeysGet">
            <summary>Задает stub Coding`1.get_Keys()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.Remove(`0)">
            <summary>Задает заглушка Coding`1.Remove(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.RemoveT0">
            <summary>Задает stub Coding`1.Remove(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValue(UniversalIndex.KeyValueHash{`0,System.UInt64,System.UInt64})">
            <summary>Задает заглушка Coding`1.TryGetValue(KeyValueHash`3&lt;!0,UInt64,UInt64&gt; key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValue(UniversalIndex.KeyValueHash{`0,`1,System.UInt64})">
            <summary>Задает заглушка DictionaryLong`2.TryGetValue(KeyValueHash`3&lt;!0,!1,UInt64&gt; key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValue(`0,System.UInt64@)">
            <summary>Задает заглушка Coding`1.TryGetValue(!0 key, UInt64&amp; code)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValue(`0,`1@)">
            <summary>Задает заглушка DictionaryLong`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValueKeyValueHashOfT0T1UInt64">
            <summary>Задает stub DictionaryLong`2.TryGetValue(KeyValueHash`3&lt;!0,!1,UInt64&gt; key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValueKeyValueHashOfT0UInt64UInt64">
            <summary>Задает stub Coding`1.TryGetValue(KeyValueHash`3&lt;!0,UInt64,UInt64&gt; key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValueT0T1Out">
            <summary>Задает stub DictionaryLong`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.TryGetValueT0UInt64Out">
            <summary>Задает stub Coding`1.TryGetValue(!0 key, UInt64&amp; code)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubDictionaryLong`2.Values">
            <summary>Задает stub DictionaryLong`2.get_Values()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubDictionaryLong`2.ValuesGet">
            <summary>Задает stub DictionaryLong`2.get_Values()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIBearingTable">
            <summary>Тип заглушки UniversalIndex.IBearingTable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.#ctor">
            <summary>Инициализирует новый экземпляр type StubIBearingTable</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.ActivateCache">
            <summary>Задает stub IBearingTable.ActivateCache()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.AppendValueObject">
            <summary>Задает stub IBearingTable.AppendValue(Object value)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.Clear">
            <summary>Задает stub IBearingTableImmutable.Clear()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.Count">
            <summary>Задает stub IBearingTableImmutable.Count()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.DeleteEntryPaEntry">
            <summary>Задает stub IBearingTable.DeleteEntry(PaEntry record)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.ElementInt64">
            <summary>Задает stub IBearingTableImmutable.Element(Int64 ind)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.FillIEnumerableOfObject">
            <summary>Задает stub IBearingTableImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.GetUndeletedIEnumerableOfPaEntry">
            <summary>Задает stub IBearingTable.GetUndeleted(IEnumerable`1&lt;PaEntry&gt; elements)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.RegisterIndexIIndexCommon">
            <summary>Задает stub IBearingTable.RegisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.ScanFuncOfInt64ObjectBoolean">
            <summary>Задает stub IBearingTableImmutable.Scan(Func`3&lt;Int64,Object,Boolean&gt; doit)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#ActivateCache">
            <summary>Задает заглушка IBearingTable.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#AppendValue(System.Object)">
            <summary>Задает заглушка IBearingTable.AppendValue(Object value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#DeleteEntry(PolarDB.PaEntry)">
            <summary>Задает заглушка IBearingTable.DeleteEntry(PaEntry record)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#GetUndeleted(System.Collections.Generic.IEnumerable{PolarDB.PaEntry})">
            <summary>Задает заглушка IBearingTable.GetUndeleted(IEnumerable`1&lt;PaEntry&gt; elements)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#RegisterIndex(UniversalIndex.IIndexCommon)">
            <summary>Задает заглушка IBearingTable.RegisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#UnregisterIndex(UniversalIndex.IIndexCommon)">
            <summary>Задает заглушка IBearingTable.UnregisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTable#Warmup">
            <summary>Задает заглушка IBearingTable.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTableImmutable#Clear">
            <summary>Задает заглушка IBearingTableImmutable.Clear()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTableImmutable#Count">
            <summary>Задает заглушка IBearingTableImmutable.Count()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTableImmutable#Element(System.Int64)">
            <summary>Задает заглушка IBearingTableImmutable.Element(Int64 ind)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTableImmutable#Fill(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Задает заглушка IBearingTableImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTable.UniversalIndex#IBearingTableImmutable#Scan(System.Func{System.Int64,System.Object,System.Boolean})">
            <summary>Задает заглушка IBearingTableImmutable.Scan(Func`3&lt;Int64,Object,Boolean&gt; doit)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.UnregisterIndexIIndexCommon">
            <summary>Задает stub IBearingTable.UnregisterIndex(IIndexCommon index)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTable.Warmup">
            <summary>Задает stub IBearingTable.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIBearingTableImmutable">
            <summary>Тип заглушки UniversalIndex.IBearingTableImmutable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTableImmutable.#ctor">
            <summary>Инициализирует новый экземпляр type StubIBearingTableImmutable</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTableImmutable.Clear">
            <summary>Задает stub IBearingTableImmutable.Clear()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTableImmutable.Count">
            <summary>Задает stub IBearingTableImmutable.Count()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTableImmutable.ElementInt64">
            <summary>Задает stub IBearingTableImmutable.Element(Int64 ind)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTableImmutable.FillIEnumerableOfObject">
            <summary>Задает stub IBearingTableImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIBearingTableImmutable.ScanFuncOfInt64ObjectBoolean">
            <summary>Задает stub IBearingTableImmutable.Scan(Func`3&lt;Int64,Object,Boolean&gt; doit)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTableImmutable.UniversalIndex#IBearingTableImmutable#Clear">
            <summary>Задает заглушка IBearingTableImmutable.Clear()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTableImmutable.UniversalIndex#IBearingTableImmutable#Count">
            <summary>Задает заглушка IBearingTableImmutable.Count()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTableImmutable.UniversalIndex#IBearingTableImmutable#Element(System.Int64)">
            <summary>Задает заглушка IBearingTableImmutable.Element(Int64 ind)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTableImmutable.UniversalIndex#IBearingTableImmutable#Fill(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Задает заглушка IBearingTableImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIBearingTableImmutable.UniversalIndex#IBearingTableImmutable#Scan(System.Func{System.Int64,System.Object,System.Boolean})">
            <summary>Задает заглушка IBearingTableImmutable.Scan(Func`3&lt;Int64,Object,Boolean&gt; doit)</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIGetDictionaryLong`2">
            <summary>Тип заглушки UniversalIndex.IGetDictionaryLong`2</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIGetDictionaryLong`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubIGetDictionaryLong</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.ContainsKeyT0">
            <summary>Задает stub IGetDictionaryLong`2.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#Count">
            <summary>Задает stub IGetDictionaryLong`2.get_Count()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.CountGet">
            <summary>Задает stub IGetDictionaryLong`2.get_Count()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.FreeMemory">
            <summary>Задает stub IGetDictionaryLong`2.FreeMemory()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#Item(`0)">
            <summary>Задает stub IGetDictionaryLong`2.get_Item(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.ItemGetT0">
            <summary>Задает stub IGetDictionaryLong`2.get_Item(!0 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#Keys">
            <summary>Задает stub IGetDictionaryLong`2.get_Keys()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.KeysGet">
            <summary>Задает stub IGetDictionaryLong`2.get_Keys()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.TryGetValueKeyValueHashOfT0T1UInt64">
            <summary>Задает stub IGetDictionaryLong`2.TryGetValue(KeyValueHash`3&lt;!0,!1,UInt64&gt; key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.TryGetValueT0T1Out">
            <summary>Задает stub IGetDictionaryLong`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#ContainsKey(`0)">
            <summary>Задает заглушка IGetDictionaryLong`2.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#FreeMemory">
            <summary>Задает заглушка IGetDictionaryLong`2.FreeMemory()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#TryGetValue(UniversalIndex.KeyValueHash{`0,`1,System.UInt64})">
            <summary>Задает заглушка IGetDictionaryLong`2.TryGetValue(KeyValueHash`3&lt;!0,!1,UInt64&gt; key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#TryGetValue(`0,`1@)">
            <summary>Задает заглушка IGetDictionaryLong`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIGetDictionaryLong`2.UniversalIndex#IGetDictionaryLong{TKey,TValue}#Values">
            <summary>Задает stub IGetDictionaryLong`2.get_Values()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIGetDictionaryLong`2.ValuesGet">
            <summary>Задает stub IGetDictionaryLong`2.get_Values()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIIndex`1">
            <summary>Тип заглушки UniversalIndex.IIndex`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIIndex</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.ActivateCache">
            <summary>Задает stub IIndexImmutable`1.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.AttachBackingFieldToKeyProducer">
            <summary>Присоединение делегатов для эмуляции StubIIndex.KeyProducer как свойства с резервным полем.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.AttachBackingFieldToScale">
            <summary>Присоединение делегатов для эмуляции StubIIndex.Scale как свойства с резервным полем.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.AttachBackingFieldToTable">
            <summary>Присоединение делегатов для эмуляции StubIIndex.Table как свойства с резервным полем.</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.Build">
            <summary>Задает stub IIndexImmutable`1.Build()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.Build01">
            <summary>Задает stub IIndexCommon.Build()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.Count">
            <summary>Задает stub IIndexImmutable`1.Count()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.DropIndex">
            <summary>Задает stub IIndexCommon.DropIndex()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.FillFinish">
            <summary>Задает stub IIndexImmutable`1.FillFinish()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.FillFinish01">
            <summary>Задает stub IIndexCommon.FillFinish()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.FillInit">
            <summary>Задает stub IIndexImmutable`1.FillInit()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.FillInit01">
            <summary>Задает stub IIndexCommon.FillInit()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает stub IIndexImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.FillPortionIEnumerableOfTableRow01">
            <summary>Задает stub IIndexCommon.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.GetAllByKeyInt64Int64T0">
            <summary>Задает stub IIndexImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.GetAllByKeyT0">
            <summary>Задает stub IIndexImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает stub IIndexImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.GetAllByLevelFuncOfT0Int32">
            <summary>Задает stub IIndex`1.GetAllByLevel(Func`2&lt;!0,Int32&gt; LevelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#IndexCell">
            <summary>Задает stub IIndexImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.IndexCellGet">
            <summary>Задает stub IIndexImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#KeyProducer">
            <summary>Задает stub IIndexImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.KeyProducerGet">
            <summary>Задает stub IIndexImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.KeyProducerSetFuncOfObjectT0">
            <summary>Задает stub IIndexImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.OnAppendElementPaEntry">
            <summary>Задает stub IIndexCommon.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#Scale">
            <summary>Задает stub IIndexImmutable`1.get_Scale()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.ScaleGet">
            <summary>Задает stub IIndexImmutable`1.get_Scale()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.ScaleSetIScale">
            <summary>Задает stub IIndexImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#Table">
            <summary>Задает stub IIndexImmutable`1.get_Table()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.TableGet">
            <summary>Задает stub IIndexImmutable`1.get_Table()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.TableSetIBearingTable">
            <summary>Задает stub IIndexImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#Build">
            <summary>Задает заглушка IIndexCommon.Build()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#DropIndex">
            <summary>Задает заглушка IIndexCommon.DropIndex()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#FillFinish">
            <summary>Задает заглушка IIndexCommon.FillFinish()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#FillInit">
            <summary>Задает заглушка IIndexCommon.FillInit()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#FillPortion(System.Collections.Generic.IEnumerable{UniversalIndex.TableRow})">
            <summary>Задает заглушка IIndexCommon.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#OnAppendElement(PolarDB.PaEntry)">
            <summary>Задает заглушка IIndexCommon.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexCommon#Warmup">
            <summary>Задает заглушка IIndexCommon.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#ActivateCache">
            <summary>Задает заглушка IIndexImmutable`1.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#Build">
            <summary>Задает заглушка IIndexImmutable`1.Build()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#Count">
            <summary>Задает заглушка IIndexImmutable`1.Count()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#FillFinish">
            <summary>Задает заглушка IIndexImmutable`1.FillFinish()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#FillInit">
            <summary>Задает заглушка IIndexImmutable`1.FillInit()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#FillPortion(System.Collections.Generic.IEnumerable{UniversalIndex.TableRow})">
            <summary>Задает заглушка IIndexImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#GetAllByKey(`0)">
            <summary>Задает заглушка IIndexImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#GetAllByKey(System.Int64,System.Int64,`0)">
            <summary>Задает заглушка IIndexImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#GetAllByLevel(System.Func{PolarDB.PaEntry,System.Int32})">
            <summary>Задает заглушка IIndexImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndexImmutable{Tkey}#Warmup">
            <summary>Задает заглушка IIndexImmutable`1.Warmup()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndex`1.UniversalIndex#IIndex{Tkey}#GetAllByLevel(System.Func{`0,System.Int32})">
            <summary>Задает заглушка IIndex`1.GetAllByLevel(Func`2&lt;!0,Int32&gt; LevelFunc)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.Warmup">
            <summary>Задает stub IIndexImmutable`1.Warmup()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndex`1.Warmup01">
            <summary>Задает stub IIndexCommon.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIIndexCommon">
            <summary>Тип заглушки UniversalIndex.IIndexCommon</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.#ctor">
            <summary>Инициализирует новый экземпляр type StubIIndexCommon</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.Build">
            <summary>Задает stub IIndexCommon.Build()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.DropIndex">
            <summary>Задает stub IIndexCommon.DropIndex()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.FillFinish">
            <summary>Задает stub IIndexCommon.FillFinish()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.FillInit">
            <summary>Задает stub IIndexCommon.FillInit()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.FillPortionIEnumerableOfTableRow">
            <summary>Задает stub IIndexCommon.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.OnAppendElementPaEntry">
            <summary>Задает stub IIndexCommon.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#Build">
            <summary>Задает заглушка IIndexCommon.Build()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#DropIndex">
            <summary>Задает заглушка IIndexCommon.DropIndex()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#FillFinish">
            <summary>Задает заглушка IIndexCommon.FillFinish()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#FillInit">
            <summary>Задает заглушка IIndexCommon.FillInit()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#FillPortion(System.Collections.Generic.IEnumerable{UniversalIndex.TableRow})">
            <summary>Задает заглушка IIndexCommon.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#OnAppendElement(PolarDB.PaEntry)">
            <summary>Задает заглушка IIndexCommon.OnAppendElement(PaEntry entry)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexCommon.UniversalIndex#IIndexCommon#Warmup">
            <summary>Задает заглушка IIndexCommon.Warmup()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexCommon.Warmup">
            <summary>Задает stub IIndexCommon.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIIndexImmutable`1">
            <summary>Тип заглушки UniversalIndex.IIndexImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIIndexImmutable</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.ActivateCache">
            <summary>Задает stub IIndexImmutable`1.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.AttachBackingFieldToKeyProducer">
            <summary>Присоединение делегатов для эмуляции StubIIndexImmutable.KeyProducer как свойства с резервным полем.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.AttachBackingFieldToScale">
            <summary>Присоединение делегатов для эмуляции StubIIndexImmutable.Scale как свойства с резервным полем.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.AttachBackingFieldToTable">
            <summary>Присоединение делегатов для эмуляции StubIIndexImmutable.Table как свойства с резервным полем.</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.Build">
            <summary>Задает stub IIndexImmutable`1.Build()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.Count">
            <summary>Задает stub IIndexImmutable`1.Count()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.FillFinish">
            <summary>Задает stub IIndexImmutable`1.FillFinish()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.FillInit">
            <summary>Задает stub IIndexImmutable`1.FillInit()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.FillPortionIEnumerableOfTableRow">
            <summary>Задает stub IIndexImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.GetAllByKeyInt64Int64T0">
            <summary>Задает stub IIndexImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.GetAllByKeyT0">
            <summary>Задает stub IIndexImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.GetAllByLevelFuncOfPaEntryInt32">
            <summary>Задает stub IIndexImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#IndexCell">
            <summary>Задает stub IIndexImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.IndexCellGet">
            <summary>Задает stub IIndexImmutable`1.get_IndexCell()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#KeyProducer">
            <summary>Задает stub IIndexImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.KeyProducerGet">
            <summary>Задает stub IIndexImmutable`1.get_KeyProducer()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.KeyProducerSetFuncOfObjectT0">
            <summary>Задает stub IIndexImmutable`1.set_KeyProducer(Func`2&lt;Object,!0&gt; value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#Scale">
            <summary>Задает stub IIndexImmutable`1.get_Scale()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.ScaleGet">
            <summary>Задает stub IIndexImmutable`1.get_Scale()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.ScaleSetIScale">
            <summary>Задает stub IIndexImmutable`1.set_Scale(IScale value)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#Table">
            <summary>Задает stub IIndexImmutable`1.get_Table()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.TableGet">
            <summary>Задает stub IIndexImmutable`1.get_Table()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.TableSetIBearingTable">
            <summary>Задает stub IIndexImmutable`1.set_Table(IBearingTable value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#ActivateCache">
            <summary>Задает заглушка IIndexImmutable`1.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#Build">
            <summary>Задает заглушка IIndexImmutable`1.Build()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#Count">
            <summary>Задает заглушка IIndexImmutable`1.Count()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#FillFinish">
            <summary>Задает заглушка IIndexImmutable`1.FillFinish()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#FillInit">
            <summary>Задает заглушка IIndexImmutable`1.FillInit()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#FillPortion(System.Collections.Generic.IEnumerable{UniversalIndex.TableRow})">
            <summary>Задает заглушка IIndexImmutable`1.FillPortion(IEnumerable`1&lt;TableRow&gt; tableRows)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#GetAllByKey(`0)">
            <summary>Задает заглушка IIndexImmutable`1.GetAllByKey(!0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#GetAllByKey(System.Int64,System.Int64,`0)">
            <summary>Задает заглушка IIndexImmutable`1.GetAllByKey(Int64 start, Int64 number, !0 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#GetAllByLevel(System.Func{PolarDB.PaEntry,System.Int32})">
            <summary>Задает заглушка IIndexImmutable`1.GetAllByLevel(Func`2&lt;PaEntry,Int32&gt; levelFunc)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIIndexImmutable`1.UniversalIndex#IIndexImmutable{Tkey}#Warmup">
            <summary>Задает заглушка IIndexImmutable`1.Warmup()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIIndexImmutable`1.Warmup">
            <summary>Задает stub IIndexImmutable`1.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubINametable">
            <summary>Тип заглушки UniversalIndex.INametable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.#ctor">
            <summary>Инициализирует новый экземпляр type StubINametable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.AttachBackingFieldToCapacity">
            <summary>Присоединение делегатов для эмуляции StubINametable.Capacity как свойства с резервным полем.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#Capacity">
            <summary>Задает stub INametable.get_Capacity()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.CapacityGet">
            <summary>Задает stub INametable.get_Capacity()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.CapacitySetInt32">
            <summary>Задает stub INametable.set_Capacity(Int32 value)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.Clear">
            <summary>Задает stub INametable.Clear()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.ExpandInt32IEnumerableOfString">
            <summary>Задает stub INametable.Expand(Int32 length_estimation, IEnumerable`1&lt;String&gt; keyflow)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.FreeMemory">
            <summary>Задает stub INametable.FreeMemory()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.GetCodeString">
            <summary>Задает stub INametable.GetCode(String s)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.GetSetCodeString">
            <summary>Задает stub INametable.GetSetCode(String s)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.GetStringInt32">
            <summary>Задает stub INametable.GetString(Int32 c)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.InsertPortionIEnumerableOfString">
            <summary>Задает stub INametable.InsertPortion(IEnumerable`1&lt;String&gt; unsorted)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubINametable.Save">
            <summary>Задает stub INametable.Save()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#Clear">
            <summary>Задает заглушка INametable.Clear()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#Expand(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Задает заглушка INametable.Expand(Int32 length_estimation, IEnumerable`1&lt;String&gt; keyflow)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#FreeMemory">
            <summary>Задает заглушка INametable.FreeMemory()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#GetCode(System.String)">
            <summary>Задает заглушка INametable.GetCode(String s)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#GetSetCode(System.String)">
            <summary>Задает заглушка INametable.GetSetCode(String s)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#GetString(System.Int32)">
            <summary>Задает заглушка INametable.GetString(Int32 c)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#InsertPortion(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Задает заглушка INametable.InsertPortion(IEnumerable`1&lt;String&gt; unsorted)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubINametable.UniversalIndex#INametable#Save">
            <summary>Задает заглушка INametable.Save()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIScale">
            <summary>Тип заглушки UniversalIndex.IScale</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.#ctor">
            <summary>Инициализирует новый экземпляр type StubIScale</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.ActivateCache">
            <summary>Задает stub IScale.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.AttachBackingFieldToIndexCell">
            <summary>Присоединение делегатов для эмуляции StubIScale.IndexCell как свойства с резервным полем.</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.Build">
            <summary>Задает stub IScale.Build()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.BuildInt64">
            <summary>Задает stub IScale.Build(Int64 n)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.GetDiapasonInt32">
            <summary>Задает stub IScale.GetDiapason(Int32 key)</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIScale.UniversalIndex#IScale#IndexCell">
            <summary>Задает stub IScale.get_IndexCell()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.IndexCellGet">
            <summary>Задает stub IScale.get_IndexCell()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.IndexCellSetPaCell">
            <summary>Задает stub IScale.set_IndexCell(PaCell value)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.UniversalIndex#IScale#ActivateCache">
            <summary>Задает заглушка IScale.ActivateCache()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.UniversalIndex#IScale#Build">
            <summary>Задает заглушка IScale.Build()</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.UniversalIndex#IScale#Build(System.Int64)">
            <summary>Задает заглушка IScale.Build(Int64 n)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.UniversalIndex#IScale#GetDiapason(System.Int32)">
            <summary>Задает заглушка IScale.GetDiapason(Int32 key)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIScale.UniversalIndex#IScale#Warmup">
            <summary>Задает заглушка IScale.Warmup()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIScale.Warmup">
            <summary>Задает stub IScale.Warmup()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexCascading`1">
            <summary>Тип заглушки UniversalIndex.IndexCascading`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexCascading`1.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascading`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexCascading`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexCascading</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascading`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascading`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexCascadingDynamic`1">
            <summary>Тип заглушки UniversalIndex.IndexCascadingDynamic`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexCascadingDynamic`1.#ctor(System.String,UniversalIndex.TableView,System.Func{System.Object,System.Int32},System.Func{System.Object,`0},System.Func{`0,System.Int32})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascadingDynamic`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexCascadingDynamic`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexCascadingDynamic</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascadingDynamic`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascadingDynamic`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexCascadingImmutable`1">
            <summary>Тип заглушки UniversalIndex.IndexCascadingImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexCascadingImmutable`1.#ctor(System.String,UniversalIndex.TableView,System.Func{System.Object,System.Int32},System.Func{System.Object,`0},System.Func{`0,System.Int32})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascadingImmutable`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexCascadingImmutable`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexCascadingImmutable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascadingImmutable`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexCascadingImmutable`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexDynamic`2">
            <summary>Тип заглушки UniversalIndex.IndexDynamic`2</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexDynamic`2.#ctor(System.Boolean)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexDynamic`2.#ctor(System.Boolean,`1)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexDynamic`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexDynamic`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexDynamic</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexDynamic`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexDynamic`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexDynamic`2.ToString">
            <summary>Задает заглушка IndexDynamic`2.ToString()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIndexDynamic`2.ToString01">
            <summary>Задает stub IndexDynamic`2.ToString()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexHalfkeyImmutable`1">
            <summary>Тип заглушки UniversalIndex.IndexHalfkeyImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexHalfkeyImmutable`1.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexHalfkeyImmutable`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexHalfkeyImmutable`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexHalfkeyImmutable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexHalfkeyImmutable`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexHalfkeyImmutable`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexKeyImmutable`1">
            <summary>Тип заглушки UniversalIndex.IndexKeyImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexKeyImmutable`1.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexKeyImmutable`1.#ctor(System.String,UniversalIndex.IBearingTable,System.Func{System.Object,`0},UniversalIndex.IScale)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexKeyImmutable`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexKeyImmutable`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexKeyImmutable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexKeyImmutable`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexKeyImmutable`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1">
            <summary>Тип заглушки UniversalIndex.IndexToSortableTableImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.#ctor(UniversalIndex.TableView,System.Func{System.Object,`0})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexToSortableTableImmutable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.ToString">
            <summary>Задает заглушка IndexToSortableTableImmutable`1.ToString()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIndexToSortableTableImmutable`1.ToString01">
            <summary>Задает stub IndexToSortableTableImmutable`1.ToString()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubIndexViewImmutable`1">
            <summary>Тип заглушки UniversalIndex.IndexViewImmutable`1</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexViewImmutable`1.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexViewImmutable`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexViewImmutable`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIndexViewImmutable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexViewImmutable`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubIndexViewImmutable`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubIndexViewImmutable`1.ToString">
            <summary>Задает заглушка IndexViewImmutable`1.ToString()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubIndexViewImmutable`1.ToString01">
            <summary>Задает stub IndexViewImmutable`1.ToString()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubNameTableUniversal">
            <summary>Тип заглушки UniversalIndex.NameTableUniversal</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNameTableUniversal.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNameTableUniversal.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNameTableUniversal.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNameTableUniversal</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNameTableUniversal.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNameTableUniversal.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNameTableUniversal.ToString">
            <summary>Задает заглушка NameTableUniversal.ToString()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubNameTableUniversal.ToString01">
            <summary>Задает stub NameTableUniversal.ToString()</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubNametableLinear">
            <summary>Тип заглушки UniversalIndex.NametableLinear</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNametableLinear.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNametableLinear.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNametableLinear.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNametableLinear</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNametableLinear.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNametableLinear.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubNametableLinearBuffered">
            <summary>Тип заглушки UniversalIndex.NametableLinearBuffered</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNametableLinearBuffered.#ctor(System.String,System.UInt64)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNametableLinearBuffered.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubNametableLinearBuffered.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNametableLinearBuffered</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNametableLinearBuffered.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubNametableLinearBuffered.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubPaTypeGenerator">
            <summary>Тип заглушки UniversalIndex.PaTypeGenerator</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubPaTypeGenerator.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubPaTypeGenerator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubPaTypeGenerator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPaTypeGenerator</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubPaTypeGenerator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubPaTypeGenerator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubScaleCell">
            <summary>Тип заглушки UniversalIndex.ScaleCell</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleCell.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleCell.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleCell.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubScaleCell</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleCell.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleCell.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubScaleInMemory">
            <summary>Тип заглушки UniversalIndex.ScaleInMemory</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleInMemory.#ctor(PolarDB.PaEntry,System.Int64,System.Int64,System.Func{System.Object,System.Int32},System.Int32)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleInMemory.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleInMemory.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubScaleInMemory</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleInMemory.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleInMemory.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubScaleMemory">
            <summary>Тип заглушки UniversalIndex.ScaleMemory</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleMemory.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleMemory.#ctor(System.Int64)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleMemory.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScaleMemory.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubScaleMemory</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleMemory.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScaleMemory.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubScalePaCell">
            <summary>Тип заглушки UniversalIndex.ScalePaCell</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScalePaCell.#ctor(System.String,PolarDB.PaEntry,System.Int64,System.Int64,System.Func{System.Object,System.Int32},System.Int32)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScalePaCell.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubScalePaCell.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubScalePaCell</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScalePaCell.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubScalePaCell.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubTableView">
            <summary>Тип заглушки UniversalIndex.TableView</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableView.#ctor(System.String,PolarDB.PType)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableView.ActivateCache">
            <summary>Задает заглушка TableView.ActivateCache()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubTableView.ActivateCache01">
            <summary>Задает stub TableView.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubTableView.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableView.Fill(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Задает заглушка TableView.Fill(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubTableView.FillIEnumerableOfObject">
            <summary>Задает stub TableView.Fill(IEnumerable`1&lt;Object&gt; values)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableView.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTableView</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubTableView.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubTableView.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Fakes.StubTableViewImmutable">
            <summary>Тип заглушки UniversalIndex.TableViewImmutable</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableViewImmutable.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableViewImmutable.#ctor(System.String,PolarDB.PType)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableViewImmutable.ActivateCache">
            <summary>Задает заглушка TableViewImmutable.ActivateCache()</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubTableViewImmutable.ActivateCache01">
            <summary>Задает stub TableViewImmutable.ActivateCache()</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubTableViewImmutable.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableViewImmutable.Fill(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Задает заглушка TableViewImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="F:UniversalIndex.Fakes.StubTableViewImmutable.FillIEnumerableOfObject">
            <summary>Задает stub TableViewImmutable.Fill(IEnumerable`1&lt;Object&gt; elements)</summary>
        </member>
        <member name="M:UniversalIndex.Fakes.StubTableViewImmutable.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTableViewImmutable</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubTableViewImmutable.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Fakes.StubTableViewImmutable.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Text_index.Fakes.ShimBitList">
            <summary>Тип оболочки совместимости для UniversalIndex.Text_index.BitList</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimBitList.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimBitList.#ctor(UniversalIndex.Text_index.BitList)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances.AndBitList">
            <summary>Задает оболочка совместимости BitList.And(BitList const)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances.Copy">
            <summary>Задает оболочка совместимости BitList.Copy()</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances.CountGet">
            <summary>Задает оболочка совместимости BitList.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances.CountSetInt32">
            <summary>Задает оболочка совместимости BitList.set_Count(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances.ItemGetInt32">
            <summary>Задает оболочка совместимости BitList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AllInstances.ItemSetInt32Boolean">
            <summary>Задает оболочка совместимости BitList.set_Item(Int32 index, Boolean value)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.AndBitList">
            <summary>Задает оболочка совместимости BitList.And(BitList const)</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimBitList.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimBitList.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.ConstructorInt32">
            <summary>Задает оболочка совместимости BitList.BitList(Int32 capacity)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.Copy">
            <summary>Задает оболочка совместимости BitList.Copy()</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.CountGet">
            <summary>Задает оболочка совместимости BitList.get_Count()</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.CountSetInt32">
            <summary>Задает оболочка совместимости BitList.set_Count(Int32 value)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.ItemGetInt32">
            <summary>Задает оболочка совместимости BitList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimBitList.ItemSetInt32Boolean">
            <summary>Задает оболочка совместимости BitList.set_Item(Int32 index, Boolean value)</summary>
        </member>
        <member name="T:UniversalIndex.Text_index.Fakes.ShimWordIndex">
            <summary>Тип оболочки совместимости для UniversalIndex.Text_index.WordIndex</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimWordIndex.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimWordIndex.#ctor(UniversalIndex.Text_index.WordIndex)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:UniversalIndex.Text_index.Fakes.ShimWordIndex.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.AllInstances.FindBySubWordString">
            <summary>Задает оболочка совместимости WordIndex.FindBySubWord(String subWord)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.AllInstances.InsertPortionIEnumerableOfTupleOfInt32String">
            <summary>Задает оболочка совместимости WordIndex.InsertPortion(IEnumerable`1&lt;Tuple`2&lt;Int32,String&gt;&gt; subjecsdWordsPair)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.AllInstances.InsertStringInt32">
            <summary>Задает оболочка совместимости WordIndex.Insert(String word, Int32 code)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.AllInstances.SaveString">
            <summary>Задает оболочка совместимости WordIndex.Save(String path)</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimWordIndex.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.ShimWordIndex.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.Constructor">
            <summary>Задает оболочка совместимости WordIndex.WordIndex()</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.FindBySubWordString">
            <summary>Задает оболочка совместимости WordIndex.FindBySubWord(String subWord)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.InsertPortionIEnumerableOfTupleOfInt32String">
            <summary>Задает оболочка совместимости WordIndex.InsertPortion(IEnumerable`1&lt;Tuple`2&lt;Int32,String&gt;&gt; subjecsdWordsPair)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.InsertStringInt32">
            <summary>Задает оболочка совместимости WordIndex.Insert(String word, Int32 code)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.SaveString">
            <summary>Задает оболочка совместимости WordIndex.Save(String path)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.Split2SubstringString">
            <summary>Задает оболочка совместимости WordIndex.Split2Substring(String subWord)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.Word2trigramsString">
            <summary>Задает оболочка совместимости WordIndex.Word2trigrams(String subWord)</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.ShimWordIndex.Word2trigramsStringInt32">
            <summary>Задает оболочка совместимости WordIndex.Word2trigrams(String subWord, Int32 k)</summary>
        </member>
        <member name="T:UniversalIndex.Text_index.Fakes.StubBitList">
            <summary>Тип заглушки UniversalIndex.Text_index.BitList</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.StubBitList.#ctor(System.Int32)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.StubBitList.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.StubBitList.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubBitList</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.StubBitList.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.StubBitList.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:UniversalIndex.Text_index.Fakes.StubWordIndex">
            <summary>Тип заглушки UniversalIndex.Text_index.WordIndex</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.StubWordIndex.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.StubWordIndex.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:UniversalIndex.Text_index.Fakes.StubWordIndex.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubWordIndex</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.StubWordIndex.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:UniversalIndex.Text_index.Fakes.StubWordIndex.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:words3Index.Fakes.ShimCharCoding">
            <summary>Тип оболочки совместимости для words3Index.CharCoding</summary>
        </member>
        <member name="M:words3Index.Fakes.ShimCharCoding.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:words3Index.Fakes.ShimCharCoding.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:words3Index.Fakes.ShimCharCoding.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimCharCoding.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimCharCoding.CharCodeChar">
            <summary>Задает оболочка совместимости CharCoding.CharCode(Char x)</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimCharCoding.CharDecodeInt32">
            <summary>Задает оболочка совместимости CharCoding.CharDecode(Int32 x)</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimCharCoding.StaticConstructor">
            <summary>Задает оболочка совместимости CharCoding.CharCoding()</summary>
        </member>
        <member name="T:words3Index.Fakes.ShimTrigrammCoding">
            <summary>Тип оболочки совместимости для words3Index.TrigrammCoding</summary>
        </member>
        <member name="M:words3Index.Fakes.ShimTrigrammCoding.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:words3Index.Fakes.ShimTrigrammCoding.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:words3Index.Fakes.ShimTrigrammCoding.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimTrigrammCoding.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimTrigrammCoding.TrigrammCodeInt32Int32Int32">
            <summary>Задает оболочка совместимости TrigrammCoding.TrigrammCode(Int32 a, Int32 b, Int32 c)</summary>
        </member>
        <member name="P:words3Index.Fakes.ShimTrigrammCoding.TrigrammDecodeInt32">
            <summary>Задает оболочка совместимости TrigrammCoding.TrigrammDecode(Int32 code)</summary>
        </member>
    </members>
</doc>
