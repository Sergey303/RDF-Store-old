//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Admin\Source\Repos\RDF-Store-Polar-DB-Lab\SparqlParseRun\sparq11lTranslator.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SparqlParseRun {

	using System;
	using System.Linq;	  
	using SparqlParseRun.SparqlClasses;
	using SparqlParseRun.SparqlClasses.InlineValues;
	using SparqlParseRun.SparqlClasses.GraphPattern.Triples.Node;
	using SparqlParseRun.SparqlClasses.Update;
	using SparqlParseRun.SparqlClasses.SparqlAggregateExpression;
	using SparqlParseRun.SparqlClasses.Expressions;
	using SparqlParseRun.SparqlClasses.GraphPattern;
	using SparqlParseRun.SparqlClasses.GraphPattern.Triples;
	using SparqlParseRun.SparqlClasses.SolutionModifier;
	using SparqlParseRun.SparqlClasses.Query;  
	using SparqlParseRun.SparqlClasses.Query.Result;  
    using SparqlParseRun.SparqlClasses.GraphPattern.Triples.Path;
	using RDFCommon;				 
	using RDFCommon.OVns;

	

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class sparq11lTranslatorParser : Parser {
	public const int
		T__22=1, T__21=2, T__20=3, T__19=4, T__18=5, T__17=6, T__16=7, T__15=8, 
		T__14=9, T__13=10, T__12=11, T__11=12, T__10=13, T__9=14, T__8=15, T__7=16, 
		T__6=17, T__5=18, T__4=19, T__3=20, T__2=21, T__1=22, T__0=23, ADD=24, 
		ALL=25, AS=26, ASC=27, ASK=28, BIND=29, BY=30, CREATE=31, CONSTRUCT=32, 
		COPY=33, CLEAR=34, DATA=35, DROP=36, DESCRIBE=37, DELETE=38, DESC=39, 
		DEFAULT=40, SELECT=41, DISTINCT=42, FROM=43, FILTER=44, GRAPH=45, HAVING=46, 
		IN=47, INSERT=48, INTO=49, GROUP=50, LOAD=51, LIMIT=52, MINUS=53, MOVE=54, 
		NAMED=55, NOT=56, OFFSET=57, ORDER=58, OPTIONAL=59, PREFIX=60, REDUCED=61, 
		SILENT=62, SERVICE=63, TO=64, UNDEF=65, UNION=66, VALUES=67, WITH=68, 
		WHERE=69, STR=70, LANG=71, LANGMATCHES=72, DATATYPE=73, BOUND=74, IRI=75, 
		URI=76, BNODE=77, RAND=78, ABS=79, CEIL=80, FLOOR=81, ROUND=82, CONCAT=83, 
		STRLEN=84, UCASE=85, LCASE=86, ENCODE_FOR_URI=87, CONTAINS=88, STRSTARTS=89, 
		STRENDS=90, STRBEFORE=91, STRAFTER=92, YEAR=93, MONTH=94, DAY=95, HOURS=96, 
		MINUTES=97, SECONDS=98, TIMEZONE=99, TZ=100, NOW=101, UUID=102, STRUUID=103, 
		MD5=104, SHA1=105, SHA256=106, SHA384=107, SHA512=108, COALESCE=109, IF=110, 
		STRLANG=111, STRDT=112, SAMETERM=113, ISIRI=114, ISURI=115, ISBLANK=116, 
		ISLITERAL=117, ISNUMERIC=118, REGEX=119, SUBSTR=120, REPLACE=121, EXISTS=122, 
		COUNT=123, SUM=124, MIN=125, MAX=126, AVG=127, SAMPLE=128, GROUP_CONCAT=129, 
		TRUE=130, FALSE=131, IRIREF=132, PNAME_LN=133, PNAME_NS=134, BLANK_NODE_LABEL=135, 
		VAR1=136, VAR2=137, LANGTAG=138, INTEGER=139, DECIMAL=140, DOUBLE=141, 
		INTEGER_POSITIVE=142, DECIMAL_POSITIVE=143, DOUBLE_POSITIVE=144, INTEGER_NEGATIVE=145, 
		DECIMAL_NEGATIVE=146, DOUBLE_NEGATIVE=147, EXPONENT=148, STRING_LITERAL1=149, 
		STRING_LITERAL2=150, STRING_LITERAL_LONG1=151, STRING_LITERAL_LONG2=152, 
		ECHAR=153, NIL=154, BracketOpen=155, BracketClose=156, WS=157, ANON=158, 
		SquareBracketOpen=159, SquareBracketClose=160, PN_CHARS_BASE=161, PN_CHARS_U=162, 
		VARNAME=163, PN_CHARS=164, PN_PREFIX=165, PN_LOCAL=166, PLX=167, PERCENT=168, 
		HEX=169, PN_LOCAL_ESC=170, LineComment=171, BASE=172, USING=173, SEPARATOR=174;
	public static readonly string[] tokenNames = {
		"<INVALID>", "','", "'*'", "'-'", "'<'", "'!='", "'<='", "'?'", "'{'", 
		"'}'", "'^^'", "'^'", "'a'", "'.'", "'+'", "'='", "';'", "'&&'", "'||'", 
		"'>'", "'/'", "'>='", "'|'", "'!'", "ADD", "ALL", "AS", "ASC", "ASK", 
		"BIND", "BY", "CREATE", "CONSTRUCT", "COPY", "CLEAR", "DATA", "DROP", 
		"DESCRIBE", "DELETE", "DESC", "DEFAULT", "SELECT", "DISTINCT", "FROM", 
		"FILTER", "GRAPH", "HAVING", "IN", "INSERT", "INTO", "GROUP", "LOAD", 
		"LIMIT", "MINUS", "MOVE", "NAMED", "NOT", "OFFSET", "ORDER", "OPTIONAL", 
		"PREFIX", "REDUCED", "SILENT", "SERVICE", "TO", "UNDEF", "UNION", "VALUES", 
		"WITH", "WHERE", "STR", "LANG", "LANGMATCHES", "DATATYPE", "BOUND", "IRI", 
		"URI", "BNODE", "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", 
		"UCASE", "LCASE", "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", 
		"STRBEFORE", "STRAFTER", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", "SECONDS", 
		"TIMEZONE", "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", "SHA256", "SHA384", 
		"SHA512", "COALESCE", "IF", "STRLANG", "STRDT", "SAMETERM", "ISIRI", "ISURI", 
		"ISBLANK", "ISLITERAL", "ISNUMERIC", "REGEX", "SUBSTR", "REPLACE", "EXISTS", 
		"COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", "TRUE", 
		"FALSE", "IRIREF", "PNAME_LN", "PNAME_NS", "BLANK_NODE_LABEL", "VAR1", 
		"VAR2", "LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", 
		"DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", 
		"DOUBLE_NEGATIVE", "EXPONENT", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
		"STRING_LITERAL_LONG2", "ECHAR", "NIL", "'('", "')'", "WS", "ANON", "'['", 
		"']'", "PN_CHARS_BASE", "PN_CHARS_U", "VARNAME", "PN_CHARS", "PN_PREFIX", 
		"PN_LOCAL", "PLX", "PERCENT", "HEX", "PN_LOCAL_ESC", "LineComment", "BASE", 
		"USING", "SEPARATOR"
	};
	public const int
		RULE_query = 0, RULE_prologue = 1, RULE_baseDecl = 2, RULE_prefixDecl = 3, 
		RULE_selectQuery = 4, RULE_subSelect = 5, RULE_selectClause = 6, RULE_constructQuery = 7, 
		RULE_describeQuery = 8, RULE_askQuery = 9, RULE_datasetClause = 10, RULE_defaultGraphClause = 11, 
		RULE_namedGraphClause = 12, RULE_sourceSelector = 13, RULE_whereClause = 14, 
		RULE_solutionModifier = 15, RULE_groupClause = 16, RULE_groupCondition = 17, 
		RULE_havingClause = 18, RULE_havingCondition = 19, RULE_orderClause = 20, 
		RULE_orderCondition = 21, RULE_limitOffsetClauses = 22, RULE_limitClause = 23, 
		RULE_offsetClause = 24, RULE_integer = 25, RULE_valuesClause = 26, RULE_update = 27, 
		RULE_update1 = 28, RULE_load = 29, RULE_clear = 30, RULE_drop = 31, RULE_create = 32, 
		RULE_add = 33, RULE_move = 34, RULE_copy = 35, RULE_insertData = 36, RULE_deleteData = 37, 
		RULE_deleteWhere = 38, RULE_modify = 39, RULE_deleteClause = 40, RULE_insertClause = 41, 
		RULE_usingClause = 42, RULE_graphOrDefault = 43, RULE_graphRef = 44, RULE_graphRefAll = 45, 
		RULE_quadPattern = 46, RULE_quadData = 47, RULE_quads = 48, RULE_quadsNotTriples = 49, 
		RULE_triplesTemplate = 50, RULE_groupGraphPattern = 51, RULE_groupGraphPatternSub = 52, 
		RULE_triplesBlock = 53, RULE_graphPatternNotTriples = 54, RULE_optionalGraphPattern = 55, 
		RULE_graphGraphPattern = 56, RULE_serviceGraphPattern = 57, RULE_bind = 58, 
		RULE_inlineData = 59, RULE_dataBlock = 60, RULE_inlineDataOneVar = 61, 
		RULE_inlineDataFull = 62, RULE_dataBlockValue = 63, RULE_minusGraphPattern = 64, 
		RULE_groupOrUnionGraphPattern = 65, RULE_filter = 66, RULE_constraint = 67, 
		RULE_functionCall = 68, RULE_argList = 69, RULE_expressionList = 70, RULE_constructTemplate = 71, 
		RULE_constructTriples = 72, RULE_triplesSameSubject = 73, RULE_propertyListNotEmpty = 74, 
		RULE_verb = 75, RULE_objectList = 76, RULE_object = 77, RULE_graphNode = 78, 
		RULE_collection = 79, RULE_triplesNode = 80, RULE_blankNodePropertyList = 81, 
		RULE_subjectNode = 82, RULE_triplesSameSubjectPath = 83, RULE_propertyListPathNotEmpty = 84, 
		RULE_objectListPath = 85, RULE_objectPath = 86, RULE_path = 87, RULE_pathSequence = 88, 
		RULE_pathEltOrInverse = 89, RULE_pathElt = 90, RULE_pathPrimary = 91, 
		RULE_pathNegatedPropertySet = 92, RULE_pathOneInPropertySet = 93, RULE_triplesNodePath = 94, 
		RULE_blankNodePropertyListPath = 95, RULE_collectionPath = 96, RULE_graphNodePath = 97, 
		RULE_varOrTerm = 98, RULE_varOrIri = 99, RULE_var = 100, RULE_varString = 101, 
		RULE_graphTerm = 102, RULE_expression = 103, RULE_conditionalAndExpression = 104, 
		RULE_relationalExpression = 105, RULE_numericExpression = 106, RULE_multiplicativeExpression = 107, 
		RULE_unaryExpression = 108, RULE_primaryExpression = 109, RULE_brackettedExpression = 110, 
		RULE_builtInCall = 111, RULE_regexExpression = 112, RULE_substringExpression = 113, 
		RULE_strReplaceExpression = 114, RULE_existsFunc = 115, RULE_notExistsFunc = 116, 
		RULE_aggregate = 117, RULE_rDFLiteral = 118, RULE_numericLiteral = 119, 
		RULE_numericLiteralUnsigned = 120, RULE_numericLiteralPositive = 121, 
		RULE_numericLiteralNegative = 122, RULE_booleanLiteral = 123, RULE_boolean = 124, 
		RULE_string = 125, RULE_iri = 126, RULE_iriString = 127, RULE_blankNode = 128;
	public static readonly string[] ruleNames = {
		"query", "prologue", "baseDecl", "prefixDecl", "selectQuery", "subSelect", 
		"selectClause", "constructQuery", "describeQuery", "askQuery", "datasetClause", 
		"defaultGraphClause", "namedGraphClause", "sourceSelector", "whereClause", 
		"solutionModifier", "groupClause", "groupCondition", "havingClause", "havingCondition", 
		"orderClause", "orderCondition", "limitOffsetClauses", "limitClause", 
		"offsetClause", "integer", "valuesClause", "update", "update1", "load", 
		"clear", "drop", "create", "add", "move", "copy", "insertData", "deleteData", 
		"deleteWhere", "modify", "deleteClause", "insertClause", "usingClause", 
		"graphOrDefault", "graphRef", "graphRefAll", "quadPattern", "quadData", 
		"quads", "quadsNotTriples", "triplesTemplate", "groupGraphPattern", "groupGraphPatternSub", 
		"triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
		"serviceGraphPattern", "bind", "inlineData", "dataBlock", "inlineDataOneVar", 
		"inlineDataFull", "dataBlockValue", "minusGraphPattern", "groupOrUnionGraphPattern", 
		"filter", "constraint", "functionCall", "argList", "expressionList", "constructTemplate", 
		"constructTriples", "triplesSameSubject", "propertyListNotEmpty", "verb", 
		"objectList", "object", "graphNode", "collection", "triplesNode", "blankNodePropertyList", 
		"subjectNode", "triplesSameSubjectPath", "propertyListPathNotEmpty", "objectListPath", 
		"objectPath", "path", "pathSequence", "pathEltOrInverse", "pathElt", "pathPrimary", 
		"pathNegatedPropertySet", "pathOneInPropertySet", "triplesNodePath", "blankNodePropertyListPath", 
		"collectionPath", "graphNodePath", "varOrTerm", "varOrIri", "var", "varString", 
		"graphTerm", "expression", "conditionalAndExpression", "relationalExpression", 
		"numericExpression", "multiplicativeExpression", "unaryExpression", "primaryExpression", 
		"brackettedExpression", "builtInCall", "regexExpression", "substringExpression", 
		"strReplaceExpression", "existsFunc", "notExistsFunc", "aggregate", "rDFLiteral", 
		"numericLiteral", "numericLiteralUnsigned", "numericLiteralPositive", 
		"numericLiteralNegative", "booleanLiteral", "boolean", "string", "iri", 
		"iriString", "blankNode"
	};

	public override string GrammarFileName { get { return "sparq11lTranslator.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

			  	


	public RdfQuery11Translator q;
	      

	public sparq11lTranslatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class QueryContext : ParserRuleContext {
		public SparqlQuery value;
		public PrologueContext _prologue;
		public SelectQueryContext _selectQuery;
		public ConstructQueryContext _constructQuery;
		public DescribeQueryContext _describeQuery;
		public AskQueryContext _askQuery;
		public ValuesClauseContext _valuesClause;
		public UpdateContext _update;
		public AskQueryContext askQuery() {
			return GetRuleContext<AskQueryContext>(0);
		}
		public DescribeQueryContext describeQuery() {
			return GetRuleContext<DescribeQueryContext>(0);
		}
		public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		public UpdateContext update() {
			return GetRuleContext<UpdateContext>(0);
		}
		public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		public ConstructQueryContext constructQuery() {
			return GetRuleContext<ConstructQueryContext>(0);
		}
		public SelectQueryContext selectQuery() {
			return GetRuleContext<SelectQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 280;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 258; _localctx._prologue = prologue();
				q.prolog.StringRepresentationOfProlog=(_localctx._prologue!=null?_input.GetText(_localctx._prologue.start,_localctx._prologue.stop):null);
				State = 272;
				switch (_input.La(1)) {
				case SELECT:
					{
					State = 260; _localctx._selectQuery = selectQuery();
					_localctx.value = _localctx._selectQuery.value; _localctx.value.ResultSet.ResultType= ResultType.Select; 
					}
					break;
				case CONSTRUCT:
					{
					State = 263; _localctx._constructQuery = constructQuery();
					 _localctx.value = _localctx._constructQuery.value; _localctx.value.ResultSet.ResultType= ResultType.Construct;
					}
					break;
				case DESCRIBE:
					{
					State = 266; _localctx._describeQuery = describeQuery();
					 _localctx.value = _localctx._describeQuery.value; _localctx.value.ResultSet.ResultType= ResultType.Describe;
					}
					break;
				case ASK:
					{
					State = 269; _localctx._askQuery = askQuery();
					 _localctx.value = _localctx._askQuery.value; _localctx.value.ResultSet.ResultType= ResultType.Ask;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 274; _localctx._valuesClause = valuesClause();
				 _localctx.value.SetValues(_localctx._valuesClause.value);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; _localctx._update = update();
				_localctx.value =  _localctx._update.value;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologueContext : ParserRuleContext {
		public IReadOnlyList<BaseDeclContext> baseDecl() {
			return GetRuleContexts<BaseDeclContext>();
		}
		public PrefixDeclContext prefixDecl(int i) {
			return GetRuleContext<PrefixDeclContext>(i);
		}
		public BaseDeclContext baseDecl(int i) {
			return GetRuleContext<BaseDeclContext>(i);
		}
		public IReadOnlyList<PrefixDeclContext> prefixDecl() {
			return GetRuleContexts<PrefixDeclContext>();
		}
		public PrologueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPrologue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPrologue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrologue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrologueContext prologue() {
		PrologueContext _localctx = new PrologueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_prologue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PREFIX || _la==BASE) {
				{
				State = 284;
				switch (_input.La(1)) {
				case BASE:
					{
					State = 282; baseDecl();
					}
					break;
				case PREFIX:
					{
					State = 283; prefixDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 288;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseDeclContext : ParserRuleContext {
		public IToken _IRIREF;
		public ITerminalNode BASE() { return GetToken(sparq11lTranslatorParser.BASE, 0); }
		public ITerminalNode IRIREF() { return GetToken(sparq11lTranslatorParser.IRIREF, 0); }
		public BaseDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBaseDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBaseDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseDeclContext baseDecl() {
		BaseDeclContext _localctx = new BaseDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_baseDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(BASE);
			State = 290; _localctx._IRIREF = Match(IRIREF);
			q.prolog.SetBase((_localctx._IRIREF!=null?_localctx._IRIREF.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixDeclContext : ParserRuleContext {
		public IToken _PNAME_NS;
		public IToken _IRIREF;
		public ITerminalNode PREFIX() { return GetToken(sparq11lTranslatorParser.PREFIX, 0); }
		public ITerminalNode PNAME_NS() { return GetToken(sparq11lTranslatorParser.PNAME_NS, 0); }
		public ITerminalNode IRIREF() { return GetToken(sparq11lTranslatorParser.IRIREF, 0); }
		public PrefixDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPrefixDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPrefixDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixDeclContext prefixDecl() {
		PrefixDeclContext _localctx = new PrefixDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_prefixDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(PREFIX);
			State = 294; _localctx._PNAME_NS = Match(PNAME_NS);
			State = 295; _localctx._IRIREF = Match(IRIREF);

				q.prolog.AddPrefix((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null), (_localctx._IRIREF!=null?_localctx._IRIREF.Text:null));
			 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		public SparqlQuery value;
		public SelectClauseContext _selectClause;
		public WhereClauseContext _whereClause;
		public SolutionModifierContext _solutionModifier;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSelectQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSelectQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_selectQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlQuery(q);
			State = 299; _localctx._selectClause = selectClause();
			State = 303;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FROM) {
				{
				{
				State = 300; datasetClause();
				}
				}
				State = 305;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 306; _localctx._whereClause = whereClause();
			State = 307; _localctx._solutionModifier = solutionModifier();
			_localctx._solutionModifier.value.Add(_localctx._selectClause.value);
			_localctx.value.Create(_localctx._whereClause.value, _localctx._solutionModifier.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectContext : ParserRuleContext {
		public SparqlSubSelect value;
		public SelectClauseContext _selectClause;
		public WhereClauseContext _whereClause;
		public SolutionModifierContext _solutionModifier;
		public ValuesClauseContext _valuesClause;
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		public SubSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelect; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSubSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSubSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectContext subSelect() {
		SubSelectContext _localctx = new SubSelectContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_subSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; _localctx._selectClause = selectClause();
			State = 312; _localctx._whereClause = whereClause();
			State = 313; _localctx._solutionModifier = solutionModifier();
			_localctx._solutionModifier.value.Add(_localctx._selectClause.value);
			State = 315; _localctx._valuesClause = valuesClause();
			_localctx.value = new SparqlSubSelect(_localctx._whereClause.value, _localctx._solutionModifier.value, _localctx._valuesClause.value, q);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		public SparqlSelect value;
		public VarContext _var;
		public ExpressionContext _expression;
		public ITerminalNode AS(int i) {
			return GetToken(sparq11lTranslatorParser.AS, i);
		}
		public IReadOnlyList<ITerminalNode> AS() { return GetTokens(sparq11lTranslatorParser.AS); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public ITerminalNode DISTINCT() { return GetToken(sparq11lTranslatorParser.DISTINCT, 0); }
		public ITerminalNode REDUCED() { return GetToken(sparq11lTranslatorParser.REDUCED, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public IReadOnlyList<VarContext> var() {
			return GetRuleContexts<VarContext>();
		}
		public ITerminalNode SELECT() { return GetToken(sparq11lTranslatorParser.SELECT, 0); }
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_selectClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(SELECT);
			_localctx.value = new SparqlSelect(q);
			State = 324;
			switch (_input.La(1)) {
			case DISTINCT:
				{
				State = 320; Match(DISTINCT);
				_localctx.value.IsDistinct=true;
				}
				break;
			case REDUCED:
				{
				State = 322; Match(REDUCED);
				_localctx.value.IsReduced=true;
				}
				break;
			case T__21:
			case VAR1:
			case VAR2:
			case BracketOpen:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 342;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
			case BracketOpen:
				{
				State = 336;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 336;
					switch (_input.La(1)) {
					case VAR1:
					case VAR2:
						{
						State = 326; _localctx._var = var();
						_localctx.value.Add(_localctx._var.value);
						}
						break;
					case BracketOpen:
						{
						{
						State = 329; Match(BracketOpen);
						State = 330; _localctx._expression = expression();
						State = 331; Match(AS);
						State = 332; _localctx._var = var();
						_localctx.value.Add(q.CreateExpressionAsVariable(_localctx._var.value, _localctx._expression.value));
						State = 334; Match(BracketClose);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 338;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (VAR1 - 136)) | (1L << (VAR2 - 136)) | (1L << (BracketOpen - 136)))) != 0) );
				}
				break;
			case T__21:
				{
				State = 340; Match(T__21);
				_localctx.value.IsAll();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructQueryContext : ParserRuleContext {
		public SparqlConstructQuery value;
		public ConstructTemplateContext _constructTemplate;
		public WhereClauseContext _whereClause;
		public SolutionModifierContext _solutionModifier;
		public TriplesTemplateContext _triplesTemplate;
		public ITerminalNode WHERE() { return GetToken(sparq11lTranslatorParser.WHERE, 0); }
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public ConstructTemplateContext constructTemplate() {
			return GetRuleContext<ConstructTemplateContext>(0);
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public ITerminalNode CONSTRUCT() { return GetToken(sparq11lTranslatorParser.CONSTRUCT, 0); }
		public TriplesTemplateContext triplesTemplate() {
			return GetRuleContext<TriplesTemplateContext>(0);
		}
		public ConstructQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterConstructQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitConstructQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructQueryContext constructQuery() {
		ConstructQueryContext _localctx = new ConstructQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_constructQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(CONSTRUCT);
			_localctx.value = new SparqlConstructQuery(q);
			State = 374;
			switch (_input.La(1)) {
			case T__15:
				{
				State = 346; _localctx._constructTemplate = constructTemplate();
				State = 350;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==FROM) {
					{
					{
					State = 347; datasetClause();
					}
					}
					State = 352;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 353; _localctx._whereClause = whereClause();
				State = 354; _localctx._solutionModifier = solutionModifier();
				 _localctx.value.Create(_localctx._constructTemplate.value, _localctx._whereClause.value, _localctx._solutionModifier.value); 
				}
				break;
			case FROM:
			case WHERE:
				{
				State = 360;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==FROM) {
					{
					{
					State = 357; datasetClause();
					}
					}
					State = 362;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 363; Match(WHERE);
				State = 364; Match(T__15);
				State = 368;
				_la = _input.La(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
					{
					State = 365; _localctx._triplesTemplate = triplesTemplate();
					 _localctx.value.Create(_localctx._triplesTemplate.value); 
					}
				}

				State = 370; Match(T__14);
				State = 371; _localctx._solutionModifier = solutionModifier();
				 _localctx.value.Create(_localctx._solutionModifier.value); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeQueryContext : ParserRuleContext {
		public SparqlDescribeQuery value;
		public VarOrIriContext _varOrIri;
		public WhereClauseContext _whereClause;
		public SolutionModifierContext _solutionModifier;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public VarOrIriContext varOrIri(int i) {
			return GetRuleContext<VarOrIriContext>(i);
		}
		public IReadOnlyList<VarOrIriContext> varOrIri() {
			return GetRuleContexts<VarOrIriContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public ITerminalNode DESCRIBE() { return GetToken(sparq11lTranslatorParser.DESCRIBE, 0); }
		public DescribeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDescribeQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDescribeQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeQueryContext describeQuery() {
		DescribeQueryContext _localctx = new DescribeQueryContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_describeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(DESCRIBE);
			_localctx.value = new SparqlDescribeQuery(q);
			State = 387;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case VAR1:
			case VAR2:
				{
				State = 381;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 378; _localctx._varOrIri = varOrIri();
					_localctx.value.Add(_localctx._varOrIri.value);
					}
					}
					State = 383;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IRIREF - 132)) | (1L << (PNAME_LN - 132)) | (1L << (PNAME_NS - 132)) | (1L << (VAR1 - 132)) | (1L << (VAR2 - 132)))) != 0) );
				}
				break;
			case T__21:
				{
				State = 385; Match(T__21);
				_localctx.value.IsAll();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FROM) {
				{
				{
				State = 389; datasetClause();
				}
				}
				State = 394;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 398;
			_la = _input.La(1);
			if (_la==T__15 || _la==WHERE) {
				{
				State = 395; _localctx._whereClause = whereClause();
				_localctx.value.Create(_localctx._whereClause.value);
				}
			}

			State = 400; _localctx._solutionModifier = solutionModifier();
			_localctx.value.Create(_localctx._solutionModifier.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskQueryContext : ParserRuleContext {
		public SparqlQuery value;
		public WhereClauseContext _whereClause;
		public SolutionModifierContext _solutionModifier;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public ITerminalNode ASK() { return GetToken(sparq11lTranslatorParser.ASK, 0); }
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public AskQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_askQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterAskQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitAskQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAskQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AskQueryContext askQuery() {
		AskQueryContext _localctx = new AskQueryContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_askQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(ASK);
			_localctx.value = new SparqlQuery(q);
			State = 408;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FROM) {
				{
				{
				State = 405; datasetClause();
				}
				}
				State = 410;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 411; _localctx._whereClause = whereClause();
			State = 412; _localctx._solutionModifier = solutionModifier();
			_localctx.value.Create(_localctx._whereClause.value, _localctx._solutionModifier.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetClauseContext : ParserRuleContext {
		public NamedGraphClauseContext namedGraphClause() {
			return GetRuleContext<NamedGraphClauseContext>(0);
		}
		public DefaultGraphClauseContext defaultGraphClause() {
			return GetRuleContext<DefaultGraphClauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(sparq11lTranslatorParser.FROM, 0); }
		public DatasetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDatasetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDatasetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetClauseContext datasetClause() {
		DatasetClauseContext _localctx = new DatasetClauseContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_datasetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(FROM);
			State = 418;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				{
				State = 416; defaultGraphClause();
				}
				break;
			case NAMED:
				{
				State = 417; namedGraphClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext _sourceSelector;
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public DefaultGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultGraphClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDefaultGraphClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDefaultGraphClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultGraphClauseContext defaultGraphClause() {
		DefaultGraphClauseContext _localctx = new DefaultGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_defaultGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; _localctx._sourceSelector = sourceSelector();
			q.ActiveGraphs.Add(_localctx._sourceSelector.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext _sourceSelector;
		public ITerminalNode NAMED() { return GetToken(sparq11lTranslatorParser.NAMED, 0); }
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public NamedGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedGraphClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNamedGraphClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNamedGraphClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedGraphClauseContext namedGraphClause() {
		NamedGraphClauseContext _localctx = new NamedGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_namedGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(NAMED);
			State = 424; _localctx._sourceSelector = sourceSelector();
			q.NamedGraphs.Add(_localctx._sourceSelector.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceSelectorContext : ParserRuleContext {
		public ObjectVariants value;
		public IriContext _iri;
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public SourceSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceSelector; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSourceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSourceSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceSelectorContext sourceSelector() {
		SourceSelectorContext _localctx = new SourceSelectorContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_sourceSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; _localctx._iri = iri();
			_localctx.value = _localctx._iri.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode WHERE() { return GetToken(sparq11lTranslatorParser.WHERE, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 430; Match(WHERE);
				}
			}

			State = 433; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value = _localctx._groupGraphPattern.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SolutionModifierContext : ParserRuleContext {
		public SparqlSolutionModifier value;
		public GroupClauseContext _groupClause;
		public HavingClauseContext _havingClause;
		public OrderClauseContext _orderClause;
		public LimitOffsetClausesContext _limitOffsetClauses;
		public LimitOffsetClausesContext limitOffsetClauses() {
			return GetRuleContext<LimitOffsetClausesContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public GroupClauseContext groupClause() {
			return GetRuleContext<GroupClauseContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public SolutionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solutionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSolutionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSolutionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolutionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SolutionModifierContext solutionModifier() {
		SolutionModifierContext _localctx = new SolutionModifierContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_solutionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlSolutionModifier();
			State = 440;
			_la = _input.La(1);
			if (_la==GROUP) {
				{
				State = 437; _localctx._groupClause = groupClause();
				_localctx.value.Add(_localctx._groupClause.value);
				}
			}

			State = 445;
			_la = _input.La(1);
			if (_la==HAVING) {
				{
				State = 442; _localctx._havingClause = havingClause();
				_localctx.value.Add(_localctx._havingClause.value, q);
				}
			}

			State = 450;
			_la = _input.La(1);
			if (_la==ORDER) {
				{
				State = 447; _localctx._orderClause = orderClause();
				_localctx.value.Add(_localctx._orderClause.value);
				}
			}

			State = 455;
			_la = _input.La(1);
			if (_la==LIMIT || _la==OFFSET) {
				{
				State = 452; _localctx._limitOffsetClauses = limitOffsetClauses();
				_localctx.value.Add(_localctx._limitOffsetClauses.value);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupClauseContext : ParserRuleContext {
		public SparqlSolutionModifierGroup value;
		public GroupConditionContext _groupCondition;
		public ITerminalNode BY() { return GetToken(sparq11lTranslatorParser.BY, 0); }
		public GroupConditionContext groupCondition(int i) {
			return GetRuleContext<GroupConditionContext>(i);
		}
		public IReadOnlyList<GroupConditionContext> groupCondition() {
			return GetRuleContexts<GroupConditionContext>();
		}
		public ITerminalNode GROUP() { return GetToken(sparq11lTranslatorParser.GROUP, 0); }
		public GroupClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupClauseContext groupClause() {
		GroupClauseContext _localctx = new GroupClauseContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_groupClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(GROUP);
			State = 458; Match(BY);
			_localctx.value = new SparqlSolutionModifierGroup(q);
			State = 463;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 460; _localctx._groupCondition = groupCondition();
				 _localctx.value.Add(_localctx._groupCondition.value);
				}
				}
				State = 465;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (NOT - 56)) | (1L << (STR - 56)) | (1L << (LANG - 56)) | (1L << (LANGMATCHES - 56)) | (1L << (DATATYPE - 56)) | (1L << (BOUND - 56)) | (1L << (IRI - 56)) | (1L << (URI - 56)) | (1L << (BNODE - 56)) | (1L << (RAND - 56)) | (1L << (ABS - 56)) | (1L << (CEIL - 56)) | (1L << (FLOOR - 56)) | (1L << (ROUND - 56)) | (1L << (CONCAT - 56)) | (1L << (STRLEN - 56)) | (1L << (UCASE - 56)) | (1L << (LCASE - 56)) | (1L << (ENCODE_FOR_URI - 56)) | (1L << (CONTAINS - 56)) | (1L << (STRSTARTS - 56)) | (1L << (STRENDS - 56)) | (1L << (STRBEFORE - 56)) | (1L << (STRAFTER - 56)) | (1L << (YEAR - 56)) | (1L << (MONTH - 56)) | (1L << (DAY - 56)) | (1L << (HOURS - 56)) | (1L << (MINUTES - 56)) | (1L << (SECONDS - 56)) | (1L << (TIMEZONE - 56)) | (1L << (TZ - 56)) | (1L << (NOW - 56)) | (1L << (UUID - 56)) | (1L << (STRUUID - 56)) | (1L << (MD5 - 56)) | (1L << (SHA1 - 56)) | (1L << (SHA256 - 56)) | (1L << (SHA384 - 56)) | (1L << (SHA512 - 56)) | (1L << (COALESCE - 56)) | (1L << (IF - 56)) | (1L << (STRLANG - 56)) | (1L << (STRDT - 56)) | (1L << (SAMETERM - 56)) | (1L << (ISIRI - 56)) | (1L << (ISURI - 56)) | (1L << (ISBLANK - 56)) | (1L << (ISLITERAL - 56)) | (1L << (ISNUMERIC - 56)) | (1L << (REGEX - 56)))) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (SUBSTR - 120)) | (1L << (REPLACE - 120)) | (1L << (EXISTS - 120)) | (1L << (COUNT - 120)) | (1L << (SUM - 120)) | (1L << (MIN - 120)) | (1L << (MAX - 120)) | (1L << (AVG - 120)) | (1L << (SAMPLE - 120)) | (1L << (GROUP_CONCAT - 120)) | (1L << (IRIREF - 120)) | (1L << (PNAME_LN - 120)) | (1L << (PNAME_NS - 120)) | (1L << (VAR1 - 120)) | (1L << (VAR2 - 120)) | (1L << (BracketOpen - 120)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupConditionContext : ParserRuleContext {
		public SparqlGroupConstraint value;
		public BuiltInCallContext _builtInCall;
		public FunctionCallContext _functionCall;
		public ExpressionContext _expression;
		public VarContext _var;
		public ITerminalNode AS() { return GetToken(sparq11lTranslatorParser.AS, 0); }
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public GroupConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGroupCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGroupCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupConditionContext groupCondition() {
		GroupConditionContext _localctx = new GroupConditionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_groupCondition);
		int _la;
		try {
			State = 487;
			switch (_input.La(1)) {
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SAMETERM:
			case ISIRI:
			case ISURI:
			case ISBLANK:
			case ISLITERAL:
			case ISNUMERIC:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467; _localctx._builtInCall = builtInCall();
				_localctx.value = new SparqlGroupConstraint(_localctx._builtInCall.value);
				}
				break;
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; _localctx._functionCall = functionCall();
				_localctx.value = new SparqlGroupConstraint(_localctx._functionCall.value);
				}
				break;
			case BracketOpen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 473; Match(BracketOpen);
				State = 474; _localctx._expression = expression();
				_localctx.value = new SparqlGroupConstraint(_localctx._expression.value);
				State = 480;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 476; Match(AS);
					State = 477; _localctx._var = var();
					_localctx.value = new SparqlGroupConstraint(q.CreateExpressionAsVariable(_localctx._var.value, _localctx._expression.value));
					}
				}

				State = 482; Match(BracketClose);
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 484; _localctx._var = var();
				_localctx.value = new SparqlGroupConstraint(_localctx._var.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public SparqlSolutionModifierHaving value;
		public HavingConditionContext _havingCondition;
		public HavingConditionContext havingCondition(int i) {
			return GetRuleContext<HavingConditionContext>(i);
		}
		public ITerminalNode HAVING() { return GetToken(sparq11lTranslatorParser.HAVING, 0); }
		public IReadOnlyList<HavingConditionContext> havingCondition() {
			return GetRuleContexts<HavingConditionContext>();
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_havingClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(HAVING);
			_localctx.value = new SparqlSolutionModifierHaving();
			State = 494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 491; _localctx._havingCondition = havingCondition();
				_localctx.value.Add(_localctx._havingCondition.value);
				}
				}
				State = 496;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (NOT - 56)) | (1L << (STR - 56)) | (1L << (LANG - 56)) | (1L << (LANGMATCHES - 56)) | (1L << (DATATYPE - 56)) | (1L << (BOUND - 56)) | (1L << (IRI - 56)) | (1L << (URI - 56)) | (1L << (BNODE - 56)) | (1L << (RAND - 56)) | (1L << (ABS - 56)) | (1L << (CEIL - 56)) | (1L << (FLOOR - 56)) | (1L << (ROUND - 56)) | (1L << (CONCAT - 56)) | (1L << (STRLEN - 56)) | (1L << (UCASE - 56)) | (1L << (LCASE - 56)) | (1L << (ENCODE_FOR_URI - 56)) | (1L << (CONTAINS - 56)) | (1L << (STRSTARTS - 56)) | (1L << (STRENDS - 56)) | (1L << (STRBEFORE - 56)) | (1L << (STRAFTER - 56)) | (1L << (YEAR - 56)) | (1L << (MONTH - 56)) | (1L << (DAY - 56)) | (1L << (HOURS - 56)) | (1L << (MINUTES - 56)) | (1L << (SECONDS - 56)) | (1L << (TIMEZONE - 56)) | (1L << (TZ - 56)) | (1L << (NOW - 56)) | (1L << (UUID - 56)) | (1L << (STRUUID - 56)) | (1L << (MD5 - 56)) | (1L << (SHA1 - 56)) | (1L << (SHA256 - 56)) | (1L << (SHA384 - 56)) | (1L << (SHA512 - 56)) | (1L << (COALESCE - 56)) | (1L << (IF - 56)) | (1L << (STRLANG - 56)) | (1L << (STRDT - 56)) | (1L << (SAMETERM - 56)) | (1L << (ISIRI - 56)) | (1L << (ISURI - 56)) | (1L << (ISBLANK - 56)) | (1L << (ISLITERAL - 56)) | (1L << (ISNUMERIC - 56)) | (1L << (REGEX - 56)))) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (SUBSTR - 120)) | (1L << (REPLACE - 120)) | (1L << (EXISTS - 120)) | (1L << (COUNT - 120)) | (1L << (SUM - 120)) | (1L << (MIN - 120)) | (1L << (MAX - 120)) | (1L << (AVG - 120)) | (1L << (SAMPLE - 120)) | (1L << (GROUP_CONCAT - 120)) | (1L << (IRIREF - 120)) | (1L << (PNAME_LN - 120)) | (1L << (PNAME_NS - 120)) | (1L << (BracketOpen - 120)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingConditionContext : ParserRuleContext {
		public SparqlExpression value;
		public ConstraintContext _constraint;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public HavingConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterHavingCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitHavingCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingConditionContext havingCondition() {
		HavingConditionContext _localctx = new HavingConditionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_havingCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; _localctx._constraint = constraint();
			 _localctx.value = _localctx._constraint.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		public SparqlSolutionModifierOrder value;
		public OrderConditionContext _orderCondition;
		public ITerminalNode ORDER() { return GetToken(sparq11lTranslatorParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(sparq11lTranslatorParser.BY, 0); }
		public OrderConditionContext orderCondition(int i) {
			return GetRuleContext<OrderConditionContext>(i);
		}
		public IReadOnlyList<OrderConditionContext> orderCondition() {
			return GetRuleContexts<OrderConditionContext>();
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_orderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(ORDER);
			State = 502; Match(BY);
			_localctx.value = new SparqlSolutionModifierOrder();
			State = 507;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 504; _localctx._orderCondition = orderCondition();
				_localctx.value.Add(_localctx._orderCondition.value); 
				}
				}
				State = 509;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASC) | (1L << DESC) | (1L << NOT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (STR - 70)) | (1L << (LANG - 70)) | (1L << (LANGMATCHES - 70)) | (1L << (DATATYPE - 70)) | (1L << (BOUND - 70)) | (1L << (IRI - 70)) | (1L << (URI - 70)) | (1L << (BNODE - 70)) | (1L << (RAND - 70)) | (1L << (ABS - 70)) | (1L << (CEIL - 70)) | (1L << (FLOOR - 70)) | (1L << (ROUND - 70)) | (1L << (CONCAT - 70)) | (1L << (STRLEN - 70)) | (1L << (UCASE - 70)) | (1L << (LCASE - 70)) | (1L << (ENCODE_FOR_URI - 70)) | (1L << (CONTAINS - 70)) | (1L << (STRSTARTS - 70)) | (1L << (STRENDS - 70)) | (1L << (STRBEFORE - 70)) | (1L << (STRAFTER - 70)) | (1L << (YEAR - 70)) | (1L << (MONTH - 70)) | (1L << (DAY - 70)) | (1L << (HOURS - 70)) | (1L << (MINUTES - 70)) | (1L << (SECONDS - 70)) | (1L << (TIMEZONE - 70)) | (1L << (TZ - 70)) | (1L << (NOW - 70)) | (1L << (UUID - 70)) | (1L << (STRUUID - 70)) | (1L << (MD5 - 70)) | (1L << (SHA1 - 70)) | (1L << (SHA256 - 70)) | (1L << (SHA384 - 70)) | (1L << (SHA512 - 70)) | (1L << (COALESCE - 70)) | (1L << (IF - 70)) | (1L << (STRLANG - 70)) | (1L << (STRDT - 70)) | (1L << (SAMETERM - 70)) | (1L << (ISIRI - 70)) | (1L << (ISURI - 70)) | (1L << (ISBLANK - 70)) | (1L << (ISLITERAL - 70)) | (1L << (ISNUMERIC - 70)) | (1L << (REGEX - 70)) | (1L << (SUBSTR - 70)) | (1L << (REPLACE - 70)) | (1L << (EXISTS - 70)) | (1L << (COUNT - 70)) | (1L << (SUM - 70)) | (1L << (MIN - 70)) | (1L << (MAX - 70)) | (1L << (AVG - 70)) | (1L << (SAMPLE - 70)) | (1L << (GROUP_CONCAT - 70)) | (1L << (IRIREF - 70)) | (1L << (PNAME_LN - 70)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PNAME_NS - 134)) | (1L << (VAR1 - 134)) | (1L << (VAR2 - 134)) | (1L << (BracketOpen - 134)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderConditionContext : ParserRuleContext {
		public SparqlOrderCondition value;
		public IToken dir;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public FunctionCallContext _functionCall;
		public VarContext _var;
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public ITerminalNode DESC() { return GetToken(sparq11lTranslatorParser.DESC, 0); }
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(sparq11lTranslatorParser.ASC, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OrderConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterOrderCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitOrderCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderConditionContext orderCondition() {
		OrderConditionContext _localctx = new OrderConditionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_orderCondition);
		try {
			State = 532;
			switch (_input.La(1)) {
			case ASC:
			case DESC:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 513;
				switch (_input.La(1)) {
				case ASC:
					{
					State = 511; _localctx.dir = Match(ASC);
					}
					break;
				case DESC:
					{
					State = 512; _localctx.dir = Match(DESC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 515; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value =  new SparqlOrderCondition(_localctx._brackettedExpression.value, (_localctx.dir!=null?_localctx.dir.Text:null), q);
				}
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SAMETERM:
			case ISIRI:
			case ISURI:
			case ISBLANK:
			case ISLITERAL:
			case ISNUMERIC:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case VAR1:
			case VAR2:
			case BracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				switch (_input.La(1)) {
				case BracketOpen:
					{
					State = 518; _localctx._brackettedExpression = brackettedExpression();
					_localctx.value = new SparqlOrderCondition(_localctx._brackettedExpression.value, q);
					}
					break;
				case NOT:
				case STR:
				case LANG:
				case LANGMATCHES:
				case DATATYPE:
				case BOUND:
				case IRI:
				case URI:
				case BNODE:
				case RAND:
				case ABS:
				case CEIL:
				case FLOOR:
				case ROUND:
				case CONCAT:
				case STRLEN:
				case UCASE:
				case LCASE:
				case ENCODE_FOR_URI:
				case CONTAINS:
				case STRSTARTS:
				case STRENDS:
				case STRBEFORE:
				case STRAFTER:
				case YEAR:
				case MONTH:
				case DAY:
				case HOURS:
				case MINUTES:
				case SECONDS:
				case TIMEZONE:
				case TZ:
				case NOW:
				case UUID:
				case STRUUID:
				case MD5:
				case SHA1:
				case SHA256:
				case SHA384:
				case SHA512:
				case COALESCE:
				case IF:
				case STRLANG:
				case STRDT:
				case SAMETERM:
				case ISIRI:
				case ISURI:
				case ISBLANK:
				case ISLITERAL:
				case ISNUMERIC:
				case REGEX:
				case SUBSTR:
				case REPLACE:
				case EXISTS:
				case COUNT:
				case SUM:
				case MIN:
				case MAX:
				case AVG:
				case SAMPLE:
				case GROUP_CONCAT:
					{
					State = 521; _localctx._builtInCall = builtInCall();
					_localctx.value = new SparqlOrderCondition(_localctx._builtInCall.value,q);
					}
					break;
				case IRIREF:
				case PNAME_LN:
				case PNAME_NS:
					{
					State = 524; _localctx._functionCall = functionCall();
					_localctx.value = new SparqlOrderCondition(_localctx._functionCall.value,q);
					}
					break;
				case VAR1:
				case VAR2:
					{
					State = 527; _localctx._var = var();
					_localctx.value = new SparqlOrderCondition(_localctx._var.value,q);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOffsetClausesContext : ParserRuleContext {
		public SparqlSolutionModifierLimit value;
		public LimitClauseContext _limitClause;
		public OffsetClauseContext _offsetClause;
		public OffsetClauseContext offsetClause() {
			return GetRuleContext<OffsetClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public LimitOffsetClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOffsetClauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterLimitOffsetClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitLimitOffsetClauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOffsetClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOffsetClausesContext limitOffsetClauses() {
		LimitOffsetClausesContext _localctx = new LimitOffsetClausesContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_limitOffsetClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlSolutionModifierLimit();
			State = 549;
			switch (_input.La(1)) {
			case LIMIT:
				{
				State = 535; _localctx._limitClause = limitClause();
				_localctx.value.CreateLimit(_localctx._limitClause.value); 
				State = 540;
				_la = _input.La(1);
				if (_la==OFFSET) {
					{
					State = 537; _localctx._offsetClause = offsetClause();
					_localctx.value.CreateOffset(_localctx._offsetClause.value); 
					}
				}

				}
				break;
			case OFFSET:
				{
				State = 542; _localctx._offsetClause = offsetClause();
				_localctx.value.CreateOffset(_localctx._offsetClause.value); 
				State = 547;
				_la = _input.La(1);
				if (_la==LIMIT) {
					{
					State = 544; _localctx._limitClause = limitClause();
					_localctx.value.CreateLimit(_localctx._limitClause.value); 
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public int value;
		public IntegerContext _integer;
		public ITerminalNode LIMIT() { return GetToken(sparq11lTranslatorParser.LIMIT, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(LIMIT);
			State = 552; _localctx._integer = integer();
			_localctx.value = _localctx._integer.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetClauseContext : ParserRuleContext {
		public int value;
		public IntegerContext _integer;
		public ITerminalNode OFFSET() { return GetToken(sparq11lTranslatorParser.OFFSET, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offsetClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterOffsetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitOffsetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetClauseContext offsetClause() {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_offsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; Match(OFFSET);
			State = 556; _localctx._integer = integer();
			_localctx.value = _localctx._integer.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public int value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparq11lTranslatorParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; _localctx._INTEGER = Match(INTEGER);
			_localctx.value = int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesClauseContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public DataBlockContext _dataBlock;
		public DataBlockContext dataBlock() {
			return GetRuleContext<DataBlockContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(sparq11lTranslatorParser.VALUES, 0); }
		public ValuesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterValuesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitValuesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesClauseContext valuesClause() {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_valuesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			_la = _input.La(1);
			if (_la==VALUES) {
				{
				State = 562; Match(VALUES);
				State = 563; _localctx._dataBlock = dataBlock();
				 _localctx.value = _localctx._dataBlock.value; 
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateContext : ParserRuleContext {
		public SparqlUpdateQuery value;
		public PrologueContext _prologue;
		public Update1Context _update1;
		public UpdateContext r;
		public Update1Context update1() {
			return GetRuleContext<Update1Context>(0);
		}
		public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		public UpdateContext update() {
			return GetRuleContext<UpdateContext>(0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateContext update() {
		UpdateContext _localctx = new UpdateContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_update);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; _localctx._prologue = prologue();
			q.prolog.StringRepresentationOfProlog=(_localctx._prologue!=null?_input.GetText(_localctx._prologue.start,_localctx._prologue.stop):null);
			_localctx.value = new SparqlUpdateQuery(q);
			State = 579;
			_la = _input.La(1);
			if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (ADD - 24)) | (1L << (CREATE - 24)) | (1L << (COPY - 24)) | (1L << (CLEAR - 24)) | (1L << (DROP - 24)) | (1L << (DELETE - 24)) | (1L << (INSERT - 24)) | (1L << (LOAD - 24)) | (1L << (MOVE - 24)) | (1L << (WITH - 24)))) != 0)) {
				{
				State = 571; _localctx._update1 = update1();
				_localctx.value.Create(_localctx._update1.value);
				State = 577;
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 573; Match(T__7);
					State = 574; _localctx.r = update();
					_localctx.value.Add(_localctx.r.value);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update1Context : ParserRuleContext {
		public ISparqlUpdate value;
		public LoadContext _load;
		public ClearContext _clear;
		public DropContext _drop;
		public AddContext _add;
		public MoveContext _move;
		public CopyContext _copy;
		public CreateContext _create;
		public InsertDataContext _insertData;
		public DeleteDataContext _deleteData;
		public DeleteWhereContext _deleteWhere;
		public ModifyContext _modify;
		public ModifyContext modify() {
			return GetRuleContext<ModifyContext>(0);
		}
		public DeleteDataContext deleteData() {
			return GetRuleContext<DeleteDataContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DropContext drop() {
			return GetRuleContext<DropContext>(0);
		}
		public ClearContext clear() {
			return GetRuleContext<ClearContext>(0);
		}
		public InsertDataContext insertData() {
			return GetRuleContext<InsertDataContext>(0);
		}
		public DeleteWhereContext deleteWhere() {
			return GetRuleContext<DeleteWhereContext>(0);
		}
		public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		public LoadContext load() {
			return GetRuleContext<LoadContext>(0);
		}
		public CopyContext copy() {
			return GetRuleContext<CopyContext>(0);
		}
		public Update1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update1; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterUpdate1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitUpdate1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update1Context update1() {
		Update1Context _localctx = new Update1Context(_ctx, State);
		EnterRule(_localctx, 56, RULE_update1);
		try {
			State = 614;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581; _localctx._load = load();
				_localctx.value = _localctx._load.value;
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584; _localctx._clear = clear();
				_localctx.value = _localctx._clear.value;
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587; _localctx._drop = drop();
				_localctx.value = _localctx._drop.value;
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 590; _localctx._add = add();
				_localctx.value = _localctx._add.value;
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 593; _localctx._move = move();
				_localctx.value = _localctx._move.value;
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 596; _localctx._copy = copy();
				_localctx.value = _localctx._copy.value;
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 599; _localctx._create = create();
				_localctx.value = _localctx._create.value;
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 602; _localctx._insertData = insertData();
				_localctx.value = _localctx._insertData.value;
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 605; _localctx._deleteData = deleteData();
				_localctx.value = _localctx._deleteData.value;
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 608; _localctx._deleteWhere = deleteWhere();
				_localctx.value = _localctx._deleteWhere.value;
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 611; _localctx._modify = modify();
				_localctx.value = _localctx._modify.value;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		public SparqlUpdateLoad value;
		public IriContext _iri;
		public GraphRefContext _graphRef;
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(sparq11lTranslatorParser.INTO, 0); }
		public GraphRefContext graphRef() {
			return GetRuleContext<GraphRefContext>(0);
		}
		public ITerminalNode LOAD() { return GetToken(sparq11lTranslatorParser.LOAD, 0); }
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterLoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitLoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_load);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(LOAD);
			_localctx.value = new SparqlUpdateLoad();
			State = 620;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 618; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 622; _localctx._iri = iri();
			_localctx.value.SetIri(_localctx._iri.value);
			State = 628;
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 624; Match(INTO);
				State = 625; _localctx._graphRef = graphRef();
				_localctx.value.Into(_localctx._graphRef.value);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClearContext : ParserRuleContext {
		public SparqlUpdateClear value;
		public GraphRefAllContext _graphRefAll;
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public GraphRefAllContext graphRefAll() {
			return GetRuleContext<GraphRefAllContext>(0);
		}
		public ITerminalNode CLEAR() { return GetToken(sparq11lTranslatorParser.CLEAR, 0); }
		public ClearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clear; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterClear(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitClear(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClear(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClearContext clear() {
		ClearContext _localctx = new ClearContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_clear);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; Match(CLEAR);
			_localctx.value = new SparqlUpdateClear();
			State = 634;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 632; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 636; _localctx._graphRefAll = graphRefAll();
			_localctx.value.Graph =_localctx._graphRefAll.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropContext : ParserRuleContext {
		public SparqlUpdateDrop value;
		public GraphRefAllContext _graphRefAll;
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public GraphRefAllContext graphRefAll() {
			return GetRuleContext<GraphRefAllContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(sparq11lTranslatorParser.DROP, 0); }
		public DropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDrop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDrop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropContext drop() {
		DropContext _localctx = new DropContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_drop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; Match(DROP);
			_localctx.value = new SparqlUpdateDrop();
			State = 643;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 641; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 645; _localctx._graphRefAll = graphRefAll();
			_localctx.value.Graph =_localctx._graphRefAll.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		public SparqlUpdateCreate value;
		public GraphRefContext _graphRef;
		public ITerminalNode CREATE() { return GetToken(sparq11lTranslatorParser.CREATE, 0); }
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public GraphRefContext graphRef() {
			return GetRuleContext<GraphRefContext>(0);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterCreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitCreate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_create);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; Match(CREATE);
			_localctx.value = new SparqlUpdateCreate();
			State = 652;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 650; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 654; _localctx._graphRef = graphRef();
			_localctx.value.Graph=_localctx._graphRef.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public SparqlUpdateAdd value;
		public GraphOrDefaultContext g1;
		public GraphOrDefaultContext g2;
		public GraphOrDefaultContext graphOrDefault(int i) {
			return GetRuleContext<GraphOrDefaultContext>(i);
		}
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public IReadOnlyList<GraphOrDefaultContext> graphOrDefault() {
			return GetRuleContexts<GraphOrDefaultContext>();
		}
		public ITerminalNode TO() { return GetToken(sparq11lTranslatorParser.TO, 0); }
		public ITerminalNode ADD() { return GetToken(sparq11lTranslatorParser.ADD, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(ADD);
			_localctx.value = new SparqlUpdateAdd();
			State = 661;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 659; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 663; _localctx.g1 = graphOrDefault();
			State = 664; Match(TO);
			State = 665; _localctx.g2 = graphOrDefault();
			_localctx.value.From =_localctx.g1.value; _localctx.value.To =_localctx.g2.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		public SparqlUpdateMove value;
		public GraphOrDefaultContext g1;
		public GraphOrDefaultContext g2;
		public ITerminalNode MOVE() { return GetToken(sparq11lTranslatorParser.MOVE, 0); }
		public GraphOrDefaultContext graphOrDefault(int i) {
			return GetRuleContext<GraphOrDefaultContext>(i);
		}
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public IReadOnlyList<GraphOrDefaultContext> graphOrDefault() {
			return GetRuleContexts<GraphOrDefaultContext>();
		}
		public ITerminalNode TO() { return GetToken(sparq11lTranslatorParser.TO, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_move);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668; Match(MOVE);
			_localctx.value = new SparqlUpdateMove();
			State = 672;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 670; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 674; _localctx.g1 = graphOrDefault();
			State = 675; Match(TO);
			State = 676; _localctx.g2 = graphOrDefault();
			_localctx.value.From =_localctx.g1.value; _localctx.value.To =_localctx.g2.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyContext : ParserRuleContext {
		public SparqlUpdateCopy value;
		public GraphOrDefaultContext g1;
		public GraphOrDefaultContext g2;
		public ITerminalNode COPY() { return GetToken(sparq11lTranslatorParser.COPY, 0); }
		public GraphOrDefaultContext graphOrDefault(int i) {
			return GetRuleContext<GraphOrDefaultContext>(i);
		}
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public IReadOnlyList<GraphOrDefaultContext> graphOrDefault() {
			return GetRuleContexts<GraphOrDefaultContext>();
		}
		public ITerminalNode TO() { return GetToken(sparq11lTranslatorParser.TO, 0); }
		public CopyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterCopy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitCopy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyContext copy() {
		CopyContext _localctx = new CopyContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(COPY);
			_localctx.value = new SparqlUpdateCopy();
			State = 683;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 681; Match(SILENT);
				_localctx.value.Silent();
				}
			}

			State = 685; _localctx.g1 = graphOrDefault();
			State = 686; Match(TO);
			State = 687; _localctx.g2 = graphOrDefault();
			_localctx.value.From =_localctx.g1.value; _localctx.value.To =_localctx.g2.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertDataContext : ParserRuleContext {
		public SparqlUpdateInsertData value;
		public QuadDataContext _quadData;
		public ITerminalNode DATA() { return GetToken(sparq11lTranslatorParser.DATA, 0); }
		public QuadDataContext quadData() {
			return GetRuleContext<QuadDataContext>(0);
		}
		public ITerminalNode INSERT() { return GetToken(sparq11lTranslatorParser.INSERT, 0); }
		public InsertDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertData; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterInsertData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitInsertData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertDataContext insertData() {
		InsertDataContext _localctx = new InsertDataContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_insertData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690; Match(INSERT);
			State = 691; Match(DATA);
			State = 692; _localctx._quadData = quadData();
			 _localctx.value = new SparqlUpdateInsertData(_localctx._quadData.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDataContext : ParserRuleContext {
		public SparqlUpdateDeleteData value;
		public QuadDataContext _quadData;
		public ITerminalNode DATA() { return GetToken(sparq11lTranslatorParser.DATA, 0); }
		public QuadDataContext quadData() {
			return GetRuleContext<QuadDataContext>(0);
		}
		public ITerminalNode DELETE() { return GetToken(sparq11lTranslatorParser.DELETE, 0); }
		public DeleteDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteData; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDeleteData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDeleteData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDataContext deleteData() {
		DeleteDataContext _localctx = new DeleteDataContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_deleteData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; Match(DELETE);
			State = 696; Match(DATA);
			State = 697; _localctx._quadData = quadData();
			 _localctx.value = new SparqlUpdateDeleteData(_localctx._quadData.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteWhereContext : ParserRuleContext {
		public SparqlUpdateModify value;
		public QuadPatternContext _quadPattern;
		public ITerminalNode WHERE() { return GetToken(sparq11lTranslatorParser.WHERE, 0); }
		public ITerminalNode DELETE() { return GetToken(sparq11lTranslatorParser.DELETE, 0); }
		public QuadPatternContext quadPattern() {
			return GetRuleContext<QuadPatternContext>(0);
		}
		public DeleteWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteWhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDeleteWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDeleteWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteWhereContext deleteWhere() {
		DeleteWhereContext _localctx = new DeleteWhereContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_deleteWhere);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; Match(DELETE);
			State = 701; Match(WHERE);
			State = 702; _localctx._quadPattern = quadPattern();
			_localctx.value = new SparqlUpdateModify(_localctx._quadPattern.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyContext : ParserRuleContext {
		public SparqlUpdateModify value;
		public IriContext _iri;
		public DeleteClauseContext _deleteClause;
		public InsertClauseContext _insertClause;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode WHERE() { return GetToken(sparq11lTranslatorParser.WHERE, 0); }
		public IReadOnlyList<UsingClauseContext> usingClause() {
			return GetRuleContexts<UsingClauseContext>();
		}
		public DeleteClauseContext deleteClause() {
			return GetRuleContext<DeleteClauseContext>(0);
		}
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(sparq11lTranslatorParser.WITH, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public UsingClauseContext usingClause(int i) {
			return GetRuleContext<UsingClauseContext>(i);
		}
		public InsertClauseContext insertClause() {
			return GetRuleContext<InsertClauseContext>(0);
		}
		public ModifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterModify(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitModify(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyContext modify() {
		ModifyContext _localctx = new ModifyContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_modify);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlUpdateModify(q);
			State = 710;
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 706; Match(WITH);
				State = 707; _localctx._iri = iri();
				 q.ActiveGraphs.Add(_localctx._iri.value); _localctx.value.SetWith(_localctx._iri.value);
				}
			}

			State = 722;
			switch (_input.La(1)) {
			case DELETE:
				{
				State = 712; _localctx._deleteClause = deleteClause();
				 _localctx.value.SetDelete(_localctx._deleteClause.value); 
				State = 717;
				_la = _input.La(1);
				if (_la==INSERT) {
					{
					State = 714; _localctx._insertClause = insertClause();
					_localctx.value.SetInsert(_localctx._insertClause.value);
					}
				}

				}
				break;
			case INSERT:
				{
				State = 719; _localctx._insertClause = insertClause();
				_localctx.value.SetInsert(_localctx._insertClause.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 730;
			_la = _input.La(1);
			if (_la==USING) {
				{
				q.ActiveGraphs.Clear();
				State = 726;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 725; usingClause();
					}
					}
					State = 728;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==USING );
				}
			}

			State = 732; Match(WHERE);
			State = 733; _localctx._groupGraphPattern = groupGraphPattern();
			 _localctx.value.SetWhere(_localctx._groupGraphPattern.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteClauseContext : ParserRuleContext {
		public SparqlQuadsPattern value;
		public QuadPatternContext _quadPattern;
		public ITerminalNode DELETE() { return GetToken(sparq11lTranslatorParser.DELETE, 0); }
		public QuadPatternContext quadPattern() {
			return GetRuleContext<QuadPatternContext>(0);
		}
		public DeleteClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDeleteClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDeleteClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteClauseContext deleteClause() {
		DeleteClauseContext _localctx = new DeleteClauseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_deleteClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736; Match(DELETE);
			State = 737; _localctx._quadPattern = quadPattern();
			 _localctx.value = _localctx._quadPattern.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertClauseContext : ParserRuleContext {
		public SparqlQuadsPattern value;
		public QuadPatternContext _quadPattern;
		public ITerminalNode INSERT() { return GetToken(sparq11lTranslatorParser.INSERT, 0); }
		public QuadPatternContext quadPattern() {
			return GetRuleContext<QuadPatternContext>(0);
		}
		public InsertClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterInsertClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitInsertClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertClauseContext insertClause() {
		InsertClauseContext _localctx = new InsertClauseContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_insertClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; Match(INSERT);
			State = 741; _localctx._quadPattern = quadPattern();
			 _localctx.value = _localctx._quadPattern.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingClauseContext : ParserRuleContext {
		public IriContext _iri;
		public ITerminalNode NAMED() { return GetToken(sparq11lTranslatorParser.NAMED, 0); }
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode USING() { return GetToken(sparq11lTranslatorParser.USING, 0); }
		public UsingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterUsingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitUsingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingClauseContext usingClause() {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_usingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(USING);
			State = 752;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				{
				State = 745; _localctx._iri = iri();
				q.ActiveGraphs.Add(_localctx._iri.value);
				}
				break;
			case NAMED:
				{
				State = 748; Match(NAMED);
				State = 749; _localctx._iri = iri();
				q.NamedGraphs.Add(_localctx._iri.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphOrDefaultContext : ParserRuleContext {
		public string value;
		public IriStringContext _iriString;
		public ITerminalNode GRAPH() { return GetToken(sparq11lTranslatorParser.GRAPH, 0); }
		public ITerminalNode DEFAULT() { return GetToken(sparq11lTranslatorParser.DEFAULT, 0); }
		public IriStringContext iriString() {
			return GetRuleContext<IriStringContext>(0);
		}
		public GraphOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphOrDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphOrDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphOrDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphOrDefaultContext graphOrDefault() {
		GraphOrDefaultContext _localctx = new GraphOrDefaultContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_graphOrDefault);
		int _la;
		try {
			State = 761;
			switch (_input.La(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 754; Match(DEFAULT);
				}
				break;
			case GRAPH:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756;
				_la = _input.La(1);
				if (_la==GRAPH) {
					{
					State = 755; Match(GRAPH);
					}
				}

				State = 758; _localctx._iriString = iriString();
				_localctx.value = _localctx._iriString.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphRefContext : ParserRuleContext {
		public string value;
		public IriStringContext _iriString;
		public ITerminalNode GRAPH() { return GetToken(sparq11lTranslatorParser.GRAPH, 0); }
		public IriStringContext iriString() {
			return GetRuleContext<IriStringContext>(0);
		}
		public GraphRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphRefContext graphRef() {
		GraphRefContext _localctx = new GraphRefContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_graphRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763; Match(GRAPH);
			State = 764; _localctx._iriString = iriString();
			_localctx.value = _localctx._iriString.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphRefAllContext : ParserRuleContext {
		public UpdateGraph value;
		public GraphRefContext _graphRef;
		public IToken g;
		public ITerminalNode ALL() { return GetToken(sparq11lTranslatorParser.ALL, 0); }
		public ITerminalNode NAMED() { return GetToken(sparq11lTranslatorParser.NAMED, 0); }
		public ITerminalNode DEFAULT() { return GetToken(sparq11lTranslatorParser.DEFAULT, 0); }
		public GraphRefContext graphRef() {
			return GetRuleContext<GraphRefContext>(0);
		}
		public GraphRefAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphRefAll; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphRefAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphRefAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphRefAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphRefAllContext graphRefAll() {
		GraphRefAllContext _localctx = new GraphRefAllContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_graphRefAll);
		try {
			State = 776;
			switch (_input.La(1)) {
			case GRAPH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767; _localctx._graphRef = graphRef();
				_localctx.value = new UpdateGraph(_localctx._graphRef.value); 
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 770; _localctx.g = Match(DEFAULT);
				_localctx.value = new UpdateGraph(SparqlGrpahRefTypeEnum.Default); 
				}
				break;
			case NAMED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772; _localctx.g = Match(NAMED);
				_localctx.value = new UpdateGraph( SparqlGrpahRefTypeEnum.Named); 
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 774; _localctx.g = Match(ALL);
				_localctx.value = new UpdateGraph(SparqlGrpahRefTypeEnum.All); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadPatternContext : ParserRuleContext {
		public SparqlQuadsPattern value;
		public QuadsContext _quads;
		public QuadsContext quads() {
			return GetRuleContext<QuadsContext>(0);
		}
		public QuadPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quadPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterQuadPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitQuadPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuadPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadPatternContext quadPattern() {
		QuadPatternContext _localctx = new QuadPatternContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_quadPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; Match(T__15);
			State = 779; _localctx._quads = quads();
			State = 780; Match(T__14);
			_localctx.value = _localctx._quads.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadDataContext : ParserRuleContext {
		public SparqlQuadsPattern value;
		public QuadsContext _quads;
		public QuadsContext quads() {
			return GetRuleContext<QuadsContext>(0);
		}
		public QuadDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quadData; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterQuadData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitQuadData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuadData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadDataContext quadData() {
		QuadDataContext _localctx = new QuadDataContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_quadData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; Match(T__15);
			State = 784; _localctx._quads = quads();
			State = 785; Match(T__14);
			_localctx.value = _localctx._quads.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadsContext : ParserRuleContext {
		public SparqlQuadsPattern value;
		public TriplesTemplateContext _triplesTemplate;
		public QuadsNotTriplesContext _quadsNotTriples;
		public QuadsNotTriplesContext quadsNotTriples(int i) {
			return GetRuleContext<QuadsNotTriplesContext>(i);
		}
		public TriplesTemplateContext triplesTemplate(int i) {
			return GetRuleContext<TriplesTemplateContext>(i);
		}
		public IReadOnlyList<QuadsNotTriplesContext> quadsNotTriples() {
			return GetRuleContexts<QuadsNotTriplesContext>();
		}
		public IReadOnlyList<TriplesTemplateContext> triplesTemplate() {
			return GetRuleContexts<TriplesTemplateContext>();
		}
		public QuadsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quads; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterQuads(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitQuads(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuads(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadsContext quads() {
		QuadsContext _localctx = new QuadsContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_quads);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlQuadsPattern();
			State = 792;
			_la = _input.La(1);
			if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
				{
				State = 789; _localctx._triplesTemplate = triplesTemplate();
				_localctx.value.AddRange(_localctx._triplesTemplate.value);
				}
			}

			State = 806;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==GRAPH) {
				{
				{
				State = 794; _localctx._quadsNotTriples = quadsNotTriples();
				_localctx.value.Add(_localctx._quadsNotTriples.value);
				State = 797;
				_la = _input.La(1);
				if (_la==T__10) {
					{
					State = 796; Match(T__10);
					}
				}

				State = 802;
				_la = _input.La(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
					{
					State = 799; _localctx._triplesTemplate = triplesTemplate();
					_localctx.value.AddRange(_localctx._triplesTemplate.value);
					}
				}

				}
				}
				State = 808;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadsNotTriplesContext : ParserRuleContext {
		public SparqlGraphGraph value;
		public VarOrIriContext _varOrIri;
		public TriplesTemplateContext _triplesTemplate;
		public ITerminalNode GRAPH() { return GetToken(sparq11lTranslatorParser.GRAPH, 0); }
		public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		public TriplesTemplateContext triplesTemplate() {
			return GetRuleContext<TriplesTemplateContext>(0);
		}
		public QuadsNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quadsNotTriples; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterQuadsNotTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitQuadsNotTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuadsNotTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadsNotTriplesContext quadsNotTriples() {
		QuadsNotTriplesContext _localctx = new QuadsNotTriplesContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_quadsNotTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809; Match(GRAPH);
			State = 810; _localctx._varOrIri = varOrIri();
			_localctx.value = new SparqlGraphGraph(_localctx._varOrIri.value);
			State = 812; Match(T__15);
			State = 816;
			_la = _input.La(1);
			if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
				{
				State = 813; _localctx._triplesTemplate = triplesTemplate();
				 _localctx.value.AddTriples(_localctx._triplesTemplate.value);
				}
			}

			State = 818; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesTemplateContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public TriplesSameSubjectContext _triplesSameSubject;
		public TriplesTemplateContext tt;
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public TriplesTemplateContext triplesTemplate() {
			return GetRuleContext<TriplesTemplateContext>(0);
		}
		public TriplesTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesTemplate; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterTriplesTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitTriplesTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesTemplateContext triplesTemplate() {
		TriplesTemplateContext _localctx = new TriplesTemplateContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_triplesTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; _localctx._triplesSameSubject = triplesSameSubject();
			_localctx.value = _localctx._triplesSameSubject.value;
			State = 828;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 822; Match(T__10);
				State = 826;
				_la = _input.La(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
					{
					State = 823; _localctx.tt = triplesTemplate();
					_localctx.value.AddRange(_localctx.tt.value); 
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public SubSelectContext _subSelect;
		public GroupGraphPatternSubContext _groupGraphPatternSub;
		public SubSelectContext subSelect() {
			return GetRuleContext<SubSelectContext>(0);
		}
		public GroupGraphPatternSubContext groupGraphPatternSub() {
			return GetRuleContext<GroupGraphPatternSubContext>(0);
		}
		public GroupGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupGraphPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGroupGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGroupGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupGraphPatternContext groupGraphPattern() {
		GroupGraphPatternContext _localctx = new GroupGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_groupGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; Match(T__15);
			State = 837;
			switch (_input.La(1)) {
			case SELECT:
				{
				State = 831; _localctx._subSelect = subSelect();
				_localctx.value = _localctx._subSelect.value;
				}
				break;
			case T__15:
			case T__14:
			case BIND:
			case FILTER:
			case GRAPH:
			case MINUS:
			case OPTIONAL:
			case SERVICE:
			case VALUES:
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case BracketOpen:
			case ANON:
			case SquareBracketOpen:
				{
				State = 834; _localctx._groupGraphPatternSub = groupGraphPatternSub();
				_localctx.value = _localctx._groupGraphPatternSub.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 839; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternSubContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public TriplesBlockContext _triplesBlock;
		public GraphPatternNotTriplesContext _graphPatternNotTriples;
		public IReadOnlyList<GraphPatternNotTriplesContext> graphPatternNotTriples() {
			return GetRuleContexts<GraphPatternNotTriplesContext>();
		}
		public GraphPatternNotTriplesContext graphPatternNotTriples(int i) {
			return GetRuleContext<GraphPatternNotTriplesContext>(i);
		}
		public TriplesBlockContext triplesBlock(int i) {
			return GetRuleContext<TriplesBlockContext>(i);
		}
		public IReadOnlyList<TriplesBlockContext> triplesBlock() {
			return GetRuleContexts<TriplesBlockContext>();
		}
		public GroupGraphPatternSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupGraphPatternSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGroupGraphPatternSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGroupGraphPatternSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupGraphPatternSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupGraphPatternSubContext groupGraphPatternSub() {
		GroupGraphPatternSubContext _localctx = new GroupGraphPatternSubContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_groupGraphPatternSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlGraphPattern();
			State = 845;
			_la = _input.La(1);
			if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
				{
				State = 842; _localctx._triplesBlock = triplesBlock();
				_localctx.value.AddRange(_localctx._triplesBlock.value); 
				}
			}

			State = 859;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__15 - 8)) | (1L << (BIND - 8)) | (1L << (FILTER - 8)) | (1L << (GRAPH - 8)) | (1L << (MINUS - 8)) | (1L << (OPTIONAL - 8)) | (1L << (SERVICE - 8)) | (1L << (VALUES - 8)))) != 0)) {
				{
				{
				State = 847; _localctx._graphPatternNotTriples = graphPatternNotTriples();
				_localctx.value.Add(_localctx._graphPatternNotTriples.value); 
				State = 850;
				_la = _input.La(1);
				if (_la==T__10) {
					{
					State = 849; Match(T__10);
					}
				}

				State = 855;
				_la = _input.La(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
					{
					State = 852; _localctx._triplesBlock = triplesBlock();
					_localctx.value.AddRange(_localctx._triplesBlock.value); 
					}
				}

				}
				}
				State = 861;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesBlockContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public TriplesSameSubjectPathContext _triplesSameSubjectPath;
		public TriplesBlockContext added;
		public TriplesSameSubjectPathContext triplesSameSubjectPath() {
			return GetRuleContext<TriplesSameSubjectPathContext>(0);
		}
		public TriplesBlockContext triplesBlock() {
			return GetRuleContext<TriplesBlockContext>(0);
		}
		public TriplesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterTriplesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitTriplesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesBlockContext triplesBlock() {
		TriplesBlockContext _localctx = new TriplesBlockContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_triplesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862; _localctx._triplesSameSubjectPath = triplesSameSubjectPath();
			_localctx.value = _localctx._triplesSameSubjectPath.value;
			State = 870;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 864; Match(T__10);
				State = 868;
				_la = _input.La(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
					{
					State = 865; _localctx.added = triplesBlock();
					_localctx.value.AddRange(_localctx.added.value);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphPatternNotTriplesContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public GroupOrUnionGraphPatternContext _groupOrUnionGraphPattern;
		public OptionalGraphPatternContext _optionalGraphPattern;
		public MinusGraphPatternContext _minusGraphPattern;
		public GraphGraphPatternContext _graphGraphPattern;
		public ServiceGraphPatternContext _serviceGraphPattern;
		public FilterContext _filter;
		public BindContext _bind;
		public InlineDataContext _inlineData;
		public InlineDataContext inlineData() {
			return GetRuleContext<InlineDataContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public GraphGraphPatternContext graphGraphPattern() {
			return GetRuleContext<GraphGraphPatternContext>(0);
		}
		public BindContext bind() {
			return GetRuleContext<BindContext>(0);
		}
		public ServiceGraphPatternContext serviceGraphPattern() {
			return GetRuleContext<ServiceGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext optionalGraphPattern() {
			return GetRuleContext<OptionalGraphPatternContext>(0);
		}
		public MinusGraphPatternContext minusGraphPattern() {
			return GetRuleContext<MinusGraphPatternContext>(0);
		}
		public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
			return GetRuleContext<GroupOrUnionGraphPatternContext>(0);
		}
		public GraphPatternNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphPatternNotTriples; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphPatternNotTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphPatternNotTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphPatternNotTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphPatternNotTriplesContext graphPatternNotTriples() {
		GraphPatternNotTriplesContext _localctx = new GraphPatternNotTriplesContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_graphPatternNotTriples);
		try {
			State = 896;
			switch (_input.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 872; _localctx._groupOrUnionGraphPattern = groupOrUnionGraphPattern();
				_localctx.value = _localctx._groupOrUnionGraphPattern.value;
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 875; _localctx._optionalGraphPattern = optionalGraphPattern();
				_localctx.value = _localctx._optionalGraphPattern.value;
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 878; _localctx._minusGraphPattern = minusGraphPattern();
				_localctx.value = _localctx._minusGraphPattern.value;
				}
				break;
			case GRAPH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 881; _localctx._graphGraphPattern = graphGraphPattern();
				_localctx.value = _localctx._graphGraphPattern.value;
				}
				break;
			case SERVICE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 884; _localctx._serviceGraphPattern = serviceGraphPattern();
				 _localctx.value = _localctx._serviceGraphPattern.value;
				}
				break;
			case FILTER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 887; _localctx._filter = filter();
				_localctx.value = _localctx._filter.value;
				}
				break;
			case BIND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 890; _localctx._bind = bind();
				_localctx.value = _localctx._bind.value;
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 8);
				{
				State = 893; _localctx._inlineData = inlineData();
				_localctx.value = _localctx._inlineData.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalGraphPatternContext : ParserRuleContext {
		public SparqlOptionalGraphPattern value;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode OPTIONAL() { return GetToken(sparq11lTranslatorParser.OPTIONAL, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalGraphPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterOptionalGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitOptionalGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalGraphPatternContext optionalGraphPattern() {
		OptionalGraphPatternContext _localctx = new OptionalGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_optionalGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; Match(OPTIONAL);
			State = 899; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value = new SparqlOptionalGraphPattern(_localctx._groupGraphPattern.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphGraphPatternContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public VarOrIriContext _varOrIri;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode GRAPH() { return GetToken(sparq11lTranslatorParser.GRAPH, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		public GraphGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphGraphPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphGraphPatternContext graphGraphPattern() {
		GraphGraphPatternContext _localctx = new GraphGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_graphGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902; Match(GRAPH);
			State = 903; _localctx._varOrIri = varOrIri();
			var temp=q.ActiveGraphs;  q.ActiveGraphs=q.SetNamedGraphOrVariable(_localctx._varOrIri.value, q.NamedGraphs); 
			State = 905; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value = _localctx._groupGraphPattern.value; q.ActiveGraphs=temp;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceGraphPatternContext : ParserRuleContext {
		public SparqlServicePattern value;
		public VarOrIriContext _varOrIri;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode SILENT() { return GetToken(sparq11lTranslatorParser.SILENT, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public ITerminalNode SERVICE() { return GetToken(sparq11lTranslatorParser.SERVICE, 0); }
		public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		public ServiceGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceGraphPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterServiceGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitServiceGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceGraphPatternContext serviceGraphPattern() {
		ServiceGraphPatternContext _localctx = new ServiceGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_serviceGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlServicePattern();
			State = 909; Match(SERVICE);
			State = 912;
			_la = _input.La(1);
			if (_la==SILENT) {
				{
				State = 910; Match(SILENT);
				_localctx.value.IsSilent();
				}
			}

			State = 914; _localctx._varOrIri = varOrIri();
			State = 915; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value.Create(_localctx._varOrIri.value, (_localctx._groupGraphPattern!=null?_input.GetText(_localctx._groupGraphPattern.start,_localctx._groupGraphPattern.stop):null), q.prolog.StringRepresentationOfProlog, q);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindContext : ParserRuleContext {
		public SparqlExpressionAsVariable value;
		public ExpressionContext _expression;
		public VarContext _var;
		public ITerminalNode AS() { return GetToken(sparq11lTranslatorParser.AS, 0); }
		public ITerminalNode BIND() { return GetToken(sparq11lTranslatorParser.BIND, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindContext bind() {
		BindContext _localctx = new BindContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_bind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; Match(BIND);
			State = 919; Match(BracketOpen);
			State = 920; _localctx._expression = expression();
			State = 921; Match(AS);
			State = 922; _localctx._var = var();
			State = 923; Match(BracketClose);
			_localctx.value = q.CreateExpressionAsVariable(_localctx._var.value, _localctx._expression.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDataContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public DataBlockContext _dataBlock;
		public DataBlockContext dataBlock() {
			return GetRuleContext<DataBlockContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(sparq11lTranslatorParser.VALUES, 0); }
		public InlineDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineData; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterInlineData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitInlineData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDataContext inlineData() {
		InlineDataContext _localctx = new InlineDataContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_inlineData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; Match(VALUES);
			State = 927; _localctx._dataBlock = dataBlock();
			 _localctx.value = _localctx._dataBlock.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataBlockContext : ParserRuleContext {
		public ISparqlGraphPattern value;
		public InlineDataOneVarContext _inlineDataOneVar;
		public InlineDataFullContext _inlineDataFull;
		public InlineDataOneVarContext inlineDataOneVar() {
			return GetRuleContext<InlineDataOneVarContext>(0);
		}
		public InlineDataFullContext inlineDataFull() {
			return GetRuleContext<InlineDataFullContext>(0);
		}
		public DataBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDataBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDataBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataBlockContext dataBlock() {
		DataBlockContext _localctx = new DataBlockContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_dataBlock);
		try {
			State = 936;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 930; _localctx._inlineDataOneVar = inlineDataOneVar();
				_localctx.value = _localctx._inlineDataOneVar.value;
				}
				break;
			case NIL:
			case BracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933; _localctx._inlineDataFull = inlineDataFull();
				_localctx.value = _localctx._inlineDataFull.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDataOneVarContext : ParserRuleContext {
		public SparqlInlineVariable value;
		public VarContext _var;
		public DataBlockValueContext _dataBlockValue;
		public IReadOnlyList<DataBlockValueContext> dataBlockValue() {
			return GetRuleContexts<DataBlockValueContext>();
		}
		public DataBlockValueContext dataBlockValue(int i) {
			return GetRuleContext<DataBlockValueContext>(i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public InlineDataOneVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineDataOneVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterInlineDataOneVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitInlineDataOneVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineDataOneVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDataOneVarContext inlineDataOneVar() {
		InlineDataOneVarContext _localctx = new InlineDataOneVarContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_inlineDataOneVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; _localctx._var = var();
			 _localctx.value = new SparqlInlineVariable(_localctx._var.value);
			State = 940; Match(T__15);
			State = 946;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UNDEF || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (ANON - 130)))) != 0)) {
				{
				{
				State = 941; _localctx._dataBlockValue = dataBlockValue();
				 _localctx.value.Add(_localctx._dataBlockValue.value);
				}
				}
				State = 948;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 949; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDataFullContext : ParserRuleContext {
		public SparqlInline value;
		public VarContext _var;
		public DataBlockValueContext _dataBlockValue;
		public IReadOnlyList<DataBlockValueContext> dataBlockValue() {
			return GetRuleContexts<DataBlockValueContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public ITerminalNode NIL(int i) {
			return GetToken(sparq11lTranslatorParser.NIL, i);
		}
		public DataBlockValueContext dataBlockValue(int i) {
			return GetRuleContext<DataBlockValueContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NIL() { return GetTokens(sparq11lTranslatorParser.NIL); }
		public IReadOnlyList<VarContext> var() {
			return GetRuleContexts<VarContext>();
		}
		public InlineDataFullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineDataFull; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterInlineDataFull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitInlineDataFull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineDataFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDataFullContext inlineDataFull() {
		InlineDataFullContext _localctx = new InlineDataFullContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_inlineDataFull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value = new SparqlInline();
			State = 963;
			switch (_input.La(1)) {
			case NIL:
				{
				State = 952; Match(NIL);
				}
				break;
			case BracketOpen:
				{
				State = 953; Match(BracketOpen);
				State = 959;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR1 || _la==VAR2) {
					{
					{
					State = 954; _localctx._var = var();
					_localctx.value.AddVar(_localctx._var.value);
					}
					}
					State = 961;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 962; Match(BracketClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 965; Match(T__15);
			State = 980;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NIL || _la==BracketOpen) {
				{
				State = 978;
				switch (_input.La(1)) {
				case BracketOpen:
					{
					State = 966; Match(BracketOpen);
					State = 972;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==UNDEF || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (ANON - 130)))) != 0)) {
						{
						{
						State = 967; _localctx._dataBlockValue = dataBlockValue();
						_localctx.value.AddValue(_localctx._dataBlockValue.value);
						}
						}
						State = 974;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					_localctx.value.NextListOfVarBindings();
					State = 976; Match(BracketClose);
					}
					break;
				case NIL:
					{
					State = 977; Match(NIL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 982;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 983; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataBlockValueContext : ParserRuleContext {
		public ObjectVariants value;
		public IriContext _iri;
		public BlankNodeContext _blankNode;
		public RDFLiteralContext _rDFLiteral;
		public NumericLiteralContext _numericLiteral;
		public BooleanLiteralContext _booleanLiteral;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode UNDEF() { return GetToken(sparq11lTranslatorParser.UNDEF, 0); }
		public BlankNodeContext blankNode() {
			return GetRuleContext<BlankNodeContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public DataBlockValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataBlockValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterDataBlockValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitDataBlockValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataBlockValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataBlockValueContext dataBlockValue() {
		DataBlockValueContext _localctx = new DataBlockValueContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_dataBlockValue);
		try {
			State = 1002;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 985; _localctx._iri = iri();
				_localctx.value = _localctx._iri.value;
				}
				break;
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 988; _localctx._blankNode = blankNode();
				_localctx.value = _localctx._blankNode.value;
				}
				break;
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 991; _localctx._rDFLiteral = rDFLiteral();
				_localctx.value = _localctx._rDFLiteral.value;
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 994; _localctx._numericLiteral = numericLiteral();
				_localctx.value = _localctx._numericLiteral.value;
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 997; _localctx._booleanLiteral = booleanLiteral();
				_localctx.value = _localctx._booleanLiteral.value;
				}
				break;
			case UNDEF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1000; Match(UNDEF);
				_localctx.value = new SparqlUnDefinedNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinusGraphPatternContext : ParserRuleContext {
		public SparqlMinusGraphPattern value;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode MINUS() { return GetToken(sparq11lTranslatorParser.MINUS, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public MinusGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minusGraphPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterMinusGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitMinusGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinusGraphPatternContext minusGraphPattern() {
		MinusGraphPatternContext _localctx = new MinusGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_minusGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004; Match(MINUS);
			State = 1005; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value = new SparqlMinusGraphPattern(_localctx._groupGraphPattern.value, q);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupOrUnionGraphPatternContext : ParserRuleContext {
		public SparqlUnionGraphPattern value;
		public GroupGraphPatternContext _groupGraphPattern;
		public IReadOnlyList<ITerminalNode> UNION() { return GetTokens(sparq11lTranslatorParser.UNION); }
		public IReadOnlyList<GroupGraphPatternContext> groupGraphPattern() {
			return GetRuleContexts<GroupGraphPatternContext>();
		}
		public ITerminalNode UNION(int i) {
			return GetToken(sparq11lTranslatorParser.UNION, i);
		}
		public GroupGraphPatternContext groupGraphPattern(int i) {
			return GetRuleContext<GroupGraphPatternContext>(i);
		}
		public GroupOrUnionGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupOrUnionGraphPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGroupOrUnionGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGroupOrUnionGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupOrUnionGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
		GroupOrUnionGraphPatternContext _localctx = new GroupOrUnionGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_groupOrUnionGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value =  new SparqlUnionGraphPattern(_localctx._groupGraphPattern.value);
			State = 1016;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UNION) {
				{
				{
				State = 1010; Match(UNION);
				State = 1011; _localctx._groupGraphPattern = groupGraphPattern();
				_localctx.value.Add(_localctx._groupGraphPattern.value);
				}
				}
				State = 1018;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public SparqlFilter value;
		public ConstraintContext _constraint;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public ITerminalNode FILTER() { return GetToken(sparq11lTranslatorParser.FILTER, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019; Match(FILTER);
			State = 1020; _localctx._constraint = constraint();
			_localctx.value = new SparqlFilter(_localctx._constraint.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public SparqlExpression value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public FunctionCallContext _functionCall;
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_constraint);
		try {
			State = 1032;
			switch (_input.La(1)) {
			case BracketOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value = _localctx._brackettedExpression.value;
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SAMETERM:
			case ISIRI:
			case ISURI:
			case ISBLANK:
			case ISLITERAL:
			case ISNUMERIC:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1026; _localctx._builtInCall = builtInCall();
				_localctx.value = _localctx._builtInCall.value;
				}
				break;
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029; _localctx._functionCall = functionCall();
				_localctx.value = _localctx._functionCall.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public SparqlFunctionCall value;
		public IriStringContext _iriString;
		public ArgListContext _argList;
		public IriStringContext iriString() {
			return GetRuleContext<IriStringContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; _localctx._iriString = iriString();
			State = 1035; _localctx._argList = argList();
			 _localctx.value = new SparqlFunctionCall(_localctx._iriString.value, _localctx._argList.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public SparqlArgs value;
		public ExpressionContext _expression;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DISTINCT() { return GetToken(sparq11lTranslatorParser.DISTINCT, 0); }
		public ITerminalNode NIL() { return GetToken(sparq11lTranslatorParser.NIL, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_argList);
		int _la;
		try {
			State = 1058;
			switch (_input.La(1)) {
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1038; Match(NIL);
				}
				break;
			case BracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				_localctx.value =  new SparqlArgs();
				State = 1040; Match(BracketOpen);
				State = 1043;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1041; Match(DISTINCT);
					 _localctx.value.IsDistinct(); 
					}
				}

				State = 1045; _localctx._expression = expression();
				 _localctx.value.Add(_localctx._expression.value); 
				State = 1053;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 1047; Match(T__22);
					State = 1048; _localctx._expression = expression();
					 _localctx.value.Add(_localctx._expression.value); 
					}
					}
					State = 1055;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1056; Match(BracketClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public List<SparqlExpression> value;
		public ExpressionContext _expression;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NIL() { return GetToken(sparq11lTranslatorParser.NIL, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_expressionList);
		int _la;
		try {
			State = 1075;
			switch (_input.La(1)) {
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1060; Match(NIL);
				}
				break;
			case BracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1061; Match(BracketOpen);
				State = 1062; _localctx._expression = expression();
				_localctx.value = new List<SparqlExpression>(){_localctx._expression.value};
				State = 1070;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 1064; Match(T__22);
					State = 1065; _localctx._expression = expression();
					 _localctx.value.Add(_localctx._expression.value);
					}
					}
					State = 1072;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1073; Match(BracketClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTemplateContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public ConstructTriplesContext _constructTriples;
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public ConstructTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructTemplate; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterConstructTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitConstructTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTemplateContext constructTemplate() {
		ConstructTemplateContext _localctx = new ConstructTemplateContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_constructTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077; Match(T__15);
			_localctx.value = new SparqlGraphPattern();
			State = 1082;
			_la = _input.La(1);
			if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
				{
				State = 1079; _localctx._constructTriples = constructTriples();
				_localctx.value.AddRange(_localctx._constructTriples.value);
				}
			}

			State = 1084; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTriplesContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public TriplesSameSubjectContext _triplesSameSubject;
		public ConstructTriplesContext c;
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public ConstructTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructTriples; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterConstructTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitConstructTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTriplesContext constructTriples() {
		ConstructTriplesContext _localctx = new ConstructTriplesContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_constructTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086; _localctx._triplesSameSubject = triplesSameSubject();
			_localctx.value = _localctx._triplesSameSubject.value;
			State = 1094;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 1088; Match(T__10);
				State = 1092;
				_la = _input.La(1);
				if (((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0)) {
					{
					State = 1089; _localctx.c = constructTriples();
					_localctx.value.AddRange(_localctx.c.value);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public SubjectNodeContext _subjectNode;
		public TriplesNodeContext _triplesNode;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public SubjectNodeContext subjectNode() {
			return GetRuleContext<SubjectNodeContext>(0);
		}
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public TriplesSameSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesSameSubject; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectContext triplesSameSubject() {
		TriplesSameSubjectContext _localctx = new TriplesSameSubjectContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_triplesSameSubject);
		int _la;
		try {
			State = 1105;
			switch (_input.La(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				_localctx.value = new SparqlGraphPattern();
				State = 1097; _localctx._subjectNode = subjectNode();
				State = 1098; propertyListNotEmpty(_localctx.value, _localctx._subjectNode.value);
				}
				break;
			case BracketOpen:
			case SquareBracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				_localctx.value = new SparqlGraphPattern();
				State = 1101; _localctx._triplesNode = triplesNode(_localctx.value);
				State = 1103;
				_la = _input.La(1);
				if (_la==T__11 || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IRIREF - 132)) | (1L << (PNAME_LN - 132)) | (1L << (PNAME_NS - 132)) | (1L << (VAR1 - 132)) | (1L << (VAR2 - 132)))) != 0)) {
					{
					State = 1102; propertyListNotEmpty(_localctx.value, _localctx._triplesNode.value);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListNotEmptyContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public VerbContext _verb;
		public IReadOnlyList<VerbContext> verb() {
			return GetRuleContexts<VerbContext>();
		}
		public VerbContext verb(int i) {
			return GetRuleContext<VerbContext>(i);
		}
		public ObjectListContext objectList(int i) {
			return GetRuleContext<ObjectListContext>(i);
		}
		public IReadOnlyList<ObjectListContext> objectList() {
			return GetRuleContexts<ObjectListContext>();
		}
		public PropertyListNotEmptyContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public PropertyListNotEmptyContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
		}
		public override int RuleIndex { get { return RULE_propertyListNotEmpty; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPropertyListNotEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPropertyListNotEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListNotEmptyContext propertyListNotEmpty(SparqlGraphPattern triples, ObjectVariants subject) {
		PropertyListNotEmptyContext _localctx = new PropertyListNotEmptyContext(_ctx, State, triples, subject);
		EnterRule(_localctx, 148, RULE_propertyListNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107; _localctx._verb = verb();
			State = 1108; objectList(_localctx.triples, _localctx.subject, _localctx._verb.value);
			State = 1117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 1109; Match(T__7);
				State = 1113;
				_la = _input.La(1);
				if (_la==T__11 || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IRIREF - 132)) | (1L << (PNAME_LN - 132)) | (1L << (PNAME_NS - 132)) | (1L << (VAR1 - 132)) | (1L << (VAR2 - 132)))) != 0)) {
					{
					State = 1110; _localctx._verb = verb();
					State = 1111; objectList(_localctx.triples, _localctx.subject, _localctx._verb.value);
					}
				}

				}
				}
				State = 1119;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbContext : ParserRuleContext {
		public ObjectVariants value;
		public VarOrIriContext _varOrIri;
		public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		public VerbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verb; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterVerb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitVerb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbContext verb() {
		VerbContext _localctx = new VerbContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_verb);
		try {
			State = 1125;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120; _localctx._varOrIri = varOrIri();
				_localctx.value =  (ObjectVariants)_localctx._varOrIri.value;
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1123; Match(T__11);
				_localctx.value =  q.Store.NodeGenerator.SpecialTypes.type;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public ObjectVariants predicate;
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public IReadOnlyList<ObjectContext> @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ObjectListContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
			this.predicate = predicate;
		}
		public override int RuleIndex { get { return RULE_objectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterObjectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitObjectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListContext objectList(SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate) {
		ObjectListContext _localctx = new ObjectListContext(_ctx, State, triples, subject, predicate);
		EnterRule(_localctx, 152, RULE_objectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127; @object(_localctx.triples, _localctx.subject, _localctx.predicate);
			State = 1132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__22) {
				{
				{
				State = 1128; Match(T__22);
				State = 1129; @object(_localctx.triples, _localctx.subject, _localctx.predicate);
				}
				}
				State = 1134;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public ObjectVariants predicate;
		public GraphNodeContext _graphNode;
		public GraphNodeContext graphNode() {
			return GetRuleContext<GraphNodeContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ObjectContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
			this.predicate = predicate;
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object(SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate) {
		ObjectContext _localctx = new ObjectContext(_ctx, State, triples, subject, predicate);
		EnterRule(_localctx, 154, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135; _localctx._graphNode = graphNode(_localctx.triples);
			 _localctx.triples.Add(new SparqlTriple(_localctx.subject, _localctx.predicate, _localctx._graphNode.value, q)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodeContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants value;
		public VarOrTermContext _varOrTerm;
		public TriplesNodeContext _triplesNode;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public GraphNodeContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public GraphNodeContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples)
			: base(parent, invokingState)
		{
			this.triples = triples;
		}
		public override int RuleIndex { get { return RULE_graphNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodeContext graphNode(SparqlGraphPattern triples) {
		GraphNodeContext _localctx = new GraphNodeContext(_ctx, State, triples);
		EnterRule(_localctx, 156, RULE_graphNode);
		try {
			State = 1144;
			switch (_input.La(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1138; _localctx._varOrTerm = varOrTerm();
				 _localctx.value = _localctx._varOrTerm.value; 
				}
				break;
			case BracketOpen:
			case SquareBracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1141; _localctx._triplesNode = triplesNode(_localctx.triples);
				 _localctx.value = _localctx._triplesNode.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public SparqlRdfCollection value;
		public GraphNodeContext _graphNode;
		public IReadOnlyList<GraphNodeContext> graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CollectionContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples)
			: base(parent, invokingState)
		{
			this.triples = triples;
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection(SparqlGraphPattern triples) {
		CollectionContext _localctx = new CollectionContext(_ctx, State, triples);
		EnterRule(_localctx, 158, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146; Match(BracketOpen);
			_localctx.value = new SparqlRdfCollection();
			State = 1151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1148; _localctx._graphNode = graphNode(_localctx.triples);
				  _localctx.value.nodes.Add(_localctx._graphNode.value);
				}
				}
				State = 1153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0) );
			State = 1155; Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodeContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants value;
		public CollectionContext _collection;
		public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TriplesNodeContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public TriplesNodeContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples)
			: base(parent, invokingState)
		{
			this.triples = triples;
		}
		public override int RuleIndex { get { return RULE_triplesNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterTriplesNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitTriplesNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesNodeContext triplesNode(SparqlGraphPattern triples) {
		TriplesNodeContext _localctx = new TriplesNodeContext(_ctx, State, triples);
		EnterRule(_localctx, 160, RULE_triplesNode);
		try {
			State = 1162;
			switch (_input.La(1)) {
			case BracketOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157; _localctx._collection = collection(_localctx.triples);
				 _localctx.value =  _localctx._collection.value.GetNode((Subject, Predicate,Object)=> _localctx.triples.Add(new SparqlTriple(Subject, Predicate,Object,q)), q.Store.NodeGenerator); 
				}
				break;
			case SquareBracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.value = q.CreateBlankNode();
				State = 1161; blankNodePropertyList(_localctx.triples,_localctx.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
		}
		public override int RuleIndex { get { return RULE_blankNodePropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListContext blankNodePropertyList(SparqlGraphPattern triples, ObjectVariants subject) {
		BlankNodePropertyListContext _localctx = new BlankNodePropertyListContext(_ctx, State, triples, subject);
		EnterRule(_localctx, 162, RULE_blankNodePropertyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164; Match(SquareBracketOpen);
			State = 1165; propertyListNotEmpty(_localctx.triples, _localctx.subject);
			State = 1166; Match(SquareBracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectNodeContext : ParserRuleContext {
		public ObjectVariants value;
		public VarOrTermContext _varOrTerm;
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public SubjectNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSubjectNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSubjectNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectNodeContext subjectNode() {
		SubjectNodeContext _localctx = new SubjectNodeContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_subjectNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168; _localctx._varOrTerm = varOrTerm();
			 _localctx.value = _localctx._varOrTerm.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectPathContext : ParserRuleContext {
		public SparqlGraphPattern value;
		public SubjectNodeContext _subjectNode;
		public TriplesNodePathContext _triplesNodePath;
		public SubjectNodeContext subjectNode() {
			return GetRuleContext<SubjectNodeContext>(0);
		}
		public PropertyListPathNotEmptyContext propertyListPathNotEmpty() {
			return GetRuleContext<PropertyListPathNotEmptyContext>(0);
		}
		public TriplesNodePathContext triplesNodePath() {
			return GetRuleContext<TriplesNodePathContext>(0);
		}
		public TriplesSameSubjectPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesSameSubjectPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubjectPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubjectPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubjectPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectPathContext triplesSameSubjectPath() {
		TriplesSameSubjectPathContext _localctx = new TriplesSameSubjectPathContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_triplesSameSubjectPath);
		int _la;
		try {
			State = 1180;
			switch (_input.La(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				_localctx.value = new SparqlGraphPattern();
				State = 1172; _localctx._subjectNode = subjectNode();
				State = 1173; propertyListPathNotEmpty(_localctx.value, _localctx._subjectNode.value);
				}
				break;
			case BracketOpen:
			case SquareBracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				_localctx.value = new SparqlGraphPattern();
				State = 1176; _localctx._triplesNodePath = triplesNodePath(_localctx.value);
				State = 1178;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__11) | (1L << T__0))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IRIREF - 132)) | (1L << (PNAME_LN - 132)) | (1L << (PNAME_NS - 132)) | (1L << (VAR1 - 132)) | (1L << (VAR2 - 132)) | (1L << (BracketOpen - 132)))) != 0)) {
					{
					State = 1177; propertyListPathNotEmpty(_localctx.value,_localctx._triplesNodePath.value);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListPathNotEmptyContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public PathContext _path;
		public VarContext _var;
		public IReadOnlyList<PathContext> path() {
			return GetRuleContexts<PathContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public PathContext path(int i) {
			return GetRuleContext<PathContext>(i);
		}
		public IReadOnlyList<ObjectListPathContext> objectListPath() {
			return GetRuleContexts<ObjectListPathContext>();
		}
		public IReadOnlyList<VarContext> var() {
			return GetRuleContexts<VarContext>();
		}
		public ObjectListPathContext objectListPath(int i) {
			return GetRuleContext<ObjectListPathContext>(i);
		}
		public PropertyListPathNotEmptyContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public PropertyListPathNotEmptyContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
		}
		public override int RuleIndex { get { return RULE_propertyListPathNotEmpty; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPropertyListPathNotEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPropertyListPathNotEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListPathNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListPathNotEmptyContext propertyListPathNotEmpty(SparqlGraphPattern triples, ObjectVariants subject) {
		PropertyListPathNotEmptyContext _localctx = new PropertyListPathNotEmptyContext(_ctx, State, triples, subject);
		EnterRule(_localctx, 168, RULE_propertyListPathNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			switch (_input.La(1)) {
			case T__12:
			case T__11:
			case T__0:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BracketOpen:
				{
				State = 1182; _localctx._path = path();
				State = 1183; objectListPath(_localctx.triples, _localctx.subject, _localctx._path.value);
				}
				break;
			case VAR1:
			case VAR2:
				{
				State = 1185; _localctx._var = var();
				State = 1186; objectListPath(_localctx.triples,_localctx.subject, _localctx._var.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 1190; Match(T__7);
				State = 1199;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__11) | (1L << T__0))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IRIREF - 132)) | (1L << (PNAME_LN - 132)) | (1L << (PNAME_NS - 132)) | (1L << (VAR1 - 132)) | (1L << (VAR2 - 132)) | (1L << (BracketOpen - 132)))) != 0)) {
					{
					State = 1197;
					switch (_input.La(1)) {
					case T__12:
					case T__11:
					case T__0:
					case IRIREF:
					case PNAME_LN:
					case PNAME_NS:
					case BracketOpen:
						{
						State = 1191; _localctx._path = path();
						State = 1192; objectListPath(_localctx.triples, _localctx.subject, _localctx._path.value);
						}
						break;
					case VAR1:
					case VAR2:
						{
						State = 1194; _localctx._var = var();
						State = 1195; objectListPath(_localctx.triples, _localctx.subject, _localctx._var.value);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				}
				State = 1205;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListPathContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public ObjectVariants predicate;
		public ObjectPathContext objectPath(int i) {
			return GetRuleContext<ObjectPathContext>(i);
		}
		public IReadOnlyList<ObjectPathContext> objectPath() {
			return GetRuleContexts<ObjectPathContext>();
		}
		public ObjectListPathContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ObjectListPathContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
			this.predicate = predicate;
		}
		public override int RuleIndex { get { return RULE_objectListPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterObjectListPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitObjectListPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectListPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListPathContext objectListPath(SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate) {
		ObjectListPathContext _localctx = new ObjectListPathContext(_ctx, State, triples, subject, predicate);
		EnterRule(_localctx, 170, RULE_objectListPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206; objectPath(_localctx.triples, _localctx.subject, _localctx.predicate);
			State = 1211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__22) {
				{
				{
				State = 1207; Match(T__22);
				State = 1208; objectPath(_localctx.triples, _localctx.subject, _localctx.predicate);
				}
				}
				State = 1213;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPathContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public ObjectVariants predicate;
		public GraphNodePathContext _graphNodePath;
		public GraphNodePathContext graphNodePath() {
			return GetRuleContext<GraphNodePathContext>(0);
		}
		public ObjectPathContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ObjectPathContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
			this.predicate = predicate;
		}
		public override int RuleIndex { get { return RULE_objectPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterObjectPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitObjectPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPathContext objectPath(SparqlGraphPattern triples, ObjectVariants subject, ObjectVariants predicate) {
		ObjectPathContext _localctx = new ObjectPathContext(_ctx, State, triples, subject, predicate);
		EnterRule(_localctx, 172, RULE_objectPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214; _localctx._graphNodePath = graphNodePath(_localctx.triples);

			 //if(predicate is VariableNode)
			 _localctx.triples.CreateTriple(_localctx.subject, _localctx.predicate, _localctx._graphNodePath.value, q);
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public SparqlPathTranslator value;
		public PathSequenceContext _pathSequence;
		public PathSequenceContext pathSequence(int i) {
			return GetRuleContext<PathSequenceContext>(i);
		}
		public IReadOnlyList<PathSequenceContext> pathSequence() {
			return GetRuleContexts<PathSequenceContext>();
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217; _localctx._pathSequence = pathSequence();
			_localctx.value = _localctx._pathSequence.value;
			State = 1225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 1219; Match(T__1);
				State = 1220; _localctx._pathSequence = pathSequence();
				_localctx.value = _localctx.value.AddAlt(_localctx._pathSequence.value);
				}
				}
				State = 1227;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathSequenceContext : ParserRuleContext {
		public SparqlPathTranslator value;
		public PathEltOrInverseContext _pathEltOrInverse;
		public PathEltOrInverseContext pathEltOrInverse(int i) {
			return GetRuleContext<PathEltOrInverseContext>(i);
		}
		public IReadOnlyList<PathEltOrInverseContext> pathEltOrInverse() {
			return GetRuleContexts<PathEltOrInverseContext>();
		}
		public PathSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathSequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPathSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPathSequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathSequenceContext pathSequence() {
		PathSequenceContext _localctx = new PathSequenceContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_pathSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; _localctx._pathEltOrInverse = pathEltOrInverse();
			_localctx.value =  _localctx._pathEltOrInverse.value;
			State = 1236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__3) {
				{
				{
				State = 1230; Match(T__3);
				State = 1231; _localctx._pathEltOrInverse = pathEltOrInverse();
				_localctx.value = _localctx.value.AddSeq(_localctx._pathEltOrInverse.value);
				}
				}
				State = 1238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathEltOrInverseContext : ParserRuleContext {
		public SparqlPathTranslator value;
		public PathEltContext _pathElt;
		public PathEltContext pathElt() {
			return GetRuleContext<PathEltContext>(0);
		}
		public PathEltOrInverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathEltOrInverse; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPathEltOrInverse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPathEltOrInverse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathEltOrInverse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathEltOrInverseContext pathEltOrInverse() {
		PathEltOrInverseContext _localctx = new PathEltOrInverseContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_pathEltOrInverse);
		try {
			State = 1246;
			switch (_input.La(1)) {
			case T__11:
			case T__0:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BracketOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1239; _localctx._pathElt = pathElt();
				_localctx.value = _localctx._pathElt.value;
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1242; Match(T__12);
				State = 1243; _localctx._pathElt = pathElt();
				_localctx.value = _localctx._pathElt.value.Inverse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathEltContext : ParserRuleContext {
		public SparqlPathTranslator value;
		public PathPrimaryContext _pathPrimary;
		public PathPrimaryContext pathPrimary() {
			return GetRuleContext<PathPrimaryContext>(0);
		}
		public PathEltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathElt; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPathElt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPathElt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathElt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathEltContext pathElt() {
		PathEltContext _localctx = new PathEltContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_pathElt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1248; _localctx._pathPrimary = pathPrimary();
			_localctx.value = _localctx._pathPrimary.value;
			State = 1256;
			switch (_input.La(1)) {
			case T__16:
				{
				State = 1250; Match(T__16);
				_localctx.value = new SparqlPathMaybeOne(_localctx.value);
				}
				break;
			case T__21:
				{
				State = 1252; Match(T__21);
				_localctx.value = new SparqlPathZeroOrMany(_localctx.value);
				}
				break;
			case T__9:
				{
				State = 1254; Match(T__9);
				_localctx.value = new SparqlPathOneOrMany(_localctx.value);
				}
				break;
			case T__3:
			case T__1:
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case BracketOpen:
			case BracketClose:
			case ANON:
			case SquareBracketOpen:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathPrimaryContext : ParserRuleContext {
		public SparqlPathTranslator value;
		public IriContext _iri;
		public PathNegatedPropertySetContext _pathNegatedPropertySet;
		public PathContext _path;
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public PathNegatedPropertySetContext pathNegatedPropertySet() {
			return GetRuleContext<PathNegatedPropertySetContext>(0);
		}
		public PathPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathPrimary; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPathPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPathPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathPrimaryContext pathPrimary() {
		PathPrimaryContext _localctx = new PathPrimaryContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_pathPrimary);
		try {
			State = 1272;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1258; _localctx._iri = iri();
				 _localctx.value = new SparqlPathTranslator(_localctx._iri.value); 
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1261; Match(T__11);
				_localctx.value = new SparqlPathTranslator(q.Store.NodeGenerator.SpecialTypes.type);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1263; Match(T__0);
				State = 1264; _localctx._pathNegatedPropertySet = pathNegatedPropertySet();
				_localctx.value = _localctx._pathNegatedPropertySet.value;
				}
				break;
			case BracketOpen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1267; Match(BracketOpen);
				State = 1268; _localctx._path = path();
				 _localctx.value = _localctx._path.value; 
				State = 1270; Match(BracketClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNegatedPropertySetContext : ParserRuleContext {
		public SparqlPathNotTranslator value;
		public PathOneInPropertySetContext _pathOneInPropertySet;
		public IReadOnlyList<PathOneInPropertySetContext> pathOneInPropertySet() {
			return GetRuleContexts<PathOneInPropertySetContext>();
		}
		public PathOneInPropertySetContext pathOneInPropertySet(int i) {
			return GetRuleContext<PathOneInPropertySetContext>(i);
		}
		public PathNegatedPropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathNegatedPropertySet; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPathNegatedPropertySet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPathNegatedPropertySet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathNegatedPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNegatedPropertySetContext pathNegatedPropertySet() {
		PathNegatedPropertySetContext _localctx = new PathNegatedPropertySetContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_pathNegatedPropertySet);
		int _la;
		try {
			State = 1292;
			switch (_input.La(1)) {
			case T__12:
			case T__11:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1274; _localctx._pathOneInPropertySet = pathOneInPropertySet();
				 _localctx.value = new SparqlPathNotTranslator(_localctx._pathOneInPropertySet.value); 
				}
				break;
			case BracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1277; Match(BracketOpen);
				State = 1289;
				_la = _input.La(1);
				if (_la==T__12 || _la==T__11 || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IRIREF - 132)) | (1L << (PNAME_LN - 132)) | (1L << (PNAME_NS - 132)))) != 0)) {
					{
					State = 1278; _localctx._pathOneInPropertySet = pathOneInPropertySet();
					 _localctx.value = new SparqlPathNotTranslator(_localctx._pathOneInPropertySet.value); 
					State = 1286;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==T__1) {
						{
						{
						State = 1280; Match(T__1);
						State = 1281; _localctx._pathOneInPropertySet = pathOneInPropertySet();
						 _localctx.value.alt.Add(_localctx._pathOneInPropertySet.value); 
						}
						}
						State = 1288;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1291; Match(BracketClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathOneInPropertySetContext : ParserRuleContext {
		public SparqlPathTranslator value;
		public IriContext _iri;
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public PathOneInPropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathOneInPropertySet; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPathOneInPropertySet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPathOneInPropertySet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathOneInPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathOneInPropertySetContext pathOneInPropertySet() {
		PathOneInPropertySetContext _localctx = new PathOneInPropertySetContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_pathOneInPropertySet);
		try {
			State = 1307;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1294; _localctx._iri = iri();
				_localctx.value =  new SparqlPathTranslator(_localctx._iri.value);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1297; Match(T__11);
				_localctx.value =  new SparqlPathTranslator(q.Store.NodeGenerator.SpecialTypes.type);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1299; Match(T__12);
				State = 1305;
				switch (_input.La(1)) {
				case IRIREF:
				case PNAME_LN:
				case PNAME_NS:
					{
					State = 1300; _localctx._iri = iri();
					_localctx.value = new SparqlPathTranslator(_localctx._iri.value).Inverse();
					}
					break;
				case T__11:
					{
					State = 1303; Match(T__11);
					_localctx.value = new SparqlPathTranslator(q.Store.NodeGenerator.SpecialTypes.type).Inverse();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodePathContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants value;
		public CollectionPathContext _collectionPath;
		public CollectionPathContext collectionPath() {
			return GetRuleContext<CollectionPathContext>(0);
		}
		public BlankNodePropertyListPathContext blankNodePropertyListPath() {
			return GetRuleContext<BlankNodePropertyListPathContext>(0);
		}
		public TriplesNodePathContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public TriplesNodePathContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples)
			: base(parent, invokingState)
		{
			this.triples = triples;
		}
		public override int RuleIndex { get { return RULE_triplesNodePath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterTriplesNodePath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitTriplesNodePath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesNodePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesNodePathContext triplesNodePath(SparqlGraphPattern triples) {
		TriplesNodePathContext _localctx = new TriplesNodePathContext(_ctx, State, triples);
		EnterRule(_localctx, 188, RULE_triplesNodePath);
		try {
			State = 1314;
			switch (_input.La(1)) {
			case BracketOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1309; _localctx._collectionPath = collectionPath(_localctx.triples);
				 _localctx.value =  _localctx._collectionPath.value.GetNode((s, p, o)=> _localctx.triples.Add(new SparqlTriple(s, p, o, q)), q.Store.NodeGenerator); 
				}
				break;
			case SquareBracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.value = q.CreateBlankNode();
				State = 1313; blankNodePropertyListPath(_localctx.triples, _localctx.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListPathContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants subject;
		public PropertyListPathNotEmptyContext propertyListPathNotEmpty() {
			return GetRuleContext<PropertyListPathNotEmptyContext>(0);
		}
		public BlankNodePropertyListPathContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BlankNodePropertyListPathContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples, ObjectVariants subject)
			: base(parent, invokingState)
		{
			this.triples = triples;
			this.subject = subject;
		}
		public override int RuleIndex { get { return RULE_blankNodePropertyListPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyListPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyListPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyListPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListPathContext blankNodePropertyListPath(SparqlGraphPattern triples, ObjectVariants subject) {
		BlankNodePropertyListPathContext _localctx = new BlankNodePropertyListPathContext(_ctx, State, triples, subject);
		EnterRule(_localctx, 190, RULE_blankNodePropertyListPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316; Match(SquareBracketOpen);
			State = 1317; propertyListPathNotEmpty(_localctx.triples, _localctx.subject);
			State = 1318; Match(SquareBracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionPathContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public SparqlRdfCollection value;
		public GraphNodePathContext _graphNodePath;
		public IReadOnlyList<GraphNodePathContext> graphNodePath() {
			return GetRuleContexts<GraphNodePathContext>();
		}
		public GraphNodePathContext graphNodePath(int i) {
			return GetRuleContext<GraphNodePathContext>(i);
		}
		public CollectionPathContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CollectionPathContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples)
			: base(parent, invokingState)
		{
			this.triples = triples;
		}
		public override int RuleIndex { get { return RULE_collectionPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterCollectionPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitCollectionPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionPathContext collectionPath(SparqlGraphPattern triples) {
		CollectionPathContext _localctx = new CollectionPathContext(_ctx, State, triples);
		EnterRule(_localctx, 192, RULE_collectionPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320; Match(BracketOpen);
			_localctx.value = new SparqlRdfCollection();
			State = 1325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1322; _localctx._graphNodePath = graphNodePath(_localctx.triples);
				  _localctx.value.nodes.Add(_localctx._graphNodePath.value);
				}
				}
				State = 1327;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRUE - 130)) | (1L << (FALSE - 130)) | (1L << (IRIREF - 130)) | (1L << (PNAME_LN - 130)) | (1L << (PNAME_NS - 130)) | (1L << (BLANK_NODE_LABEL - 130)) | (1L << (VAR1 - 130)) | (1L << (VAR2 - 130)) | (1L << (INTEGER - 130)) | (1L << (DECIMAL - 130)) | (1L << (DOUBLE - 130)) | (1L << (INTEGER_POSITIVE - 130)) | (1L << (DECIMAL_POSITIVE - 130)) | (1L << (DOUBLE_POSITIVE - 130)) | (1L << (INTEGER_NEGATIVE - 130)) | (1L << (DECIMAL_NEGATIVE - 130)) | (1L << (DOUBLE_NEGATIVE - 130)) | (1L << (STRING_LITERAL1 - 130)) | (1L << (STRING_LITERAL2 - 130)) | (1L << (STRING_LITERAL_LONG1 - 130)) | (1L << (STRING_LITERAL_LONG2 - 130)) | (1L << (NIL - 130)) | (1L << (BracketOpen - 130)) | (1L << (ANON - 130)) | (1L << (SquareBracketOpen - 130)))) != 0) );
			State = 1329; Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodePathContext : ParserRuleContext {
		public SparqlGraphPattern triples;
		public ObjectVariants value;
		public VarOrTermContext _varOrTerm;
		public TriplesNodePathContext _triplesNodePath;
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public TriplesNodePathContext triplesNodePath() {
			return GetRuleContext<TriplesNodePathContext>(0);
		}
		public GraphNodePathContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public GraphNodePathContext(ParserRuleContext parent, int invokingState, SparqlGraphPattern triples)
			: base(parent, invokingState)
		{
			this.triples = triples;
		}
		public override int RuleIndex { get { return RULE_graphNodePath; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphNodePath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphNodePath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNodePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodePathContext graphNodePath(SparqlGraphPattern triples) {
		GraphNodePathContext _localctx = new GraphNodePathContext(_ctx, State, triples);
		EnterRule(_localctx, 194, RULE_graphNodePath);
		try {
			State = 1337;
			switch (_input.La(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331; _localctx._varOrTerm = varOrTerm();
				 _localctx.value =  _localctx._varOrTerm.value; 
				}
				break;
			case BracketOpen:
			case SquareBracketOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1334; _localctx._triplesNodePath = triplesNodePath(_localctx.triples);
				 _localctx.value = _localctx._triplesNodePath.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermContext : ParserRuleContext {
		public ObjectVariants value;
		public VarContext _var;
		public GraphTermContext _graphTerm;
		public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterVarOrTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitVarOrTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermContext varOrTerm() {
		VarOrTermContext _localctx = new VarOrTermContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_varOrTerm);
		try {
			State = 1345;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1339; _localctx._var = var();
				 _localctx.value = _localctx._var.value; 
				}
				break;
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case BLANK_NODE_LABEL:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1342; _localctx._graphTerm = graphTerm();
				  _localctx.value = _localctx._graphTerm.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrIriContext : ParserRuleContext {
		public ObjectVariants value;
		public VarContext _var;
		public IriContext _iri;
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrIri; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterVarOrIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitVarOrIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrIriContext varOrIri() {
		VarOrIriContext _localctx = new VarOrIriContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_varOrIri);
		try {
			State = 1353;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1347; _localctx._var = var();
				_localctx.value = _localctx._var.value;
				}
				break;
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1350; _localctx._iri = iri();
				_localctx.value = _localctx._iri.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public VariableNode value;
		public VarStringContext _varString;
		public VarStringContext varString() {
			return GetRuleContext<VarStringContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355; _localctx._varString = varString();
			_localctx.value = q.GetVariable((_localctx._varString!=null?_input.GetText(_localctx._varString.start,_localctx._varString.stop):null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStringContext : ParserRuleContext {
		public ITerminalNode VAR2() { return GetToken(sparq11lTranslatorParser.VAR2, 0); }
		public ITerminalNode VAR1() { return GetToken(sparq11lTranslatorParser.VAR1, 0); }
		public VarStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varString; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterVarString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitVarString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStringContext varString() {
		VarStringContext _localctx = new VarStringContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_varString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			_la = _input.La(1);
			if ( !(_la==VAR1 || _la==VAR2) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphTermContext : ParserRuleContext {
		public ObjectVariants value;
		public IriContext _iri;
		public RDFLiteralContext _rDFLiteral;
		public NumericLiteralContext _numericLiteral;
		public BooleanLiteralContext _booleanLiteral;
		public BlankNodeContext _blankNode;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(sparq11lTranslatorParser.NIL, 0); }
		public BlankNodeContext blankNode() {
			return GetRuleContext<BlankNodeContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public GraphTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterGraphTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitGraphTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphTermContext graphTerm() {
		GraphTermContext _localctx = new GraphTermContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_graphTerm);
		try {
			State = 1377;
			switch (_input.La(1)) {
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360; _localctx._iri = iri();
				_localctx.value = _localctx._iri.value;
				}
				break;
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1363; _localctx._rDFLiteral = rDFLiteral();
				_localctx.value = _localctx._rDFLiteral.value;
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1366; _localctx._numericLiteral = numericLiteral();
				_localctx.value = _localctx._numericLiteral.value;
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1369; _localctx._booleanLiteral = booleanLiteral();
				_localctx.value = _localctx._booleanLiteral.value;
				}
				break;
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1372; _localctx._blankNode = blankNode();
				_localctx.value = _localctx._blankNode.value;
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1375; Match(NIL);
				_localctx.value =  q.Store.NodeGenerator.SpecialTypes.nil;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public ConditionalAndExpressionContext _conditionalAndExpression;
		public ConditionalAndExpressionContext r;
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public IReadOnlyList<ConditionalAndExpressionContext> conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379; _localctx._conditionalAndExpression = conditionalAndExpression();
			 _localctx.value = _localctx._conditionalAndExpression.value; 
			State = 1387;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 1381; Match(T__5);
				State = 1382; _localctx.r = _localctx._conditionalAndExpression = conditionalAndExpression();
				_localctx.value = new SparqlOrExpression(_localctx.value, _localctx.r.value);
				}
				}
				State = 1389;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public RelationalExpressionContext _relationalExpression;
		public RelationalExpressionContext r;
		public IReadOnlyList<RelationalExpressionContext> relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390; _localctx._relationalExpression = relationalExpression();
			 _localctx.value = _localctx._relationalExpression.value; 
			State = 1398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 1392; Match(T__6);
				State = 1393; _localctx.r = _localctx._relationalExpression = relationalExpression();
				_localctx.value = new SparqlAndExpression(_localctx.value, _localctx.r.value);
				}
				}
				State = 1400;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public NumericExpressionContext _numericExpression;
		public NumericExpressionContext r;
		public ExpressionListContext _expressionList;
		public ITerminalNode IN() { return GetToken(sparq11lTranslatorParser.IN, 0); }
		public IReadOnlyList<NumericExpressionContext> numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(sparq11lTranslatorParser.NOT, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_relationalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401; _localctx._numericExpression = numericExpression();
			 _localctx.value = _localctx._numericExpression.value; 
			State = 1436;
			switch (_input.La(1)) {
			case T__8:
				{
				State = 1403; Match(T__8);
				State = 1404; _localctx.r = _localctx._numericExpression = numericExpression();
				_localctx.value = new SparqlEqualsExpression(_localctx.value, _localctx.r.value, q.Store.NodeGenerator);
				}
				break;
			case T__18:
				{
				State = 1407; Match(T__18);
				State = 1408; _localctx.r = _localctx._numericExpression = numericExpression();
				_localctx.value =  new SparqlNotEqualsExpression(_localctx.value, _localctx.r.value, q.Store.NodeGenerator);
				}
				break;
			case T__19:
				{
				State = 1411; Match(T__19);
				State = 1412; _localctx.r = _localctx._numericExpression = numericExpression();
				_localctx.value = SparqlExpression.Smaller(_localctx.value, _localctx.r.value);
				}
				break;
			case T__4:
				{
				State = 1415; Match(T__4);
				State = 1416; _localctx.r = _localctx._numericExpression = numericExpression();
				_localctx.value = SparqlExpression.Greather(_localctx.value, _localctx.r.value);
				}
				break;
			case T__17:
				{
				State = 1419; Match(T__17);
				State = 1420; _localctx.r = _localctx._numericExpression = numericExpression();
				_localctx.value = SparqlExpression.SmallerOrEquals(_localctx.value, _localctx.r.value);
				}
				break;
			case T__2:
				{
				State = 1423; Match(T__2);
				State = 1424; _localctx.r = _localctx._numericExpression = numericExpression();
				_localctx.value = SparqlExpression.GreatherOrEquals(_localctx.value, _localctx.r.value);
				}
				break;
			case IN:
				{
				State = 1427; Match(IN);
				State = 1428; _localctx._expressionList = expressionList();
				_localctx.value = _localctx.value.InCollection(_localctx._expressionList.value);
				}
				break;
			case NOT:
				{
				State = 1431; Match(NOT);
				State = 1432; Match(IN);
				State = 1433; _localctx._expressionList = expressionList();
				_localctx.value = _localctx.value.NotInCollection(_localctx._expressionList.value);
				}
				break;
			case T__22:
			case T__7:
			case T__6:
			case T__5:
			case AS:
			case BracketClose:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public MultiplicativeExpressionContext _multiplicativeExpression;
		public MultiplicativeExpressionContext r;
		public NumericLiteralPositiveContext _numericLiteralPositive;
		public NumericLiteralNegativeContext _numericLiteralNegative;
		public UnaryExpressionContext _unaryExpression;
		public IReadOnlyList<NumericLiteralPositiveContext> numericLiteralPositive() {
			return GetRuleContexts<NumericLiteralPositiveContext>();
		}
		public IReadOnlyList<UnaryExpressionContext> unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public NumericLiteralPositiveContext numericLiteralPositive(int i) {
			return GetRuleContext<NumericLiteralPositiveContext>(i);
		}
		public NumericLiteralNegativeContext numericLiteralNegative(int i) {
			return GetRuleContext<NumericLiteralNegativeContext>(i);
		}
		public IReadOnlyList<NumericLiteralNegativeContext> numericLiteralNegative() {
			return GetRuleContexts<NumericLiteralNegativeContext>();
		}
		public IReadOnlyList<MultiplicativeExpressionContext> multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNumericExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNumericExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_numericExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438; _localctx._multiplicativeExpression = multiplicativeExpression();
			 _localctx.value = _localctx._multiplicativeExpression.value; 
			State = 1474;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__20 || _la==T__9 || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (INTEGER_POSITIVE - 142)) | (1L << (DECIMAL_POSITIVE - 142)) | (1L << (DOUBLE_POSITIVE - 142)) | (1L << (INTEGER_NEGATIVE - 142)) | (1L << (DECIMAL_NEGATIVE - 142)) | (1L << (DOUBLE_NEGATIVE - 142)))) != 0)) {
				{
				State = 1472;
				switch (_input.La(1)) {
				case T__9:
					{
					State = 1440; Match(T__9);
					State = 1441; _localctx.r = _localctx._multiplicativeExpression = multiplicativeExpression();
					 _localctx.value += _localctx.r.value; 
					}
					break;
				case T__20:
					{
					State = 1444; Match(T__20);
					State = 1445; _localctx.r = _localctx._multiplicativeExpression = multiplicativeExpression();
					 _localctx.value -= _localctx.r.value; 
					}
					break;
				case INTEGER_POSITIVE:
				case DECIMAL_POSITIVE:
				case DOUBLE_POSITIVE:
				case INTEGER_NEGATIVE:
				case DECIMAL_NEGATIVE:
				case DOUBLE_NEGATIVE:
					{
					 SparqlExpression multExp;
					State = 1455;
					switch (_input.La(1)) {
					case INTEGER_POSITIVE:
					case DECIMAL_POSITIVE:
					case DOUBLE_POSITIVE:
						{
						State = 1449; _localctx._numericLiteralPositive = numericLiteralPositive();
						multExp = new SparqlLiteralExpression(_localctx._numericLiteralPositive.value); 
						}
						break;
					case INTEGER_NEGATIVE:
					case DECIMAL_NEGATIVE:
					case DOUBLE_NEGATIVE:
						{
						State = 1452; _localctx._numericLiteralNegative = numericLiteralNegative();
						 multExp = new SparqlLiteralExpression(_localctx._numericLiteralNegative.value); 
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1467;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==T__21 || _la==T__3) {
						{
						State = 1465;
						switch (_input.La(1)) {
						case T__21:
							{
							{
							State = 1457; Match(T__21);
							State = 1458; _localctx._unaryExpression = unaryExpression();
							multExp *= _localctx._unaryExpression.value; 
							}
							}
							break;
						case T__3:
							{
							{
							State = 1461; Match(T__3);
							State = 1462; _localctx._unaryExpression = unaryExpression();
							 multExp /= _localctx._unaryExpression.value; 
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 1469;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					 _localctx.value += multExp; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1476;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public UnaryExpressionContext _unaryExpression;
		public UnaryExpressionContext r;
		public IReadOnlyList<UnaryExpressionContext> unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477; _localctx._unaryExpression = unaryExpression();
			 _localctx.value = _localctx._unaryExpression.value; 
			State = 1489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__21 || _la==T__3) {
				{
				State = 1487;
				switch (_input.La(1)) {
				case T__21:
					{
					State = 1479; Match(T__21);
					State = 1480; _localctx.r = _localctx._unaryExpression = unaryExpression();
					_localctx.value = _localctx.value*_localctx.r.value;
					}
					break;
				case T__3:
					{
					State = 1483; Match(T__3);
					State = 1484; _localctx.r = _localctx._unaryExpression = unaryExpression();
					_localctx.value = _localctx.value/_localctx.r.value;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1491;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public PrimaryExpressionContext _primaryExpression;
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_unaryExpression);
		try {
			State = 1507;
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1492; Match(T__0);
				State = 1493; _localctx._primaryExpression = primaryExpression();
				 _localctx.value = !_localctx._primaryExpression.value; 
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1496; Match(T__9);
				State = 1497; _localctx._primaryExpression = primaryExpression();
				 _localctx.value = _localctx._primaryExpression.value; 
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1500; Match(T__20);
				State = 1501; _localctx._primaryExpression = primaryExpression();
				 _localctx.value = -_localctx._primaryExpression.value; 
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SAMETERM:
			case ISIRI:
			case ISURI:
			case ISBLANK:
			case ISLITERAL:
			case ISNUMERIC:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case BracketOpen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1504; _localctx._primaryExpression = primaryExpression();
				 _localctx.value = _localctx._primaryExpression.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public IriStringContext _iriString;
		public ArgListContext _argList;
		public RDFLiteralContext _rDFLiteral;
		public NumericLiteralContext _numericLiteral;
		public BooleanLiteralContext _booleanLiteral;
		public VarContext _var;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public IriStringContext iriString() {
			return GetRuleContext<IriStringContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_primaryExpression);
		int _la;
		try {
			State = 1534;
			switch (_input.La(1)) {
			case BracketOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1509; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value = _localctx._brackettedExpression.value;
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SAMETERM:
			case ISIRI:
			case ISURI:
			case ISBLANK:
			case ISLITERAL:
			case ISNUMERIC:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1512; _localctx._builtInCall = builtInCall();
				_localctx.value = _localctx._builtInCall.value;
				}
				break;
			case IRIREF:
			case PNAME_LN:
			case PNAME_NS:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1515; _localctx._iriString = iriString();
				_localctx.value = new SparqlIriExpression(_localctx._iriString.value, q.Store.NodeGenerator);
				State = 1520;
				_la = _input.La(1);
				if (_la==NIL || _la==BracketOpen) {
					{
					State = 1517; _localctx._argList = argList();
					_localctx.value = new SparqlFunctionCall(_localctx._iriString.value,  _localctx._argList.value);
					}
				}

				}
				}
				break;
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1522; _localctx._rDFLiteral = rDFLiteral();
				_localctx.value = new SparqlLiteralExpression(_localctx._rDFLiteral.value);
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1525; _localctx._numericLiteral = numericLiteral();
				_localctx.value = new SparqlNumLiteralExpression(_localctx._numericLiteral.value);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1528; _localctx._booleanLiteral = booleanLiteral();
				_localctx.value = new SparqlBoolLiteralExpression(_localctx._booleanLiteral.value);
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1531; _localctx._var = var();
				_localctx.value = new SparqlVarExpression(_localctx._var.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrackettedExpressionContext : ParserRuleContext {
		public SparqlExpression value;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BrackettedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brackettedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBrackettedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBrackettedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackettedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrackettedExpressionContext brackettedExpression() {
		BrackettedExpressionContext _localctx = new BrackettedExpressionContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_brackettedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536; Match(BracketOpen);
			State = 1537; _localctx._expression = expression();
			State = 1538; Match(BracketClose);
			 _localctx.value = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltInCallContext : ParserRuleContext {
		public SparqlExpression value;
		public AggregateContext _aggregate;
		public ExpressionContext _expression;
		public ExpressionContext lit;
		public ExpressionContext lang;
		public VarContext _var;
		public ExpressionListContext _expressionList;
		public SubstringExpressionContext _substringExpression;
		public StrReplaceExpressionContext _strReplaceExpression;
		public ExpressionContext pattern;
		public ExpressionContext condit;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext type;
		public ExpressionContext t1;
		public ExpressionContext t2;
		public RegexExpressionContext _regexExpression;
		public ExistsFuncContext _existsFunc;
		public NotExistsFuncContext _notExistsFunc;
		public ITerminalNode SHA256() { return GetToken(sparq11lTranslatorParser.SHA256, 0); }
		public ITerminalNode COALESCE() { return GetToken(sparq11lTranslatorParser.COALESCE, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode RAND() { return GetToken(sparq11lTranslatorParser.RAND, 0); }
		public ITerminalNode NIL() { return GetToken(sparq11lTranslatorParser.NIL, 0); }
		public ITerminalNode ABS() { return GetToken(sparq11lTranslatorParser.ABS, 0); }
		public ITerminalNode SAMETERM() { return GetToken(sparq11lTranslatorParser.SAMETERM, 0); }
		public ITerminalNode CONTAINS() { return GetToken(sparq11lTranslatorParser.CONTAINS, 0); }
		public ITerminalNode IF() { return GetToken(sparq11lTranslatorParser.IF, 0); }
		public ITerminalNode YEAR() { return GetToken(sparq11lTranslatorParser.YEAR, 0); }
		public ITerminalNode SHA512() { return GetToken(sparq11lTranslatorParser.SHA512, 0); }
		public ITerminalNode STR() { return GetToken(sparq11lTranslatorParser.STR, 0); }
		public ITerminalNode SHA384() { return GetToken(sparq11lTranslatorParser.SHA384, 0); }
		public ITerminalNode TZ() { return GetToken(sparq11lTranslatorParser.TZ, 0); }
		public ITerminalNode STRBEFORE() { return GetToken(sparq11lTranslatorParser.STRBEFORE, 0); }
		public ITerminalNode LANG() { return GetToken(sparq11lTranslatorParser.LANG, 0); }
		public ITerminalNode ISBLANK() { return GetToken(sparq11lTranslatorParser.ISBLANK, 0); }
		public ITerminalNode UUID() { return GetToken(sparq11lTranslatorParser.UUID, 0); }
		public ExistsFuncContext existsFunc() {
			return GetRuleContext<ExistsFuncContext>(0);
		}
		public ITerminalNode URI() { return GetToken(sparq11lTranslatorParser.URI, 0); }
		public ITerminalNode ISIRI() { return GetToken(sparq11lTranslatorParser.ISIRI, 0); }
		public ITerminalNode STRLEN() { return GetToken(sparq11lTranslatorParser.STRLEN, 0); }
		public ITerminalNode ROUND() { return GetToken(sparq11lTranslatorParser.ROUND, 0); }
		public RegexExpressionContext regexExpression() {
			return GetRuleContext<RegexExpressionContext>(0);
		}
		public ITerminalNode STRLANG() { return GetToken(sparq11lTranslatorParser.STRLANG, 0); }
		public NotExistsFuncContext notExistsFunc() {
			return GetRuleContext<NotExistsFuncContext>(0);
		}
		public ITerminalNode CEIL() { return GetToken(sparq11lTranslatorParser.CEIL, 0); }
		public ITerminalNode NOW() { return GetToken(sparq11lTranslatorParser.NOW, 0); }
		public ITerminalNode STRDT() { return GetToken(sparq11lTranslatorParser.STRDT, 0); }
		public ITerminalNode LCASE() { return GetToken(sparq11lTranslatorParser.LCASE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode ISLITERAL() { return GetToken(sparq11lTranslatorParser.ISLITERAL, 0); }
		public ITerminalNode IRI() { return GetToken(sparq11lTranslatorParser.IRI, 0); }
		public ITerminalNode MONTH() { return GetToken(sparq11lTranslatorParser.MONTH, 0); }
		public ITerminalNode MINUTES() { return GetToken(sparq11lTranslatorParser.MINUTES, 0); }
		public SubstringExpressionContext substringExpression() {
			return GetRuleContext<SubstringExpressionContext>(0);
		}
		public ITerminalNode DATATYPE() { return GetToken(sparq11lTranslatorParser.DATATYPE, 0); }
		public ITerminalNode TIMEZONE() { return GetToken(sparq11lTranslatorParser.TIMEZONE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode UCASE() { return GetToken(sparq11lTranslatorParser.UCASE, 0); }
		public ITerminalNode HOURS() { return GetToken(sparq11lTranslatorParser.HOURS, 0); }
		public ITerminalNode ISNUMERIC() { return GetToken(sparq11lTranslatorParser.ISNUMERIC, 0); }
		public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		public ITerminalNode ENCODE_FOR_URI() { return GetToken(sparq11lTranslatorParser.ENCODE_FOR_URI, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode STRAFTER() { return GetToken(sparq11lTranslatorParser.STRAFTER, 0); }
		public ITerminalNode MD5() { return GetToken(sparq11lTranslatorParser.MD5, 0); }
		public ITerminalNode BNODE() { return GetToken(sparq11lTranslatorParser.BNODE, 0); }
		public ITerminalNode DAY() { return GetToken(sparq11lTranslatorParser.DAY, 0); }
		public ITerminalNode LANGMATCHES() { return GetToken(sparq11lTranslatorParser.LANGMATCHES, 0); }
		public ITerminalNode STRSTARTS() { return GetToken(sparq11lTranslatorParser.STRSTARTS, 0); }
		public ITerminalNode SECONDS() { return GetToken(sparq11lTranslatorParser.SECONDS, 0); }
		public ITerminalNode BOUND() { return GetToken(sparq11lTranslatorParser.BOUND, 0); }
		public ITerminalNode STRUUID() { return GetToken(sparq11lTranslatorParser.STRUUID, 0); }
		public ITerminalNode ISURI() { return GetToken(sparq11lTranslatorParser.ISURI, 0); }
		public ITerminalNode CONCAT() { return GetToken(sparq11lTranslatorParser.CONCAT, 0); }
		public ITerminalNode SHA1() { return GetToken(sparq11lTranslatorParser.SHA1, 0); }
		public ITerminalNode STRENDS() { return GetToken(sparq11lTranslatorParser.STRENDS, 0); }
		public StrReplaceExpressionContext strReplaceExpression() {
			return GetRuleContext<StrReplaceExpressionContext>(0);
		}
		public ITerminalNode FLOOR() { return GetToken(sparq11lTranslatorParser.FLOOR, 0); }
		public BuiltInCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBuiltInCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBuiltInCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInCallContext builtInCall() {
		BuiltInCallContext _localctx = new BuiltInCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_builtInCall);
		try {
			State = 1863;
			switch (_input.La(1)) {
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1541; _localctx._aggregate = aggregate();
				 _localctx.value = _localctx._aggregate.value; 
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1544; Match(STR);
				State = 1545; Match(BracketOpen);
				State = 1546; _localctx._expression = expression();
				State = 1547; Match(BracketClose);
				 _localctx.value = new SparqlToString(_localctx._expression.value); 
				}
				break;
			case LANG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1550; Match(LANG);
				State = 1551; Match(BracketOpen);
				State = 1552; _localctx._expression = expression();
				State = 1553; Match(BracketClose);
				 _localctx.value = new SparqlLang(_localctx._expression.value); 
				}
				break;
			case LANGMATCHES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1556; Match(LANGMATCHES);
				State = 1557; Match(BracketOpen);
				State = 1558; _localctx.lit = expression();
				State = 1559; Match(T__22);
				State = 1560; _localctx.lang = expression();
				State = 1561; Match(BracketClose);
				 _localctx.value = new SparqlLangMatches(_localctx.lit.value, _localctx.lang.value); 
				}
				break;
			case DATATYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1564; Match(DATATYPE);
				State = 1565; Match(BracketOpen);
				State = 1566; _localctx._expression = expression();
				State = 1567; Match(BracketClose);
				 _localctx.value = new SparqlDataType(_localctx._expression.value); 
				}
				break;
			case BOUND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1570; Match(BOUND);
				State = 1571; Match(BracketOpen);
				State = 1572; _localctx._var = var();
				State = 1573; Match(BracketClose);
				 _localctx.value = new SparqlBound(_localctx._var.value); 
				}
				break;
			case IRI:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1576; Match(IRI);
				State = 1577; Match(BracketOpen);
				State = 1578; _localctx._expression = expression();
				State = 1579; Match(BracketClose);
				 _localctx.value = new SparqlUri(_localctx._expression.value, q); 
				}
				break;
			case URI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1582; Match(URI);
				State = 1583; Match(BracketOpen);
				State = 1584; _localctx._expression = expression();
				State = 1585; Match(BracketClose);
				 _localctx.value = new SparqlUri(_localctx._expression.value,q); 
				}
				break;
			case BNODE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1588; Match(BNODE);
				State = 1596;
				switch (_input.La(1)) {
				case BracketOpen:
					{
					State = 1589; Match(BracketOpen);
					State = 1590; _localctx._expression = expression();
					State = 1591; Match(BracketClose);
					 _localctx.value = new SparqlBnode(_localctx._expression.value,q); 
					}
					break;
				case NIL:
					{
					State = 1594; Match(NIL);
					 _localctx.value = new SparqlBnode(q); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RAND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1598; Match(RAND);
				State = 1599; Match(NIL);
				 _localctx.value = new SparqlRand(); 
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1601; Match(ABS);
				State = 1602; Match(BracketOpen);
				State = 1603; _localctx._expression = expression();
				State = 1604; Match(BracketClose);
				 _localctx.value = new SparqlAbs(_localctx._expression.value); 
				}
				break;
			case CEIL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1607; Match(CEIL);
				State = 1608; Match(BracketOpen);
				State = 1609; _localctx._expression = expression();
				State = 1610; Match(BracketClose);
				 _localctx.value = new SparqlCeil(_localctx._expression.value); 
				}
				break;
			case FLOOR:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1613; Match(FLOOR);
				State = 1614; Match(BracketOpen);
				State = 1615; _localctx._expression = expression();
				State = 1616; Match(BracketClose);
				 _localctx.value = new SparqlFloor(_localctx._expression.value); 
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1619; Match(ROUND);
				State = 1620; Match(BracketOpen);
				State = 1621; _localctx._expression = expression();
				State = 1622; Match(BracketClose);
				 _localctx.value = new SparqlRound(_localctx._expression.value); 
				}
				break;
			case CONCAT:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1625; Match(CONCAT);
				State = 1626; _localctx._expressionList = expressionList();
				 _localctx.value = new SparqlConcat(_localctx._expressionList.value,q.Store.NodeGenerator); 
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1629; _localctx._substringExpression = substringExpression();
				 _localctx.value = _localctx._substringExpression.value; 
				}
				break;
			case STRLEN:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1632; Match(STRLEN);
				State = 1633; Match(BracketOpen);
				State = 1634; _localctx._expression = expression();
				State = 1635; Match(BracketClose);
				 _localctx.value = new SparqlStrLength(_localctx._expression.value); 
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1638; _localctx._strReplaceExpression = strReplaceExpression();
				 _localctx.value = _localctx._strReplaceExpression.value; 
				}
				break;
			case UCASE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1641; Match(UCASE);
				State = 1642; Match(BracketOpen);
				State = 1643; _localctx._expression = expression();
				State = 1644; Match(BracketClose);
				 _localctx.value = new SparqlUcase(_localctx._expression.value); 
				}
				break;
			case LCASE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1647; Match(LCASE);
				State = 1648; Match(BracketOpen);
				State = 1649; _localctx._expression = expression();
				State = 1650; Match(BracketClose);
				 _localctx.value = new SparqlLCase(_localctx._expression.value); 
				}
				break;
			case ENCODE_FOR_URI:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1653; Match(ENCODE_FOR_URI);
				State = 1654; Match(BracketOpen);
				State = 1655; _localctx._expression = expression();
				State = 1656; Match(BracketClose);
				 _localctx.value = new SparqlEncodeForUri(_localctx._expression.value, q); 
				}
				break;
			case CONTAINS:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1659; Match(CONTAINS);
				State = 1660; Match(BracketOpen);
				State = 1661; _localctx.lit = expression();
				State = 1662; Match(T__22);
				State = 1663; _localctx.pattern = expression();
				State = 1664; Match(BracketClose);
				 _localctx.value = new SparqlContains(_localctx.lit.value, _localctx.pattern.value); 
				}
				break;
			case STRSTARTS:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1667; Match(STRSTARTS);
				State = 1668; Match(BracketOpen);
				State = 1669; _localctx.lit = expression();
				State = 1670; Match(T__22);
				State = 1671; _localctx.pattern = expression();
				State = 1672; Match(BracketClose);
				 _localctx.value = new SparqlStrStarts(_localctx.lit.value, _localctx.pattern.value); 
				}
				break;
			case STRENDS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1675; Match(STRENDS);
				State = 1676; Match(BracketOpen);
				State = 1677; _localctx.lit = expression();
				State = 1678; Match(T__22);
				State = 1679; _localctx.pattern = expression();
				State = 1680; Match(BracketClose);
				 _localctx.value = new SparqlStrEnds(_localctx.lit.value, _localctx.pattern.value); 
				}
				break;
			case STRBEFORE:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1683; Match(STRBEFORE);
				State = 1684; Match(BracketOpen);
				State = 1685; _localctx.lit = expression();
				State = 1686; Match(T__22);
				State = 1687; _localctx.pattern = expression();
				State = 1688; Match(BracketClose);
				 _localctx.value = new SparqlStrBefore(_localctx.lit.value, _localctx.pattern.value); 
				}
				break;
			case STRAFTER:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1691; Match(STRAFTER);
				State = 1692; Match(BracketOpen);
				State = 1693; _localctx.lit = expression();
				State = 1694; Match(T__22);
				State = 1695; _localctx.pattern = expression();
				State = 1696; Match(BracketClose);
				 _localctx.value = new SparqlStrAfter(_localctx.lit.value, _localctx.pattern.value); 
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1699; Match(YEAR);
				State = 1700; Match(BracketOpen);
				State = 1701; _localctx._expression = expression();
				State = 1702; Match(BracketClose);
				 _localctx.value = new SparqlYear(_localctx._expression.value); 
				}
				break;
			case MONTH:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1705; Match(MONTH);
				State = 1706; Match(BracketOpen);
				State = 1707; _localctx._expression = expression();
				State = 1708; Match(BracketClose);
				 _localctx.value = new SparqlMonth(_localctx._expression.value); 
				}
				break;
			case DAY:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1711; Match(DAY);
				State = 1712; Match(BracketOpen);
				State = 1713; _localctx._expression = expression();
				State = 1714; Match(BracketClose);
				 _localctx.value = new SparqlDay(_localctx._expression.value); 
				}
				break;
			case HOURS:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1717; Match(HOURS);
				State = 1718; Match(BracketOpen);
				State = 1719; _localctx._expression = expression();
				State = 1720; Match(BracketClose);
				 _localctx.value = new SparqlHours(_localctx._expression.value); 
				}
				break;
			case MINUTES:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1723; Match(MINUTES);
				State = 1724; Match(BracketOpen);
				State = 1725; _localctx._expression = expression();
				State = 1726; Match(BracketClose);
				 _localctx.value = new SparqlMinutes(_localctx._expression.value); 
				}
				break;
			case SECONDS:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1729; Match(SECONDS);
				State = 1730; Match(BracketOpen);
				State = 1731; _localctx._expression = expression();
				State = 1732; Match(BracketClose);
				 _localctx.value = new SparqlSeconds(_localctx._expression.value); 
				}
				break;
			case TIMEZONE:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1735; Match(TIMEZONE);
				State = 1736; Match(BracketOpen);
				State = 1737; _localctx._expression = expression();
				State = 1738; Match(BracketClose);
				 _localctx.value = new SparqlTimeZone(_localctx._expression.value); 
				}
				break;
			case TZ:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1741; Match(TZ);
				State = 1742; Match(BracketOpen);
				State = 1743; _localctx._expression = expression();
				State = 1744; Match(BracketClose);
				 _localctx.value = new SparqlTz(_localctx._expression.value); 
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1747; Match(NOW);
				State = 1748; Match(NIL);
				 _localctx.value = new SparqlNow(); 
				}
				break;
			case UUID:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1750; Match(UUID);
				State = 1751; Match(NIL);
				 _localctx.value = new SparqlUuid(); 
				}
				break;
			case STRUUID:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1753; Match(STRUUID);
				State = 1754; Match(NIL);
				 _localctx.value = new SparqlStrUuid(); 
				}
				break;
			case MD5:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1756; Match(MD5);
				State = 1757; Match(BracketOpen);
				State = 1758; _localctx._expression = expression();
				State = 1759; Match(BracketClose);
				 _localctx.value = new SparqlMD5(_localctx._expression.value); 
				}
				break;
			case SHA1:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1762; Match(SHA1);
				State = 1763; Match(BracketOpen);
				State = 1764; _localctx._expression = expression();
				State = 1765; Match(BracketClose);
				 _localctx.value = new SparqlSHA1(_localctx._expression.value); 
				}
				break;
			case SHA256:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1768; Match(SHA256);
				State = 1769; Match(BracketOpen);
				State = 1770; _localctx._expression = expression();
				State = 1771; Match(BracketClose);
				 _localctx.value = new SparqlSHA256(_localctx._expression.value); 
				}
				break;
			case SHA384:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1774; Match(SHA384);
				State = 1775; Match(BracketOpen);
				State = 1776; _localctx._expression = expression();
				State = 1777; Match(BracketClose);
				 _localctx.value = new SparqlSHA384(_localctx._expression.value); 
				}
				break;
			case SHA512:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1780; Match(SHA512);
				State = 1781; Match(BracketOpen);
				State = 1782; _localctx._expression = expression();
				State = 1783; Match(BracketClose);
				 _localctx.value = new SparqlSHA512(_localctx._expression.value); 
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1786; Match(COALESCE);
				State = 1787; _localctx._expressionList = expressionList();
				 _localctx.value = new SparqlCoalesce(_localctx._expressionList.value); 
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1790; Match(IF);
				State = 1791; Match(BracketOpen);
				State = 1792; _localctx.condit = expression();
				State = 1793; Match(T__22);
				State = 1794; _localctx.ifTrue = expression();
				State = 1795; Match(T__22);
				State = 1796; _localctx.ifFalse = expression();
				State = 1797; Match(BracketClose);
				 _localctx.value = new SparqlIf(_localctx.condit.value, _localctx.ifTrue.value, _localctx.ifFalse.value); 
				}
				break;
			case STRLANG:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1800; Match(STRLANG);
				State = 1801; Match(BracketOpen);
				State = 1802; _localctx.lit = expression();
				State = 1803; Match(T__22);
				State = 1804; _localctx.lang = expression();
				State = 1805; Match(BracketClose);
				 _localctx.value = new SparqlStringLang(_localctx.lit.value, _localctx.lang.value); 
				}
				break;
			case STRDT:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1808; Match(STRDT);
				State = 1809; Match(BracketOpen);
				State = 1810; _localctx.lit = expression();
				State = 1811; Match(T__22);
				State = 1812; _localctx.type = expression();
				State = 1813; Match(BracketClose);
				 _localctx.value = new SparqlStrDataType(_localctx.lit.value, _localctx.type.value,q.Store.NodeGenerator); 
				}
				break;
			case SAMETERM:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1816; Match(SAMETERM);
				State = 1817; Match(BracketOpen);
				State = 1818; _localctx.t1 = expression();
				State = 1819; Match(T__22);
				State = 1820; _localctx.t2 = expression();
				State = 1821; Match(BracketClose);
				 _localctx.value = new SparqlSameTerm(_localctx.t1.value, _localctx.t2.value); 
				}
				break;
			case ISIRI:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1824; Match(ISIRI);
				State = 1825; Match(BracketOpen);
				State = 1826; _localctx._expression = expression();
				State = 1827; Match(BracketClose);
				 _localctx.value = new SparqlIsIri(_localctx._expression.value); 
				}
				break;
			case ISURI:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1830; Match(ISURI);
				State = 1831; Match(BracketOpen);
				State = 1832; _localctx._expression = expression();
				State = 1833; Match(BracketClose);
				 _localctx.value = new SparqlIsIri(_localctx._expression.value); 
				}
				break;
			case ISBLANK:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1836; Match(ISBLANK);
				State = 1837; Match(BracketOpen);
				State = 1838; _localctx._expression = expression();
				State = 1839; Match(BracketClose);
				 _localctx.value = new SparqlIsBlank(_localctx._expression.value); 
				}
				break;
			case ISLITERAL:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1842; Match(ISLITERAL);
				State = 1843; Match(BracketOpen);
				State = 1844; _localctx._expression = expression();
				State = 1845; Match(BracketClose);
				 _localctx.value = new SparqlIsLiteral(_localctx._expression.value); 
				}
				break;
			case ISNUMERIC:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1848; Match(ISNUMERIC);
				State = 1849; Match(BracketOpen);
				State = 1850; _localctx._expression = expression();
				State = 1851; Match(BracketClose);
				 _localctx.value = new SparqlIsNum(_localctx._expression.value); 
				}
				break;
			case REGEX:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1854; _localctx._regexExpression = regexExpression();
				 _localctx.value = _localctx._regexExpression.value; 
				}
				break;
			case EXISTS:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1857; _localctx._existsFunc = existsFunc();
				 _localctx.value = _localctx._existsFunc.value; 
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1860; _localctx._notExistsFunc = notExistsFunc();
				 _localctx.value = _localctx._notExistsFunc.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExpressionContext : ParserRuleContext {
		public SparqlRegexExpression value;
		public ExpressionContext v;
		public ExpressionContext regex;
		public ExpressionContext parameters;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode REGEX() { return GetToken(sparq11lTranslatorParser.REGEX, 0); }
		public RegexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterRegexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitRegexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExpressionContext regexExpression() {
		RegexExpressionContext _localctx = new RegexExpressionContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_regexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865; Match(REGEX);
			_localctx.value = new SparqlRegexExpression();
			State = 1867; Match(BracketOpen);
			State = 1868; _localctx.v = expression();
			_localctx.value.SetVariableExpression(_localctx.v.value);
			State = 1870; Match(T__22);
			State = 1871; _localctx.regex = expression();
			State = 1876;
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 1872; Match(T__22);
				State = 1873; _localctx.parameters = expression();
				_localctx.value.SetParameters(_localctx.parameters.value);
				}
			}

			State = 1878; Match(BracketClose);
			_localctx.value.SetRegex(_localctx.regex.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringExpressionContext : ParserRuleContext {
		public SparqlSubstringExpression value;
		public ExpressionContext lit;
		public ExpressionContext startExp;
		public ExpressionContext length;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode SUBSTR() { return GetToken(sparq11lTranslatorParser.SUBSTR, 0); }
		public SubstringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterSubstringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitSubstringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstringExpressionContext substringExpression() {
		SubstringExpressionContext _localctx = new SubstringExpressionContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_substringExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1881; Match(SUBSTR);
			_localctx.value = new SparqlSubstringExpression();
			State = 1883; Match(BracketOpen);
			State = 1884; _localctx.lit = expression();
			_localctx.value.SetString(_localctx.lit.value);
			State = 1886; Match(T__22);
			State = 1887; _localctx.startExp = expression();
			_localctx.value.SetStartPosition(_localctx.startExp.value);
			State = 1893;
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 1889; Match(T__22);
				State = 1890; _localctx.length = expression();
				_localctx.value.SetLength(_localctx.length.value);
				}
			}

			State = 1895; Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrReplaceExpressionContext : ParserRuleContext {
		public SparqlReplaceStrExpression value;
		public ExpressionContext lit;
		public ExpressionContext pattern;
		public ExpressionContext replacement;
		public ExpressionContext parameters;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode REPLACE() { return GetToken(sparq11lTranslatorParser.REPLACE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public StrReplaceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strReplaceExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterStrReplaceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitStrReplaceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrReplaceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrReplaceExpressionContext strReplaceExpression() {
		StrReplaceExpressionContext _localctx = new StrReplaceExpressionContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_strReplaceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897; Match(REPLACE);
			_localctx.value = new SparqlReplaceStrExpression();
			State = 1899; Match(BracketOpen);
			State = 1900; _localctx.lit = expression();
			_localctx.value.SetString(_localctx.lit.value);
			State = 1902; Match(T__22);
			State = 1903; _localctx.pattern = expression();
			_localctx.value.SetPattern(_localctx.lit.value);
			State = 1905; Match(T__22);
			State = 1906; _localctx.replacement = expression();
			_localctx.value.SetReplacement(_localctx.replacement.value);
			State = 1912;
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 1908; Match(T__22);
				State = 1909; _localctx.parameters = expression();
				_localctx.value.SetParameters(_localctx.parameters.value);
				}
			}

			_localctx.value.Create();
			State = 1915; Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsFuncContext : ParserRuleContext {
		public SparqlExistsExpression value;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode EXISTS() { return GetToken(sparq11lTranslatorParser.EXISTS, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public ExistsFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterExistsFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitExistsFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsFuncContext existsFunc() {
		ExistsFuncContext _localctx = new ExistsFuncContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_existsFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917; Match(EXISTS);
			State = 1918; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value = new SparqlExistsExpression(_localctx._groupGraphPattern.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExistsFuncContext : ParserRuleContext {
		public SparqlNotExistsExpression value;
		public GroupGraphPatternContext _groupGraphPattern;
		public ITerminalNode EXISTS() { return GetToken(sparq11lTranslatorParser.EXISTS, 0); }
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(sparq11lTranslatorParser.NOT, 0); }
		public NotExistsFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExistsFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNotExistsFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNotExistsFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExistsFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExistsFuncContext notExistsFunc() {
		NotExistsFuncContext _localctx = new NotExistsFuncContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_notExistsFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921; Match(NOT);
			State = 1922; Match(EXISTS);
			State = 1923; _localctx._groupGraphPattern = groupGraphPattern();
			_localctx.value = new SparqlNotExistsExpression(_localctx._groupGraphPattern.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		public SparqlAggregateExpression value;
		public ExpressionContext _expression;
		public StringContext _string;
		public ITerminalNode COUNT() { return GetToken(sparq11lTranslatorParser.COUNT, 0); }
		public ITerminalNode SUM() { return GetToken(sparq11lTranslatorParser.SUM, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(sparq11lTranslatorParser.DISTINCT, 0); }
		public ITerminalNode GROUP_CONCAT() { return GetToken(sparq11lTranslatorParser.GROUP_CONCAT, 0); }
		public ITerminalNode SEPARATOR() { return GetToken(sparq11lTranslatorParser.SEPARATOR, 0); }
		public ITerminalNode AVG() { return GetToken(sparq11lTranslatorParser.AVG, 0); }
		public ITerminalNode MIN() { return GetToken(sparq11lTranslatorParser.MIN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MAX() { return GetToken(sparq11lTranslatorParser.MAX, 0); }
		public ITerminalNode SAMPLE() { return GetToken(sparq11lTranslatorParser.SAMPLE, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_aggregate);
		int _la;
		try {
			State = 2015;
			switch (_input.La(1)) {
			case COUNT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1926; Match(COUNT);
				_localctx.value = new SparqlCountExpression();
				State = 1928; Match(BracketOpen);
				State = 1931;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1929; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 1938;
				switch (_input.La(1)) {
				case T__21:
					{
					State = 1933; Match(T__21);
					_localctx.value.IsAll();
					}
					break;
				case T__20:
				case T__9:
				case T__0:
				case NOT:
				case STR:
				case LANG:
				case LANGMATCHES:
				case DATATYPE:
				case BOUND:
				case IRI:
				case URI:
				case BNODE:
				case RAND:
				case ABS:
				case CEIL:
				case FLOOR:
				case ROUND:
				case CONCAT:
				case STRLEN:
				case UCASE:
				case LCASE:
				case ENCODE_FOR_URI:
				case CONTAINS:
				case STRSTARTS:
				case STRENDS:
				case STRBEFORE:
				case STRAFTER:
				case YEAR:
				case MONTH:
				case DAY:
				case HOURS:
				case MINUTES:
				case SECONDS:
				case TIMEZONE:
				case TZ:
				case NOW:
				case UUID:
				case STRUUID:
				case MD5:
				case SHA1:
				case SHA256:
				case SHA384:
				case SHA512:
				case COALESCE:
				case IF:
				case STRLANG:
				case STRDT:
				case SAMETERM:
				case ISIRI:
				case ISURI:
				case ISBLANK:
				case ISLITERAL:
				case ISNUMERIC:
				case REGEX:
				case SUBSTR:
				case REPLACE:
				case EXISTS:
				case COUNT:
				case SUM:
				case MIN:
				case MAX:
				case AVG:
				case SAMPLE:
				case GROUP_CONCAT:
				case TRUE:
				case FALSE:
				case IRIREF:
				case PNAME_LN:
				case PNAME_NS:
				case VAR1:
				case VAR2:
				case INTEGER:
				case DECIMAL:
				case DOUBLE:
				case INTEGER_POSITIVE:
				case DECIMAL_POSITIVE:
				case DOUBLE_POSITIVE:
				case INTEGER_NEGATIVE:
				case DECIMAL_NEGATIVE:
				case DOUBLE_NEGATIVE:
				case STRING_LITERAL1:
				case STRING_LITERAL2:
				case STRING_LITERAL_LONG1:
				case STRING_LITERAL_LONG2:
				case BracketOpen:
					{
					State = 1935; _localctx._expression = expression();
					_localctx.value.Expression=_localctx._expression.value;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1940; Match(BracketClose);
				}
				break;
			case SUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1941; Match(SUM);
				_localctx.value = new SparqlSumExpression();
				State = 1943; Match(BracketOpen);
				State = 1946;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1944; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 1948; _localctx._expression = expression();
				_localctx.value.Expression=_localctx._expression.value;
				State = 1950; Match(BracketClose);
				}
				break;
			case MIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1952; Match(MIN);
				_localctx.value = new SparqlMinExpression();
				State = 1954; Match(BracketOpen);
				State = 1957;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1955; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 1959; _localctx._expression = expression();
				_localctx.value.Expression=_localctx._expression.value;
				State = 1961; Match(BracketClose);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1963; Match(MAX);
				_localctx.value = new SparqlMaxExpression();
				State = 1965; Match(BracketOpen);
				State = 1968;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1966; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 1970; _localctx._expression = expression();
				_localctx.value.Expression=_localctx._expression.value;
				State = 1972; Match(BracketClose);
				}
				break;
			case AVG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1974; Match(AVG);
				_localctx.value = new SparqlAvgExpression();
				State = 1976; Match(BracketOpen);
				State = 1979;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1977; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 1981; _localctx._expression = expression();
				_localctx.value.Expression=_localctx._expression.value;
				State = 1983; Match(BracketClose);
				}
				break;
			case SAMPLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1985; Match(SAMPLE);
				_localctx.value = new SparqlSampleExpression();
				State = 1987; Match(BracketOpen);
				State = 1990;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1988; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 1992; _localctx._expression = expression();
				_localctx.value.Expression=_localctx._expression.value;
				State = 1994; Match(BracketClose);
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1996; Match(GROUP_CONCAT);
				_localctx.value = new SparqlGroupConcatExpression();
				State = 1998; Match(BracketOpen);
				State = 2001;
				_la = _input.La(1);
				if (_la==DISTINCT) {
					{
					State = 1999; Match(DISTINCT);
					_localctx.value.IsDistinct=true;
					}
				}

				State = 2003; _localctx._expression = expression();
				_localctx.value.Expression=_localctx._expression.value;
				State = 2011;
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 2005; Match(T__7);
					State = 2006; Match(SEPARATOR);
					State = 2007; Match(T__8);
					State = 2008; _localctx._string = @string();
					_localctx.value.Separator=(_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null);
					}
				}

				State = 2013; Match(BracketClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RDFLiteralContext : ParserRuleContext {
		public ObjectVariants value;
		public StringContext _string;
		public IToken _LANGTAG;
		public IriStringContext _iriString;
		public IriStringContext iriString() {
			return GetRuleContext<IriStringContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode LANGTAG() { return GetToken(sparq11lTranslatorParser.LANGTAG, 0); }
		public RDFLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rDFLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterRDFLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitRDFLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRDFLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RDFLiteralContext rDFLiteral() {
		RDFLiteralContext _localctx = new RDFLiteralContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_rDFLiteral);
		try {
			State = 2029;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2017; _localctx._string = @string();
				 _localctx.value = new OV_string((_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null).Trim('"', '\'')); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2020; _localctx._string = @string();
				State = 2021; _localctx._LANGTAG = Match(LANGTAG);
				 _localctx.value = new OV_langstring((_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null).Trim('"', '\''), (_localctx._LANGTAG!=null?_localctx._LANGTAG.Text:null).Substring(1,2));
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 2024; _localctx._string = @string();
				State = 2025; Match(T__13);
				State = 2026; _localctx._iriString = iriString();
				 _localctx.value = q.Store.NodeGenerator.CreateLiteralNode((_localctx._string!=null?_input.GetText(_localctx._string.start,_localctx._string.stop):null), _localctx._iriString.value);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ObjectVariants value;
		public NumericLiteralUnsignedContext _numericLiteralUnsigned;
		public NumericLiteralPositiveContext _numericLiteralPositive;
		public NumericLiteralNegativeContext _numericLiteralNegative;
		public NumericLiteralPositiveContext numericLiteralPositive() {
			return GetRuleContext<NumericLiteralPositiveContext>(0);
		}
		public NumericLiteralNegativeContext numericLiteralNegative() {
			return GetRuleContext<NumericLiteralNegativeContext>(0);
		}
		public NumericLiteralUnsignedContext numericLiteralUnsigned() {
			return GetRuleContext<NumericLiteralUnsignedContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_numericLiteral);
		try {
			State = 2040;
			switch (_input.La(1)) {
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2031; _localctx._numericLiteralUnsigned = numericLiteralUnsigned();
				_localctx.value = _localctx._numericLiteralUnsigned.value;
				}
				break;
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2034; _localctx._numericLiteralPositive = numericLiteralPositive();
				_localctx.value = _localctx._numericLiteralPositive.value;
				}
				break;
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2037; _localctx._numericLiteralNegative = numericLiteralNegative();
				_localctx.value = _localctx._numericLiteralNegative.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralUnsignedContext : ParserRuleContext {
		public ObjectVariants value;
		public IToken _INTEGER;
		public IToken _DECIMAL;
		public IToken _DOUBLE;
		public ITerminalNode DOUBLE() { return GetToken(sparq11lTranslatorParser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(sparq11lTranslatorParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(sparq11lTranslatorParser.DECIMAL, 0); }
		public NumericLiteralUnsignedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteralUnsigned; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNumericLiteralUnsigned(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNumericLiteralUnsigned(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralUnsigned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralUnsignedContext numericLiteralUnsigned() {
		NumericLiteralUnsignedContext _localctx = new NumericLiteralUnsignedContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_numericLiteralUnsigned);
		try {
			State = 2048;
			switch (_input.La(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2042; _localctx._INTEGER = Match(INTEGER);
				 _localctx.value = new OV_int(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); 
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044; _localctx._DECIMAL = Match(DECIMAL);
				 _localctx.value = new OV_decimal(decimal.Parse((_localctx._DECIMAL!=null?_localctx._DECIMAL.Text:null).Replace(".", ","))); 
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2046; _localctx._DOUBLE = Match(DOUBLE);
				 _localctx.value = new OV_double(double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null).Replace(".", ","))); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralPositiveContext : ParserRuleContext {
		public ObjectVariants value;
		public IToken _INTEGER_POSITIVE;
		public IToken _DECIMAL_POSITIVE;
		public IToken _DOUBLE_POSITIVE;
		public ITerminalNode DOUBLE_POSITIVE() { return GetToken(sparq11lTranslatorParser.DOUBLE_POSITIVE, 0); }
		public ITerminalNode DECIMAL_POSITIVE() { return GetToken(sparq11lTranslatorParser.DECIMAL_POSITIVE, 0); }
		public ITerminalNode INTEGER_POSITIVE() { return GetToken(sparq11lTranslatorParser.INTEGER_POSITIVE, 0); }
		public NumericLiteralPositiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteralPositive; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNumericLiteralPositive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNumericLiteralPositive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralPositive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralPositiveContext numericLiteralPositive() {
		NumericLiteralPositiveContext _localctx = new NumericLiteralPositiveContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_numericLiteralPositive);
		try {
			State = 2056;
			switch (_input.La(1)) {
			case INTEGER_POSITIVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2050; _localctx._INTEGER_POSITIVE = Match(INTEGER_POSITIVE);
				 _localctx.value = new OV_int(int.Parse((_localctx._INTEGER_POSITIVE!=null?_localctx._INTEGER_POSITIVE.Text:null))); 
				}
				break;
			case DECIMAL_POSITIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2052; _localctx._DECIMAL_POSITIVE = Match(DECIMAL_POSITIVE);
				 _localctx.value = new OV_decimal(decimal.Parse((_localctx._DECIMAL_POSITIVE!=null?_localctx._DECIMAL_POSITIVE.Text:null).Replace(".", ","))); 
				}
				break;
			case DOUBLE_POSITIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2054; _localctx._DOUBLE_POSITIVE = Match(DOUBLE_POSITIVE);
				 _localctx.value = new OV_double(double.Parse((_localctx._DOUBLE_POSITIVE!=null?_localctx._DOUBLE_POSITIVE.Text:null).Replace(".", ","))); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralNegativeContext : ParserRuleContext {
		public ObjectVariants value;
		public IToken _INTEGER_NEGATIVE;
		public IToken _DECIMAL_NEGATIVE;
		public IToken _DOUBLE_NEGATIVE;
		public ITerminalNode DOUBLE_NEGATIVE() { return GetToken(sparq11lTranslatorParser.DOUBLE_NEGATIVE, 0); }
		public ITerminalNode INTEGER_NEGATIVE() { return GetToken(sparq11lTranslatorParser.INTEGER_NEGATIVE, 0); }
		public ITerminalNode DECIMAL_NEGATIVE() { return GetToken(sparq11lTranslatorParser.DECIMAL_NEGATIVE, 0); }
		public NumericLiteralNegativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteralNegative; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterNumericLiteralNegative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitNumericLiteralNegative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralNegative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralNegativeContext numericLiteralNegative() {
		NumericLiteralNegativeContext _localctx = new NumericLiteralNegativeContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_numericLiteralNegative);
		try {
			State = 2064;
			switch (_input.La(1)) {
			case INTEGER_NEGATIVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2058; _localctx._INTEGER_NEGATIVE = Match(INTEGER_NEGATIVE);
				 _localctx.value = new OV_int(int.Parse((_localctx._INTEGER_NEGATIVE!=null?_localctx._INTEGER_NEGATIVE.Text:null))); 
				}
				break;
			case DECIMAL_NEGATIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2060; _localctx._DECIMAL_NEGATIVE = Match(DECIMAL_NEGATIVE);
				 _localctx.value = new OV_decimal(decimal.Parse((_localctx._DECIMAL_NEGATIVE!=null?_localctx._DECIMAL_NEGATIVE.Text:null).Replace(".", ","))); 
				}
				break;
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2062; _localctx._DOUBLE_NEGATIVE = Match(DOUBLE_NEGATIVE);
				 _localctx.value = new OV_double(double.Parse((_localctx._DOUBLE_NEGATIVE!=null?_localctx._DOUBLE_NEGATIVE.Text:null).Replace(".", ","))); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ObjectVariants value;
		public BooleanContext _boolean;
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_booleanLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066; _localctx._boolean = boolean();
			 _localctx.value = new OV_bool(_localctx._boolean.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public bool value;
		public ITerminalNode TRUE() { return GetToken(sparq11lTranslatorParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(sparq11lTranslatorParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_boolean);
		try {
			State = 2073;
			switch (_input.La(1)) {
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2069; Match(TRUE);
				 _localctx.value = true; 
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2071; Match(FALSE);
				 _localctx.value = false; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL1() { return GetToken(sparq11lTranslatorParser.STRING_LITERAL1, 0); }
		public ITerminalNode STRING_LITERAL_LONG2() { return GetToken(sparq11lTranslatorParser.STRING_LITERAL_LONG2, 0); }
		public ITerminalNode STRING_LITERAL_LONG1() { return GetToken(sparq11lTranslatorParser.STRING_LITERAL_LONG1, 0); }
		public ITerminalNode STRING_LITERAL2() { return GetToken(sparq11lTranslatorParser.STRING_LITERAL2, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2075;
			_la = _input.La(1);
			if ( !(((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (STRING_LITERAL1 - 149)) | (1L << (STRING_LITERAL2 - 149)) | (1L << (STRING_LITERAL_LONG1 - 149)) | (1L << (STRING_LITERAL_LONG2 - 149)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		public ObjectVariants value;
		public IriStringContext _iriString;
		public IriStringContext iriString() {
			return GetRuleContext<IriStringContext>(0);
		}
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_iri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2077; _localctx._iriString = iriString();
			 _localctx.value = new OV_iri(_localctx._iriString.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriStringContext : ParserRuleContext {
		public string value;
		public IToken _IRIREF;
		public IToken _PNAME_LN;
		public IToken _PNAME_NS;
		public ITerminalNode PNAME_NS() { return GetToken(sparq11lTranslatorParser.PNAME_NS, 0); }
		public ITerminalNode PNAME_LN() { return GetToken(sparq11lTranslatorParser.PNAME_LN, 0); }
		public ITerminalNode IRIREF() { return GetToken(sparq11lTranslatorParser.IRIREF, 0); }
		public IriStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iriString; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterIriString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitIriString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIriString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriStringContext iriString() {
		IriStringContext _localctx = new IriStringContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_iriString);
		try {
			State = 2086;
			switch (_input.La(1)) {
			case IRIREF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2080; _localctx._IRIREF = Match(IRIREF);
				_localctx.value = (_localctx._IRIREF!=null?_localctx._IRIREF.Text:null).Substring(1, (_localctx._IRIREF!=null?_localctx._IRIREF.Text:null).Length-2);
				}
				break;
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2082; _localctx._PNAME_LN = Match(PNAME_LN);
				_localctx.value = q.prolog.GetUriFromPrefixed((_localctx._PNAME_LN!=null?_localctx._PNAME_LN.Text:null)); 
				}
				break;
			case PNAME_NS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2084; _localctx._PNAME_NS = Match(PNAME_NS);
				_localctx.value = q.prolog.GetUriFromPrefixedNamespace((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null)); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodeContext : ParserRuleContext {
		public ObjectVariants value;
		public IToken _BLANK_NODE_LABEL;
		public ITerminalNode ANON() { return GetToken(sparq11lTranslatorParser.ANON, 0); }
		public ITerminalNode BLANK_NODE_LABEL() { return GetToken(sparq11lTranslatorParser.BLANK_NODE_LABEL, 0); }
		public BlankNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blankNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.EnterBlankNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparq11lTranslatorListener typedListener = listener as Isparq11lTranslatorListener;
			if (typedListener != null) typedListener.ExitBlankNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparq11lTranslatorVisitor<TResult> typedVisitor = visitor as Isparq11lTranslatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodeContext blankNode() {
		BlankNodeContext _localctx = new BlankNodeContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_blankNode);
		try {
			State = 2092;
			switch (_input.La(1)) {
			case BLANK_NODE_LABEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2088; _localctx._BLANK_NODE_LABEL = Match(BLANK_NODE_LABEL);
				 _localctx.value =  q.CreateBlankNode((_localctx._BLANK_NODE_LABEL!=null?_localctx._BLANK_NODE_LABEL.Text:null)); 
				}
				break;
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2090; Match(ANON);
				  _localctx.value =  q.CreateBlankNode(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xB0\x831\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x5\x2\x113\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x5\x2\x11B\n\x2\x3\x3\x3\x3\a\x3\x11F\n\x3\f\x3\xE\x3\x122\v\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\a\x6\x130\n\x6\f\x6\xE\x6\x133\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x147"+
		"\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\x153\n\b\r"+
		"\b\xE\b\x154\x3\b\x3\b\x5\b\x159\n\b\x3\t\x3\t\x3\t\x3\t\a\t\x15F\n\t"+
		"\f\t\xE\t\x162\v\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x169\n\t\f\t\xE\t\x16C"+
		"\v\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x173\n\t\x3\t\x3\t\x3\t\x3\t\x5\t\x179"+
		"\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x6\n\x180\n\n\r\n\xE\n\x181\x3\n\x3\n\x5"+
		"\n\x186\n\n\x3\n\a\n\x189\n\n\f\n\xE\n\x18C\v\n\x3\n\x3\n\x3\n\x5\n\x191"+
		"\n\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x199\n\v\f\v\xE\v\x19C\v\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x1A5\n\f\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x5\x10\x1B2\n\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x1BB\n\x11\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\x1C0\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x1C5\n\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x1CA\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x6\x12\x1D2\n\x12\r\x12\xE\x12\x1D3\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1E3\n"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x1EA\n\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x6\x14\x1F1\n\x14\r\x14\xE\x14\x1F2\x3\x15\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x6\x16\x1FE\n\x16\r"+
		"\x16\xE\x16\x1FF\x3\x17\x3\x17\x5\x17\x204\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x5\x17\x215\n\x17\x5\x17\x217\n\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x21F\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\x226\n\x18\x5\x18\x228\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x239\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x244\n\x1D\x5\x1D\x246\n\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x5\x1E\x269\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x26F\n\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x277\n\x1F\x3 \x3 \x3 \x3 "+
		"\x5 \x27D\n \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x5!\x286\n!\x3!\x3!\x3!\x3\""+
		"\x3\"\x3\"\x3\"\x5\"\x28F\n\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x298"+
		"\n#\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x2A3\n$\x3$\x3$\x3$\x3$\x3"+
		"$\x3%\x3%\x3%\x3%\x5%\x2AE\n%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3&"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x5)"+
		"\x2C9\n)\x3)\x3)\x3)\x3)\x3)\x5)\x2D0\n)\x3)\x3)\x3)\x5)\x2D5\n)\x3)\x3"+
		")\x6)\x2D9\n)\r)\xE)\x2DA\x5)\x2DD\n)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*"+
		"\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x2F3\n,\x3-\x3-\x5"+
		"-\x2F7\n-\x3-\x3-\x3-\x5-\x2FC\n-\x3.\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x3/"+
		"\x3/\x3/\x3/\x3/\x5/\x30B\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x31B\n"+
		"\x32\x3\x32\x3\x32\x3\x32\x5\x32\x320\n\x32\x3\x32\x3\x32\x3\x32\x5\x32"+
		"\x325\n\x32\a\x32\x327\n\x32\f\x32\xE\x32\x32A\v\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x333\n\x33\x3\x33\x3\x33\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x33D\n\x34\x5\x34\x33F\n\x34"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x348\n\x35\x3"+
		"\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x350\n\x36\x3\x36\x3\x36"+
		"\x3\x36\x5\x36\x355\n\x36\x3\x36\x3\x36\x3\x36\x5\x36\x35A\n\x36\a\x36"+
		"\x35C\n\x36\f\x36\xE\x36\x35F\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x5\x37\x367\n\x37\x5\x37\x369\n\x37\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x5\x38\x383\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3"+
		":\x3;\x3;\x3;\x3;\x5;\x393\n;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<"+
		"\x3<\x3<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x3AB\n>\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\a?\x3B3\n?\f?\xE?\x3B6\v?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3"+
		"@\a@\x3C0\n@\f@\xE@\x3C3\v@\x3@\x5@\x3C6\n@\x3@\x3@\x3@\x3@\x3@\a@\x3CD"+
		"\n@\f@\xE@\x3D0\v@\x3@\x3@\x3@\a@\x3D5\n@\f@\xE@\x3D8\v@\x3@\x3@\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x3ED\n\x41\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x3F9"+
		"\n\x43\f\x43\xE\x43\x3FC\v\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x40B\n\x45\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x5G\x416\nG\x3G\x3G\x3G"+
		"\x3G\x3G\x3G\aG\x41E\nG\fG\xEG\x421\vG\x3G\x3G\x5G\x425\nG\x3H\x3H\x3"+
		"H\x3H\x3H\x3H\x3H\x3H\aH\x42F\nH\fH\xEH\x432\vH\x3H\x3H\x5H\x436\nH\x3"+
		"I\x3I\x3I\x3I\x3I\x5I\x43D\nI\x3I\x3I\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x447"+
		"\nJ\x5J\x449\nJ\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x452\nK\x5K\x454\nK\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x5L\x45C\nL\aL\x45E\nL\fL\xEL\x461\vL\x3M\x3M\x3"+
		"M\x3M\x3M\x5M\x468\nM\x3N\x3N\x3N\aN\x46D\nN\fN\xEN\x470\vN\x3O\x3O\x3"+
		"O\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x47B\nP\x3Q\x3Q\x3Q\x3Q\x3Q\x6Q\x482\nQ"+
		"\rQ\xEQ\x483\x3Q\x3Q\x3R\x3R\x3R\x3R\x3R\x5R\x48D\nR\x3S\x3S\x3S\x3S\x3"+
		"T\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x49D\nU\x5U\x49F\nU\x3V\x3V"+
		"\x3V\x3V\x3V\x3V\x5V\x4A7\nV\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5V\x4B0\nV\x5"+
		"V\x4B2\nV\aV\x4B4\nV\fV\xEV\x4B7\vV\x3W\x3W\x3W\aW\x4BC\nW\fW\xEW\x4BF"+
		"\vW\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\aY\x4CA\nY\fY\xEY\x4CD\vY\x3Z"+
		"\x3Z\x3Z\x3Z\x3Z\x3Z\aZ\x4D5\nZ\fZ\xEZ\x4D8\vZ\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x5[\x4E1\n[\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x4EB\n"+
		"\\\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x5]\x4FB\n"+
		"]\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x507\n^\f^\xE^\x50A\v^\x5"+
		"^\x50C\n^\x3^\x5^\x50F\n^\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_"+
		"\x5_\x51C\n_\x5_\x51E\n_\x3`\x3`\x3`\x3`\x3`\x5`\x525\n`\x3\x61\x3\x61"+
		"\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x6\x62\x530\n\x62\r"+
		"\x62\xE\x62\x531\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x5\x63\x53C\n\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x544"+
		"\n\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x54C\n\x65\x3"+
		"\x66\x3\x66\x3\x66\x3g\x3g\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x564\nh\x3i\x3i\x3i\x3i\x3i\x3i\ai\x56C"+
		"\ni\fi\xEi\x56F\vi\x3j\x3j\x3j\x3j\x3j\x3j\aj\x577\nj\fj\xEj\x57A\vj\x3"+
		"k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k"+
		"\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5"+
		"k\x59F\nk\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l"+
		"\x3l\x3l\x5l\x5B2\nl\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\al\x5BC\nl\fl\xE"+
		"l\x5BF\vl\x3l\x3l\al\x5C3\nl\fl\xEl\x5C6\vl\x3m\x3m\x3m\x3m\x3m\x3m\x3"+
		"m\x3m\x3m\x3m\am\x5D2\nm\fm\xEm\x5D5\vm\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3"+
		"n\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x5n\x5E6\nn\x3o\x3o\x3o\x3o\x3o\x3o\x3o"+
		"\x3o\x3o\x3o\x3o\x5o\x5F3\no\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3"+
		"o\x3o\x5o\x601\no\x3p\x3p\x3p\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x63F\nq\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q"+
		"\x5q\x74A\nq\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x5r\x757\nr\x3"+
		"r\x3r\x3r\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x5s\x768\ns"+
		"\x3s\x3s\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x5"+
		"t\x77B\nt\x3t\x3t\x3t\x3u\x3u\x3u\x3u\x3v\x3v\x3v\x3v\x3v\x3w\x3w\x3w"+
		"\x3w\x3w\x5w\x78E\nw\x3w\x3w\x3w\x3w\x3w\x5w\x795\nw\x3w\x3w\x3w\x3w\x3"+
		"w\x3w\x5w\x79D\nw\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x7A8\nw\x3w"+
		"\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x7B3\nw\x3w\x3w\x3w\x3w\x3w\x3w\x3"+
		"w\x3w\x3w\x5w\x7BE\nw\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x7C9\nw"+
		"\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x7D4\nw\x3w\x3w\x3w\x3w\x3w\x3"+
		"w\x3w\x3w\x5w\x7DE\nw\x3w\x3w\x5w\x7E2\nw\x3x\x3x\x3x\x3x\x3x\x3x\x3x"+
		"\x3x\x3x\x3x\x3x\x3x\x5x\x7F0\nx\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x5"+
		"y\x7FB\ny\x3z\x3z\x3z\x3z\x3z\x3z\x5z\x803\nz\x3{\x3{\x3{\x3{\x3{\x3{"+
		"\x5{\x80B\n{\x3|\x3|\x3|\x3|\x3|\x3|\x5|\x813\n|\x3}\x3}\x3}\x3~\x3~\x3"+
		"~\x3~\x5~\x81C\n~\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x81\x3\x81\x3"+
		"\x81\x3\x81\x3\x81\x3\x81\x5\x81\x829\n\x81\x3\x82\x3\x82\x3\x82\x3\x82"+
		"\x5\x82\x82F\n\x82\x3\x82\x2\x2\x2\x83\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2"+
		"|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2"+
		"\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2"+
		"\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2"+
		"\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2"+
		"\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2"+
		"\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2"+
		"\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x2\x4\x3\x2\x8A\x8B"+
		"\x3\x2\x97\x9A\x8C2\x2\x11A\x3\x2\x2\x2\x4\x120\x3\x2\x2\x2\x6\x123\x3"+
		"\x2\x2\x2\b\x127\x3\x2\x2\x2\n\x12C\x3\x2\x2\x2\f\x139\x3\x2\x2\x2\xE"+
		"\x140\x3\x2\x2\x2\x10\x15A\x3\x2\x2\x2\x12\x17A\x3\x2\x2\x2\x14\x195\x3"+
		"\x2\x2\x2\x16\x1A1\x3\x2\x2\x2\x18\x1A6\x3\x2\x2\x2\x1A\x1A9\x3\x2\x2"+
		"\x2\x1C\x1AD\x3\x2\x2\x2\x1E\x1B1\x3\x2\x2\x2 \x1B6\x3\x2\x2\x2\"\x1CB"+
		"\x3\x2\x2\x2$\x1E9\x3\x2\x2\x2&\x1EB\x3\x2\x2\x2(\x1F4\x3\x2\x2\x2*\x1F7"+
		"\x3\x2\x2\x2,\x216\x3\x2\x2\x2.\x218\x3\x2\x2\x2\x30\x229\x3\x2\x2\x2"+
		"\x32\x22D\x3\x2\x2\x2\x34\x231\x3\x2\x2\x2\x36\x238\x3\x2\x2\x2\x38\x23A"+
		"\x3\x2\x2\x2:\x268\x3\x2\x2\x2<\x26A\x3\x2\x2\x2>\x278\x3\x2\x2\x2@\x281"+
		"\x3\x2\x2\x2\x42\x28A\x3\x2\x2\x2\x44\x293\x3\x2\x2\x2\x46\x29E\x3\x2"+
		"\x2\x2H\x2A9\x3\x2\x2\x2J\x2B4\x3\x2\x2\x2L\x2B9\x3\x2\x2\x2N\x2BE\x3"+
		"\x2\x2\x2P\x2C3\x3\x2\x2\x2R\x2E2\x3\x2\x2\x2T\x2E6\x3\x2\x2\x2V\x2EA"+
		"\x3\x2\x2\x2X\x2FB\x3\x2\x2\x2Z\x2FD\x3\x2\x2\x2\\\x30A\x3\x2\x2\x2^\x30C"+
		"\x3\x2\x2\x2`\x311\x3\x2\x2\x2\x62\x316\x3\x2\x2\x2\x64\x32B\x3\x2\x2"+
		"\x2\x66\x336\x3\x2\x2\x2h\x340\x3\x2\x2\x2j\x34B\x3\x2\x2\x2l\x360\x3"+
		"\x2\x2\x2n\x382\x3\x2\x2\x2p\x384\x3\x2\x2\x2r\x388\x3\x2\x2\x2t\x38E"+
		"\x3\x2\x2\x2v\x398\x3\x2\x2\x2x\x3A0\x3\x2\x2\x2z\x3AA\x3\x2\x2\x2|\x3AC"+
		"\x3\x2\x2\x2~\x3B9\x3\x2\x2\x2\x80\x3EC\x3\x2\x2\x2\x82\x3EE\x3\x2\x2"+
		"\x2\x84\x3F2\x3\x2\x2\x2\x86\x3FD\x3\x2\x2\x2\x88\x40A\x3\x2\x2\x2\x8A"+
		"\x40C\x3\x2\x2\x2\x8C\x424\x3\x2\x2\x2\x8E\x435\x3\x2\x2\x2\x90\x437\x3"+
		"\x2\x2\x2\x92\x440\x3\x2\x2\x2\x94\x453\x3\x2\x2\x2\x96\x455\x3\x2\x2"+
		"\x2\x98\x467\x3\x2\x2\x2\x9A\x469\x3\x2\x2\x2\x9C\x471\x3\x2\x2\x2\x9E"+
		"\x47A\x3\x2\x2\x2\xA0\x47C\x3\x2\x2\x2\xA2\x48C\x3\x2\x2\x2\xA4\x48E\x3"+
		"\x2\x2\x2\xA6\x492\x3\x2\x2\x2\xA8\x49E\x3\x2\x2\x2\xAA\x4A6\x3\x2\x2"+
		"\x2\xAC\x4B8\x3\x2\x2\x2\xAE\x4C0\x3\x2\x2\x2\xB0\x4C3\x3\x2\x2\x2\xB2"+
		"\x4CE\x3\x2\x2\x2\xB4\x4E0\x3\x2\x2\x2\xB6\x4E2\x3\x2\x2\x2\xB8\x4FA\x3"+
		"\x2\x2\x2\xBA\x50E\x3\x2\x2\x2\xBC\x51D\x3\x2\x2\x2\xBE\x524\x3\x2\x2"+
		"\x2\xC0\x526\x3\x2\x2\x2\xC2\x52A\x3\x2\x2\x2\xC4\x53B\x3\x2\x2\x2\xC6"+
		"\x543\x3\x2\x2\x2\xC8\x54B\x3\x2\x2\x2\xCA\x54D\x3\x2\x2\x2\xCC\x550\x3"+
		"\x2\x2\x2\xCE\x563\x3\x2\x2\x2\xD0\x565\x3\x2\x2\x2\xD2\x570\x3\x2\x2"+
		"\x2\xD4\x57B\x3\x2\x2\x2\xD6\x5A0\x3\x2\x2\x2\xD8\x5C7\x3\x2\x2\x2\xDA"+
		"\x5E5\x3\x2\x2\x2\xDC\x600\x3\x2\x2\x2\xDE\x602\x3\x2\x2\x2\xE0\x749\x3"+
		"\x2\x2\x2\xE2\x74B\x3\x2\x2\x2\xE4\x75B\x3\x2\x2\x2\xE6\x76B\x3\x2\x2"+
		"\x2\xE8\x77F\x3\x2\x2\x2\xEA\x783\x3\x2\x2\x2\xEC\x7E1\x3\x2\x2\x2\xEE"+
		"\x7EF\x3\x2\x2\x2\xF0\x7FA\x3\x2\x2\x2\xF2\x802\x3\x2\x2\x2\xF4\x80A\x3"+
		"\x2\x2\x2\xF6\x812\x3\x2\x2\x2\xF8\x814\x3\x2\x2\x2\xFA\x81B\x3\x2\x2"+
		"\x2\xFC\x81D\x3\x2\x2\x2\xFE\x81F\x3\x2\x2\x2\x100\x828\x3\x2\x2\x2\x102"+
		"\x82E\x3\x2\x2\x2\x104\x105\x5\x4\x3\x2\x105\x112\b\x2\x1\x2\x106\x107"+
		"\x5\n\x6\x2\x107\x108\b\x2\x1\x2\x108\x113\x3\x2\x2\x2\x109\x10A\x5\x10"+
		"\t\x2\x10A\x10B\b\x2\x1\x2\x10B\x113\x3\x2\x2\x2\x10C\x10D\x5\x12\n\x2"+
		"\x10D\x10E\b\x2\x1\x2\x10E\x113\x3\x2\x2\x2\x10F\x110\x5\x14\v\x2\x110"+
		"\x111\b\x2\x1\x2\x111\x113\x3\x2\x2\x2\x112\x106\x3\x2\x2\x2\x112\x109"+
		"\x3\x2\x2\x2\x112\x10C\x3\x2\x2\x2\x112\x10F\x3\x2\x2\x2\x113\x114\x3"+
		"\x2\x2\x2\x114\x115\x5\x36\x1C\x2\x115\x116\b\x2\x1\x2\x116\x11B\x3\x2"+
		"\x2\x2\x117\x118\x5\x38\x1D\x2\x118\x119\b\x2\x1\x2\x119\x11B\x3\x2\x2"+
		"\x2\x11A\x104\x3\x2\x2\x2\x11A\x117\x3\x2\x2\x2\x11B\x3\x3\x2\x2\x2\x11C"+
		"\x11F\x5\x6\x4\x2\x11D\x11F\x5\b\x5\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11D"+
		"\x3\x2\x2\x2\x11F\x122\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2\x120\x121\x3"+
		"\x2\x2\x2\x121\x5\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x123\x124\a\xAE\x2"+
		"\x2\x124\x125\a\x86\x2\x2\x125\x126\b\x4\x1\x2\x126\a\x3\x2\x2\x2\x127"+
		"\x128\a>\x2\x2\x128\x129\a\x88\x2\x2\x129\x12A\a\x86\x2\x2\x12A\x12B\b"+
		"\x5\x1\x2\x12B\t\x3\x2\x2\x2\x12C\x12D\b\x6\x1\x2\x12D\x131\x5\xE\b\x2"+
		"\x12E\x130\x5\x16\f\x2\x12F\x12E\x3\x2\x2\x2\x130\x133\x3\x2\x2\x2\x131"+
		"\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x134\x3\x2\x2\x2\x133\x131"+
		"\x3\x2\x2\x2\x134\x135\x5\x1E\x10\x2\x135\x136\x5 \x11\x2\x136\x137\b"+
		"\x6\x1\x2\x137\x138\b\x6\x1\x2\x138\v\x3\x2\x2\x2\x139\x13A\x5\xE\b\x2"+
		"\x13A\x13B\x5\x1E\x10\x2\x13B\x13C\x5 \x11\x2\x13C\x13D\b\a\x1\x2\x13D"+
		"\x13E\x5\x36\x1C\x2\x13E\x13F\b\a\x1\x2\x13F\r\x3\x2\x2\x2\x140\x141\a"+
		"+\x2\x2\x141\x146\b\b\x1\x2\x142\x143\a,\x2\x2\x143\x147\b\b\x1\x2\x144"+
		"\x145\a?\x2\x2\x145\x147\b\b\x1\x2\x146\x142\x3\x2\x2\x2\x146\x144\x3"+
		"\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x158\x3\x2\x2\x2\x148\x149\x5\xCA"+
		"\x66\x2\x149\x14A\b\b\x1\x2\x14A\x153\x3\x2\x2\x2\x14B\x14C\a\x9D\x2\x2"+
		"\x14C\x14D\x5\xD0i\x2\x14D\x14E\a\x1C\x2\x2\x14E\x14F\x5\xCA\x66\x2\x14F"+
		"\x150\b\b\x1\x2\x150\x151\a\x9E\x2\x2\x151\x153\x3\x2\x2\x2\x152\x148"+
		"\x3\x2\x2\x2\x152\x14B\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x152\x3"+
		"\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x159\x3\x2\x2\x2\x156\x157\a\x4\x2"+
		"\x2\x157\x159\b\b\x1\x2\x158\x152\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x159"+
		"\xF\x3\x2\x2\x2\x15A\x15B\a\"\x2\x2\x15B\x178\b\t\x1\x2\x15C\x160\x5\x90"+
		"I\x2\x15D\x15F\x5\x16\f\x2\x15E\x15D\x3\x2\x2\x2\x15F\x162\x3\x2\x2\x2"+
		"\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x163\x3\x2\x2\x2\x162"+
		"\x160\x3\x2\x2\x2\x163\x164\x5\x1E\x10\x2\x164\x165\x5 \x11\x2\x165\x166"+
		"\b\t\x1\x2\x166\x179\x3\x2\x2\x2\x167\x169\x5\x16\f\x2\x168\x167\x3\x2"+
		"\x2\x2\x169\x16C\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B\x3\x2\x2"+
		"\x2\x16B\x16D\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16D\x16E\aG\x2\x2\x16E"+
		"\x172\a\n\x2\x2\x16F\x170\x5\x66\x34\x2\x170\x171\b\t\x1\x2\x171\x173"+
		"\x3\x2\x2\x2\x172\x16F\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x174\x3"+
		"\x2\x2\x2\x174\x175\a\v\x2\x2\x175\x176\x5 \x11\x2\x176\x177\b\t\x1\x2"+
		"\x177\x179\x3\x2\x2\x2\x178\x15C\x3\x2\x2\x2\x178\x16A\x3\x2\x2\x2\x179"+
		"\x11\x3\x2\x2\x2\x17A\x17B\a\'\x2\x2\x17B\x185\b\n\x1\x2\x17C\x17D\x5"+
		"\xC8\x65\x2\x17D\x17E\b\n\x1\x2\x17E\x180\x3\x2\x2\x2\x17F\x17C\x3\x2"+
		"\x2\x2\x180\x181\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x181\x182\x3\x2\x2"+
		"\x2\x182\x186\x3\x2\x2\x2\x183\x184\a\x4\x2\x2\x184\x186\b\n\x1\x2\x185"+
		"\x17F\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x186\x18A\x3\x2\x2\x2\x187\x189"+
		"\x5\x16\f\x2\x188\x187\x3\x2\x2\x2\x189\x18C\x3\x2\x2\x2\x18A\x188\x3"+
		"\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x190\x3\x2\x2\x2\x18C\x18A\x3\x2"+
		"\x2\x2\x18D\x18E\x5\x1E\x10\x2\x18E\x18F\b\n\x1\x2\x18F\x191\x3\x2\x2"+
		"\x2\x190\x18D\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2"+
		"\x192\x193\x5 \x11\x2\x193\x194\b\n\x1\x2\x194\x13\x3\x2\x2\x2\x195\x196"+
		"\a\x1E\x2\x2\x196\x19A\b\v\x1\x2\x197\x199\x5\x16\f\x2\x198\x197\x3\x2"+
		"\x2\x2\x199\x19C\x3\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19A\x19B\x3\x2\x2"+
		"\x2\x19B\x19D\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D\x19E\x5\x1E\x10\x2"+
		"\x19E\x19F\x5 \x11\x2\x19F\x1A0\b\v\x1\x2\x1A0\x15\x3\x2\x2\x2\x1A1\x1A4"+
		"\a-\x2\x2\x1A2\x1A5\x5\x18\r\x2\x1A3\x1A5\x5\x1A\xE\x2\x1A4\x1A2\x3\x2"+
		"\x2\x2\x1A4\x1A3\x3\x2\x2\x2\x1A5\x17\x3\x2\x2\x2\x1A6\x1A7\x5\x1C\xF"+
		"\x2\x1A7\x1A8\b\r\x1\x2\x1A8\x19\x3\x2\x2\x2\x1A9\x1AA\a\x39\x2\x2\x1AA"+
		"\x1AB\x5\x1C\xF\x2\x1AB\x1AC\b\xE\x1\x2\x1AC\x1B\x3\x2\x2\x2\x1AD\x1AE"+
		"\x5\xFE\x80\x2\x1AE\x1AF\b\xF\x1\x2\x1AF\x1D\x3\x2\x2\x2\x1B0\x1B2\aG"+
		"\x2\x2\x1B1\x1B0\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2"+
		"\x2\x1B3\x1B4\x5h\x35\x2\x1B4\x1B5\b\x10\x1\x2\x1B5\x1F\x3\x2\x2\x2\x1B6"+
		"\x1BA\b\x11\x1\x2\x1B7\x1B8\x5\"\x12\x2\x1B8\x1B9\b\x11\x1\x2\x1B9\x1BB"+
		"\x3\x2\x2\x2\x1BA\x1B7\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BF\x3"+
		"\x2\x2\x2\x1BC\x1BD\x5&\x14\x2\x1BD\x1BE\b\x11\x1\x2\x1BE\x1C0\x3\x2\x2"+
		"\x2\x1BF\x1BC\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x1C4\x3\x2\x2\x2"+
		"\x1C1\x1C2\x5*\x16\x2\x1C2\x1C3\b\x11\x1\x2\x1C3\x1C5\x3\x2\x2\x2\x1C4"+
		"\x1C1\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C9\x3\x2\x2\x2\x1C6\x1C7"+
		"\x5.\x18\x2\x1C7\x1C8\b\x11\x1\x2\x1C8\x1CA\x3\x2\x2\x2\x1C9\x1C6\x3\x2"+
		"\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA!\x3\x2\x2\x2\x1CB\x1CC\a\x34\x2\x2\x1CC"+
		"\x1CD\a \x2\x2\x1CD\x1D1\b\x12\x1\x2\x1CE\x1CF\x5$\x13\x2\x1CF\x1D0\b"+
		"\x12\x1\x2\x1D0\x1D2\x3\x2\x2\x2\x1D1\x1CE\x3\x2\x2\x2\x1D2\x1D3\x3\x2"+
		"\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4#\x3\x2\x2\x2\x1D5"+
		"\x1D6\x5\xE0q\x2\x1D6\x1D7\b\x13\x1\x2\x1D7\x1EA\x3\x2\x2\x2\x1D8\x1D9"+
		"\x5\x8A\x46\x2\x1D9\x1DA\b\x13\x1\x2\x1DA\x1EA\x3\x2\x2\x2\x1DB\x1DC\a"+
		"\x9D\x2\x2\x1DC\x1DD\x5\xD0i\x2\x1DD\x1E2\b\x13\x1\x2\x1DE\x1DF\a\x1C"+
		"\x2\x2\x1DF\x1E0\x5\xCA\x66\x2\x1E0\x1E1\b\x13\x1\x2\x1E1\x1E3\x3\x2\x2"+
		"\x2\x1E2\x1DE\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2"+
		"\x1E4\x1E5\a\x9E\x2\x2\x1E5\x1EA\x3\x2\x2\x2\x1E6\x1E7\x5\xCA\x66\x2\x1E7"+
		"\x1E8\b\x13\x1\x2\x1E8\x1EA\x3\x2\x2\x2\x1E9\x1D5\x3\x2\x2\x2\x1E9\x1D8"+
		"\x3\x2\x2\x2\x1E9\x1DB\x3\x2\x2\x2\x1E9\x1E6\x3\x2\x2\x2\x1EA%\x3\x2\x2"+
		"\x2\x1EB\x1EC\a\x30\x2\x2\x1EC\x1F0\b\x14\x1\x2\x1ED\x1EE\x5(\x15\x2\x1EE"+
		"\x1EF\b\x14\x1\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1ED\x3\x2\x2\x2\x1F1\x1F2"+
		"\x3\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\'\x3\x2"+
		"\x2\x2\x1F4\x1F5\x5\x88\x45\x2\x1F5\x1F6\b\x15\x1\x2\x1F6)\x3\x2\x2\x2"+
		"\x1F7\x1F8\a<\x2\x2\x1F8\x1F9\a \x2\x2\x1F9\x1FD\b\x16\x1\x2\x1FA\x1FB"+
		"\x5,\x17\x2\x1FB\x1FC\b\x16\x1\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1FA\x3\x2"+
		"\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x1FF\x200\x3\x2\x2"+
		"\x2\x200+\x3\x2\x2\x2\x201\x204\a\x1D\x2\x2\x202\x204\a)\x2\x2\x203\x201"+
		"\x3\x2\x2\x2\x203\x202\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x206\x5"+
		"\xDEp\x2\x206\x207\b\x17\x1\x2\x207\x217\x3\x2\x2\x2\x208\x209\x5\xDE"+
		"p\x2\x209\x20A\b\x17\x1\x2\x20A\x215\x3\x2\x2\x2\x20B\x20C\x5\xE0q\x2"+
		"\x20C\x20D\b\x17\x1\x2\x20D\x215\x3\x2\x2\x2\x20E\x20F\x5\x8A\x46\x2\x20F"+
		"\x210\b\x17\x1\x2\x210\x215\x3\x2\x2\x2\x211\x212\x5\xCA\x66\x2\x212\x213"+
		"\b\x17\x1\x2\x213\x215\x3\x2\x2\x2\x214\x208\x3\x2\x2\x2\x214\x20B\x3"+
		"\x2\x2\x2\x214\x20E\x3\x2\x2\x2\x214\x211\x3\x2\x2\x2\x215\x217\x3\x2"+
		"\x2\x2\x216\x203\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2\x217-\x3\x2\x2\x2\x218"+
		"\x227\b\x18\x1\x2\x219\x21A\x5\x30\x19\x2\x21A\x21E\b\x18\x1\x2\x21B\x21C"+
		"\x5\x32\x1A\x2\x21C\x21D\b\x18\x1\x2\x21D\x21F\x3\x2\x2\x2\x21E\x21B\x3"+
		"\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x228\x3\x2\x2\x2\x220\x221\x5\x32"+
		"\x1A\x2\x221\x225\b\x18\x1\x2\x222\x223\x5\x30\x19\x2\x223\x224\b\x18"+
		"\x1\x2\x224\x226\x3\x2\x2\x2\x225\x222\x3\x2\x2\x2\x225\x226\x3\x2\x2"+
		"\x2\x226\x228\x3\x2\x2\x2\x227\x219\x3\x2\x2\x2\x227\x220\x3\x2\x2\x2"+
		"\x228/\x3\x2\x2\x2\x229\x22A\a\x36\x2\x2\x22A\x22B\x5\x34\x1B\x2\x22B"+
		"\x22C\b\x19\x1\x2\x22C\x31\x3\x2\x2\x2\x22D\x22E\a;\x2\x2\x22E\x22F\x5"+
		"\x34\x1B\x2\x22F\x230\b\x1A\x1\x2\x230\x33\x3\x2\x2\x2\x231\x232\a\x8D"+
		"\x2\x2\x232\x233\b\x1B\x1\x2\x233\x35\x3\x2\x2\x2\x234\x235\a\x45\x2\x2"+
		"\x235\x236\x5z>\x2\x236\x237\b\x1C\x1\x2\x237\x239\x3\x2\x2\x2\x238\x234"+
		"\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x37\x3\x2\x2\x2\x23A\x23B\x5\x4"+
		"\x3\x2\x23B\x23C\b\x1D\x1\x2\x23C\x245\b\x1D\x1\x2\x23D\x23E\x5:\x1E\x2"+
		"\x23E\x243\b\x1D\x1\x2\x23F\x240\a\x12\x2\x2\x240\x241\x5\x38\x1D\x2\x241"+
		"\x242\b\x1D\x1\x2\x242\x244\x3\x2\x2\x2\x243\x23F\x3\x2\x2\x2\x243\x244"+
		"\x3\x2\x2\x2\x244\x246\x3\x2\x2\x2\x245\x23D\x3\x2\x2\x2\x245\x246\x3"+
		"\x2\x2\x2\x246\x39\x3\x2\x2\x2\x247\x248\x5<\x1F\x2\x248\x249\b\x1E\x1"+
		"\x2\x249\x269\x3\x2\x2\x2\x24A\x24B\x5> \x2\x24B\x24C\b\x1E\x1\x2\x24C"+
		"\x269\x3\x2\x2\x2\x24D\x24E\x5@!\x2\x24E\x24F\b\x1E\x1\x2\x24F\x269\x3"+
		"\x2\x2\x2\x250\x251\x5\x44#\x2\x251\x252\b\x1E\x1\x2\x252\x269\x3\x2\x2"+
		"\x2\x253\x254\x5\x46$\x2\x254\x255\b\x1E\x1\x2\x255\x269\x3\x2\x2\x2\x256"+
		"\x257\x5H%\x2\x257\x258\b\x1E\x1\x2\x258\x269\x3\x2\x2\x2\x259\x25A\x5"+
		"\x42\"\x2\x25A\x25B\b\x1E\x1\x2\x25B\x269\x3\x2\x2\x2\x25C\x25D\x5J&\x2"+
		"\x25D\x25E\b\x1E\x1\x2\x25E\x269\x3\x2\x2\x2\x25F\x260\x5L\'\x2\x260\x261"+
		"\b\x1E\x1\x2\x261\x269\x3\x2\x2\x2\x262\x263\x5N(\x2\x263\x264\b\x1E\x1"+
		"\x2\x264\x269\x3\x2\x2\x2\x265\x266\x5P)\x2\x266\x267\b\x1E\x1\x2\x267"+
		"\x269\x3\x2\x2\x2\x268\x247\x3\x2\x2\x2\x268\x24A\x3\x2\x2\x2\x268\x24D"+
		"\x3\x2\x2\x2\x268\x250\x3\x2\x2\x2\x268\x253\x3\x2\x2\x2\x268\x256\x3"+
		"\x2\x2\x2\x268\x259\x3\x2\x2\x2\x268\x25C\x3\x2\x2\x2\x268\x25F\x3\x2"+
		"\x2\x2\x268\x262\x3\x2\x2\x2\x268\x265\x3\x2\x2\x2\x269;\x3\x2\x2\x2\x26A"+
		"\x26B\a\x35\x2\x2\x26B\x26E\b\x1F\x1\x2\x26C\x26D\a@\x2\x2\x26D\x26F\b"+
		"\x1F\x1\x2\x26E\x26C\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x270\x3\x2"+
		"\x2\x2\x270\x271\x5\xFE\x80\x2\x271\x276\b\x1F\x1\x2\x272\x273\a\x33\x2"+
		"\x2\x273\x274\x5Z.\x2\x274\x275\b\x1F\x1\x2\x275\x277\x3\x2\x2\x2\x276"+
		"\x272\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277=\x3\x2\x2\x2\x278\x279\a"+
		"$\x2\x2\x279\x27C\b \x1\x2\x27A\x27B\a@\x2\x2\x27B\x27D\b \x1\x2\x27C"+
		"\x27A\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x27F"+
		"\x5\\/\x2\x27F\x280\b \x1\x2\x280?\x3\x2\x2\x2\x281\x282\a&\x2\x2\x282"+
		"\x285\b!\x1\x2\x283\x284\a@\x2\x2\x284\x286\b!\x1\x2\x285\x283\x3\x2\x2"+
		"\x2\x285\x286\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x288\x5\\/\x2\x288"+
		"\x289\b!\x1\x2\x289\x41\x3\x2\x2\x2\x28A\x28B\a!\x2\x2\x28B\x28E\b\"\x1"+
		"\x2\x28C\x28D\a@\x2\x2\x28D\x28F\b\"\x1\x2\x28E\x28C\x3\x2\x2\x2\x28E"+
		"\x28F\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x291\x5Z.\x2\x291\x292\b"+
		"\"\x1\x2\x292\x43\x3\x2\x2\x2\x293\x294\a\x1A\x2\x2\x294\x297\b#\x1\x2"+
		"\x295\x296\a@\x2\x2\x296\x298\b#\x1\x2\x297\x295\x3\x2\x2\x2\x297\x298"+
		"\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29A\x5X-\x2\x29A\x29B\a\x42\x2"+
		"\x2\x29B\x29C\x5X-\x2\x29C\x29D\b#\x1\x2\x29D\x45\x3\x2\x2\x2\x29E\x29F"+
		"\a\x38\x2\x2\x29F\x2A2\b$\x1\x2\x2A0\x2A1\a@\x2\x2\x2A1\x2A3\b$\x1\x2"+
		"\x2A2\x2A0\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4"+
		"\x2A5\x5X-\x2\x2A5\x2A6\a\x42\x2\x2\x2A6\x2A7\x5X-\x2\x2A7\x2A8\b$\x1"+
		"\x2\x2A8G\x3\x2\x2\x2\x2A9\x2AA\a#\x2\x2\x2AA\x2AD\b%\x1\x2\x2AB\x2AC"+
		"\a@\x2\x2\x2AC\x2AE\b%\x1\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2"+
		"\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B0\x5X-\x2\x2B0\x2B1\a\x42\x2\x2\x2B1"+
		"\x2B2\x5X-\x2\x2B2\x2B3\b%\x1\x2\x2B3I\x3\x2\x2\x2\x2B4\x2B5\a\x32\x2"+
		"\x2\x2B5\x2B6\a%\x2\x2\x2B6\x2B7\x5`\x31\x2\x2B7\x2B8\b&\x1\x2\x2B8K\x3"+
		"\x2\x2\x2\x2B9\x2BA\a(\x2\x2\x2BA\x2BB\a%\x2\x2\x2BB\x2BC\x5`\x31\x2\x2BC"+
		"\x2BD\b\'\x1\x2\x2BDM\x3\x2\x2\x2\x2BE\x2BF\a(\x2\x2\x2BF\x2C0\aG\x2\x2"+
		"\x2C0\x2C1\x5^\x30\x2\x2C1\x2C2\b(\x1\x2\x2C2O\x3\x2\x2\x2\x2C3\x2C8\b"+
		")\x1\x2\x2C4\x2C5\a\x46\x2\x2\x2C5\x2C6\x5\xFE\x80\x2\x2C6\x2C7\b)\x1"+
		"\x2\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2C4\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2"+
		"\x2C9\x2D4\x3\x2\x2\x2\x2CA\x2CB\x5R*\x2\x2CB\x2CF\b)\x1\x2\x2CC\x2CD"+
		"\x5T+\x2\x2CD\x2CE\b)\x1\x2\x2CE\x2D0\x3\x2\x2\x2\x2CF\x2CC\x3\x2\x2\x2"+
		"\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D5\x3\x2\x2\x2\x2D1\x2D2\x5T+\x2\x2D2\x2D3"+
		"\b)\x1\x2\x2D3\x2D5\x3\x2\x2\x2\x2D4\x2CA\x3\x2\x2\x2\x2D4\x2D1\x3\x2"+
		"\x2\x2\x2D5\x2DC\x3\x2\x2\x2\x2D6\x2D8\b)\x1\x2\x2D7\x2D9\x5V,\x2\x2D8"+
		"\x2D7\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DA\x2DB"+
		"\x3\x2\x2\x2\x2DB\x2DD\x3\x2\x2\x2\x2DC\x2D6\x3\x2\x2\x2\x2DC\x2DD\x3"+
		"\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2DF\aG\x2\x2\x2DF\x2E0\x5h\x35\x2"+
		"\x2E0\x2E1\b)\x1\x2\x2E1Q\x3\x2\x2\x2\x2E2\x2E3\a(\x2\x2\x2E3\x2E4\x5"+
		"^\x30\x2\x2E4\x2E5\b*\x1\x2\x2E5S\x3\x2\x2\x2\x2E6\x2E7\a\x32\x2\x2\x2E7"+
		"\x2E8\x5^\x30\x2\x2E8\x2E9\b+\x1\x2\x2E9U\x3\x2\x2\x2\x2EA\x2F2\a\xAF"+
		"\x2\x2\x2EB\x2EC\x5\xFE\x80\x2\x2EC\x2ED\b,\x1\x2\x2ED\x2F3\x3\x2\x2\x2"+
		"\x2EE\x2EF\a\x39\x2\x2\x2EF\x2F0\x5\xFE\x80\x2\x2F0\x2F1\b,\x1\x2\x2F1"+
		"\x2F3\x3\x2\x2\x2\x2F2\x2EB\x3\x2\x2\x2\x2F2\x2EE\x3\x2\x2\x2\x2F3W\x3"+
		"\x2\x2\x2\x2F4\x2FC\a*\x2\x2\x2F5\x2F7\a/\x2\x2\x2F6\x2F5\x3\x2\x2\x2"+
		"\x2F6\x2F7\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F9\x5\x100\x81\x2"+
		"\x2F9\x2FA\b-\x1\x2\x2FA\x2FC\x3\x2\x2\x2\x2FB\x2F4\x3\x2\x2\x2\x2FB\x2F6"+
		"\x3\x2\x2\x2\x2FCY\x3\x2\x2\x2\x2FD\x2FE\a/\x2\x2\x2FE\x2FF\x5\x100\x81"+
		"\x2\x2FF\x300\b.\x1\x2\x300[\x3\x2\x2\x2\x301\x302\x5Z.\x2\x302\x303\b"+
		"/\x1\x2\x303\x30B\x3\x2\x2\x2\x304\x305\a*\x2\x2\x305\x30B\b/\x1\x2\x306"+
		"\x307\a\x39\x2\x2\x307\x30B\b/\x1\x2\x308\x309\a\x1B\x2\x2\x309\x30B\b"+
		"/\x1\x2\x30A\x301\x3\x2\x2\x2\x30A\x304\x3\x2\x2\x2\x30A\x306\x3\x2\x2"+
		"\x2\x30A\x308\x3\x2\x2\x2\x30B]\x3\x2\x2\x2\x30C\x30D\a\n\x2\x2\x30D\x30E"+
		"\x5\x62\x32\x2\x30E\x30F\a\v\x2\x2\x30F\x310\b\x30\x1\x2\x310_\x3\x2\x2"+
		"\x2\x311\x312\a\n\x2\x2\x312\x313\x5\x62\x32\x2\x313\x314\a\v\x2\x2\x314"+
		"\x315\b\x31\x1\x2\x315\x61\x3\x2\x2\x2\x316\x31A\b\x32\x1\x2\x317\x318"+
		"\x5\x66\x34\x2\x318\x319\b\x32\x1\x2\x319\x31B\x3\x2\x2\x2\x31A\x317\x3"+
		"\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x328\x3\x2\x2\x2\x31C\x31D\x5\x64"+
		"\x33\x2\x31D\x31F\b\x32\x1\x2\x31E\x320\a\xF\x2\x2\x31F\x31E\x3\x2\x2"+
		"\x2\x31F\x320\x3\x2\x2\x2\x320\x324\x3\x2\x2\x2\x321\x322\x5\x66\x34\x2"+
		"\x322\x323\b\x32\x1\x2\x323\x325\x3\x2\x2\x2\x324\x321\x3\x2\x2\x2\x324"+
		"\x325\x3\x2\x2\x2\x325\x327\x3\x2\x2\x2\x326\x31C\x3\x2\x2\x2\x327\x32A"+
		"\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x63\x3\x2"+
		"\x2\x2\x32A\x328\x3\x2\x2\x2\x32B\x32C\a/\x2\x2\x32C\x32D\x5\xC8\x65\x2"+
		"\x32D\x32E\b\x33\x1\x2\x32E\x332\a\n\x2\x2\x32F\x330\x5\x66\x34\x2\x330"+
		"\x331\b\x33\x1\x2\x331\x333\x3\x2\x2\x2\x332\x32F\x3\x2\x2\x2\x332\x333"+
		"\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334\x335\a\v\x2\x2\x335\x65\x3\x2"+
		"\x2\x2\x336\x337\x5\x94K\x2\x337\x33E\b\x34\x1\x2\x338\x33C\a\xF\x2\x2"+
		"\x339\x33A\x5\x66\x34\x2\x33A\x33B\b\x34\x1\x2\x33B\x33D\x3\x2\x2\x2\x33C"+
		"\x339\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33F\x3\x2\x2\x2\x33E\x338"+
		"\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33Fg\x3\x2\x2\x2\x340\x347\a\n\x2"+
		"\x2\x341\x342\x5\f\a\x2\x342\x343\b\x35\x1\x2\x343\x348\x3\x2\x2\x2\x344"+
		"\x345\x5j\x36\x2\x345\x346\b\x35\x1\x2\x346\x348\x3\x2\x2\x2\x347\x341"+
		"\x3\x2\x2\x2\x347\x344\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34A\a\v"+
		"\x2\x2\x34Ai\x3\x2\x2\x2\x34B\x34F\b\x36\x1\x2\x34C\x34D\x5l\x37\x2\x34D"+
		"\x34E\b\x36\x1\x2\x34E\x350\x3\x2\x2\x2\x34F\x34C\x3\x2\x2\x2\x34F\x350"+
		"\x3\x2\x2\x2\x350\x35D\x3\x2\x2\x2\x351\x352\x5n\x38\x2\x352\x354\b\x36"+
		"\x1\x2\x353\x355\a\xF\x2\x2\x354\x353\x3\x2\x2\x2\x354\x355\x3\x2\x2\x2"+
		"\x355\x359\x3\x2\x2\x2\x356\x357\x5l\x37\x2\x357\x358\b\x36\x1\x2\x358"+
		"\x35A\x3\x2\x2\x2\x359\x356\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\x35C"+
		"\x3\x2\x2\x2\x35B\x351\x3\x2\x2\x2\x35C\x35F\x3\x2\x2\x2\x35D\x35B\x3"+
		"\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35Ek\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2"+
		"\x360\x361\x5\xA8U\x2\x361\x368\b\x37\x1\x2\x362\x366\a\xF\x2\x2\x363"+
		"\x364\x5l\x37\x2\x364\x365\b\x37\x1\x2\x365\x367\x3\x2\x2\x2\x366\x363"+
		"\x3\x2\x2\x2\x366\x367\x3\x2\x2\x2\x367\x369\x3\x2\x2\x2\x368\x362\x3"+
		"\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369m\x3\x2\x2\x2\x36A\x36B\x5\x84\x43"+
		"\x2\x36B\x36C\b\x38\x1\x2\x36C\x383\x3\x2\x2\x2\x36D\x36E\x5p\x39\x2\x36E"+
		"\x36F\b\x38\x1\x2\x36F\x383\x3\x2\x2\x2\x370\x371\x5\x82\x42\x2\x371\x372"+
		"\b\x38\x1\x2\x372\x383\x3\x2\x2\x2\x373\x374\x5r:\x2\x374\x375\b\x38\x1"+
		"\x2\x375\x383\x3\x2\x2\x2\x376\x377\x5t;\x2\x377\x378\b\x38\x1\x2\x378"+
		"\x383\x3\x2\x2\x2\x379\x37A\x5\x86\x44\x2\x37A\x37B\b\x38\x1\x2\x37B\x383"+
		"\x3\x2\x2\x2\x37C\x37D\x5v<\x2\x37D\x37E\b\x38\x1\x2\x37E\x383\x3\x2\x2"+
		"\x2\x37F\x380\x5x=\x2\x380\x381\b\x38\x1\x2\x381\x383\x3\x2\x2\x2\x382"+
		"\x36A\x3\x2\x2\x2\x382\x36D\x3\x2\x2\x2\x382\x370\x3\x2\x2\x2\x382\x373"+
		"\x3\x2\x2\x2\x382\x376\x3\x2\x2\x2\x382\x379\x3\x2\x2\x2\x382\x37C\x3"+
		"\x2\x2\x2\x382\x37F\x3\x2\x2\x2\x383o\x3\x2\x2\x2\x384\x385\a=\x2\x2\x385"+
		"\x386\x5h\x35\x2\x386\x387\b\x39\x1\x2\x387q\x3\x2\x2\x2\x388\x389\a/"+
		"\x2\x2\x389\x38A\x5\xC8\x65\x2\x38A\x38B\b:\x1\x2\x38B\x38C\x5h\x35\x2"+
		"\x38C\x38D\b:\x1\x2\x38Ds\x3\x2\x2\x2\x38E\x38F\b;\x1\x2\x38F\x392\a\x41"+
		"\x2\x2\x390\x391\a@\x2\x2\x391\x393\b;\x1\x2\x392\x390\x3\x2\x2\x2\x392"+
		"\x393\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x395\x5\xC8\x65\x2\x395\x396"+
		"\x5h\x35\x2\x396\x397\b;\x1\x2\x397u\x3\x2\x2\x2\x398\x399\a\x1F\x2\x2"+
		"\x399\x39A\a\x9D\x2\x2\x39A\x39B\x5\xD0i\x2\x39B\x39C\a\x1C\x2\x2\x39C"+
		"\x39D\x5\xCA\x66\x2\x39D\x39E\a\x9E\x2\x2\x39E\x39F\b<\x1\x2\x39Fw\x3"+
		"\x2\x2\x2\x3A0\x3A1\a\x45\x2\x2\x3A1\x3A2\x5z>\x2\x3A2\x3A3\b=\x1\x2\x3A3"+
		"y\x3\x2\x2\x2\x3A4\x3A5\x5|?\x2\x3A5\x3A6\b>\x1\x2\x3A6\x3AB\x3\x2\x2"+
		"\x2\x3A7\x3A8\x5~@\x2\x3A8\x3A9\b>\x1\x2\x3A9\x3AB\x3\x2\x2\x2\x3AA\x3A4"+
		"\x3\x2\x2\x2\x3AA\x3A7\x3\x2\x2\x2\x3AB{\x3\x2\x2\x2\x3AC\x3AD\x5\xCA"+
		"\x66\x2\x3AD\x3AE\b?\x1\x2\x3AE\x3B4\a\n\x2\x2\x3AF\x3B0\x5\x80\x41\x2"+
		"\x3B0\x3B1\b?\x1\x2\x3B1\x3B3\x3\x2\x2\x2\x3B2\x3AF\x3\x2\x2\x2\x3B3\x3B6"+
		"\x3\x2\x2\x2\x3B4\x3B2\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B7\x3"+
		"\x2\x2\x2\x3B6\x3B4\x3\x2\x2\x2\x3B7\x3B8\a\v\x2\x2\x3B8}\x3\x2\x2\x2"+
		"\x3B9\x3C5\b@\x1\x2\x3BA\x3C6\a\x9C\x2\x2\x3BB\x3C1\a\x9D\x2\x2\x3BC\x3BD"+
		"\x5\xCA\x66\x2\x3BD\x3BE\b@\x1\x2\x3BE\x3C0\x3\x2\x2\x2\x3BF\x3BC\x3\x2"+
		"\x2\x2\x3C0\x3C3\x3\x2\x2\x2\x3C1\x3BF\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2"+
		"\x2\x3C2\x3C4\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C4\x3C6\a\x9E\x2\x2"+
		"\x3C5\x3BA\x3\x2\x2\x2\x3C5\x3BB\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7"+
		"\x3D6\a\n\x2\x2\x3C8\x3CE\a\x9D\x2\x2\x3C9\x3CA\x5\x80\x41\x2\x3CA\x3CB"+
		"\b@\x1\x2\x3CB\x3CD\x3\x2\x2\x2\x3CC\x3C9\x3\x2\x2\x2\x3CD\x3D0\x3\x2"+
		"\x2\x2\x3CE\x3CC\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D1\x3\x2\x2"+
		"\x2\x3D0\x3CE\x3\x2\x2\x2\x3D1\x3D2\b@\x1\x2\x3D2\x3D5\a\x9E\x2\x2\x3D3"+
		"\x3D5\a\x9C\x2\x2\x3D4\x3C8\x3\x2\x2\x2\x3D4\x3D3\x3\x2\x2\x2\x3D5\x3D8"+
		"\x3\x2\x2\x2\x3D6\x3D4\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2\x2\x3D7\x3D9\x3"+
		"\x2\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D9\x3DA\a\v\x2\x2\x3DA\x7F\x3\x2\x2"+
		"\x2\x3DB\x3DC\x5\xFE\x80\x2\x3DC\x3DD\b\x41\x1\x2\x3DD\x3ED\x3\x2\x2\x2"+
		"\x3DE\x3DF\x5\x102\x82\x2\x3DF\x3E0\b\x41\x1\x2\x3E0\x3ED\x3\x2\x2\x2"+
		"\x3E1\x3E2\x5\xEEx\x2\x3E2\x3E3\b\x41\x1\x2\x3E3\x3ED\x3\x2\x2\x2\x3E4"+
		"\x3E5\x5\xF0y\x2\x3E5\x3E6\b\x41\x1\x2\x3E6\x3ED\x3\x2\x2\x2\x3E7\x3E8"+
		"\x5\xF8}\x2\x3E8\x3E9\b\x41\x1\x2\x3E9\x3ED\x3\x2\x2\x2\x3EA\x3EB\a\x43"+
		"\x2\x2\x3EB\x3ED\b\x41\x1\x2\x3EC\x3DB\x3\x2\x2\x2\x3EC\x3DE\x3\x2\x2"+
		"\x2\x3EC\x3E1\x3\x2\x2\x2\x3EC\x3E4\x3\x2\x2\x2\x3EC\x3E7\x3\x2\x2\x2"+
		"\x3EC\x3EA\x3\x2\x2\x2\x3ED\x81\x3\x2\x2\x2\x3EE\x3EF\a\x37\x2\x2\x3EF"+
		"\x3F0\x5h\x35\x2\x3F0\x3F1\b\x42\x1\x2\x3F1\x83\x3\x2\x2\x2\x3F2\x3F3"+
		"\x5h\x35\x2\x3F3\x3FA\b\x43\x1\x2\x3F4\x3F5\a\x44\x2\x2\x3F5\x3F6\x5h"+
		"\x35\x2\x3F6\x3F7\b\x43\x1\x2\x3F7\x3F9\x3\x2\x2\x2\x3F8\x3F4\x3\x2\x2"+
		"\x2\x3F9\x3FC\x3\x2\x2\x2\x3FA\x3F8\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2"+
		"\x3FB\x85\x3\x2\x2\x2\x3FC\x3FA\x3\x2\x2\x2\x3FD\x3FE\a.\x2\x2\x3FE\x3FF"+
		"\x5\x88\x45\x2\x3FF\x400\b\x44\x1\x2\x400\x87\x3\x2\x2\x2\x401\x402\x5"+
		"\xDEp\x2\x402\x403\b\x45\x1\x2\x403\x40B\x3\x2\x2\x2\x404\x405\x5\xE0"+
		"q\x2\x405\x406\b\x45\x1\x2\x406\x40B\x3\x2\x2\x2\x407\x408\x5\x8A\x46"+
		"\x2\x408\x409\b\x45\x1\x2\x409\x40B\x3\x2\x2\x2\x40A\x401\x3\x2\x2\x2"+
		"\x40A\x404\x3\x2\x2\x2\x40A\x407\x3\x2\x2\x2\x40B\x89\x3\x2\x2\x2\x40C"+
		"\x40D\x5\x100\x81\x2\x40D\x40E\x5\x8CG\x2\x40E\x40F\b\x46\x1\x2\x40F\x8B"+
		"\x3\x2\x2\x2\x410\x425\a\x9C\x2\x2\x411\x412\bG\x1\x2\x412\x415\a\x9D"+
		"\x2\x2\x413\x414\a,\x2\x2\x414\x416\bG\x1\x2\x415\x413\x3\x2\x2\x2\x415"+
		"\x416\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x418\x5\xD0i\x2\x418\x41F"+
		"\bG\x1\x2\x419\x41A\a\x3\x2\x2\x41A\x41B\x5\xD0i\x2\x41B\x41C\bG\x1\x2"+
		"\x41C\x41E\x3\x2\x2\x2\x41D\x419\x3\x2\x2\x2\x41E\x421\x3\x2\x2\x2\x41F"+
		"\x41D\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x422\x3\x2\x2\x2\x421\x41F"+
		"\x3\x2\x2\x2\x422\x423\a\x9E\x2\x2\x423\x425\x3\x2\x2\x2\x424\x410\x3"+
		"\x2\x2\x2\x424\x411\x3\x2\x2\x2\x425\x8D\x3\x2\x2\x2\x426\x436\a\x9C\x2"+
		"\x2\x427\x428\a\x9D\x2\x2\x428\x429\x5\xD0i\x2\x429\x430\bH\x1\x2\x42A"+
		"\x42B\a\x3\x2\x2\x42B\x42C\x5\xD0i\x2\x42C\x42D\bH\x1\x2\x42D\x42F\x3"+
		"\x2\x2\x2\x42E\x42A\x3\x2\x2\x2\x42F\x432\x3\x2\x2\x2\x430\x42E\x3\x2"+
		"\x2\x2\x430\x431\x3\x2\x2\x2\x431\x433\x3\x2\x2\x2\x432\x430\x3\x2\x2"+
		"\x2\x433\x434\a\x9E\x2\x2\x434\x436\x3\x2\x2\x2\x435\x426\x3\x2\x2\x2"+
		"\x435\x427\x3\x2\x2\x2\x436\x8F\x3\x2\x2\x2\x437\x438\a\n\x2\x2\x438\x43C"+
		"\bI\x1\x2\x439\x43A\x5\x92J\x2\x43A\x43B\bI\x1\x2\x43B\x43D\x3\x2\x2\x2"+
		"\x43C\x439\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E"+
		"\x43F\a\v\x2\x2\x43F\x91\x3\x2\x2\x2\x440\x441\x5\x94K\x2\x441\x448\b"+
		"J\x1\x2\x442\x446\a\xF\x2\x2\x443\x444\x5\x92J\x2\x444\x445\bJ\x1\x2\x445"+
		"\x447\x3\x2\x2\x2\x446\x443\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447\x449"+
		"\x3\x2\x2\x2\x448\x442\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x93\x3\x2"+
		"\x2\x2\x44A\x44B\bK\x1\x2\x44B\x44C\x5\xA6T\x2\x44C\x44D\x5\x96L\x2\x44D"+
		"\x454\x3\x2\x2\x2\x44E\x44F\bK\x1\x2\x44F\x451\x5\xA2R\x2\x450\x452\x5"+
		"\x96L\x2\x451\x450\x3\x2\x2\x2\x451\x452\x3\x2\x2\x2\x452\x454\x3\x2\x2"+
		"\x2\x453\x44A\x3\x2\x2\x2\x453\x44E\x3\x2\x2\x2\x454\x95\x3\x2\x2\x2\x455"+
		"\x456\x5\x98M\x2\x456\x45F\x5\x9AN\x2\x457\x45B\a\x12\x2\x2\x458\x459"+
		"\x5\x98M\x2\x459\x45A\x5\x9AN\x2\x45A\x45C\x3\x2\x2\x2\x45B\x458\x3\x2"+
		"\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45E\x3\x2\x2\x2\x45D\x457\x3\x2\x2"+
		"\x2\x45E\x461\x3\x2\x2\x2\x45F\x45D\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2"+
		"\x460\x97\x3\x2\x2\x2\x461\x45F\x3\x2\x2\x2\x462\x463\x5\xC8\x65\x2\x463"+
		"\x464\bM\x1\x2\x464\x468\x3\x2\x2\x2\x465\x466\a\xE\x2\x2\x466\x468\b"+
		"M\x1\x2\x467\x462\x3\x2\x2\x2\x467\x465\x3\x2\x2\x2\x468\x99\x3\x2\x2"+
		"\x2\x469\x46E\x5\x9CO\x2\x46A\x46B\a\x3\x2\x2\x46B\x46D\x5\x9CO\x2\x46C"+
		"\x46A\x3\x2\x2\x2\x46D\x470\x3\x2\x2\x2\x46E\x46C\x3\x2\x2\x2\x46E\x46F"+
		"\x3\x2\x2\x2\x46F\x9B\x3\x2\x2\x2\x470\x46E\x3\x2\x2\x2\x471\x472\x5\x9E"+
		"P\x2\x472\x473\bO\x1\x2\x473\x9D\x3\x2\x2\x2\x474\x475\x5\xC6\x64\x2\x475"+
		"\x476\bP\x1\x2\x476\x47B\x3\x2\x2\x2\x477\x478\x5\xA2R\x2\x478\x479\b"+
		"P\x1\x2\x479\x47B\x3\x2\x2\x2\x47A\x474\x3\x2\x2\x2\x47A\x477\x3\x2\x2"+
		"\x2\x47B\x9F\x3\x2\x2\x2\x47C\x47D\a\x9D\x2\x2\x47D\x481\bQ\x1\x2\x47E"+
		"\x47F\x5\x9EP\x2\x47F\x480\bQ\x1\x2\x480\x482\x3\x2\x2\x2\x481\x47E\x3"+
		"\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483\x481\x3\x2\x2\x2\x483\x484\x3\x2"+
		"\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\a\x9E\x2\x2\x486\xA1\x3\x2\x2\x2"+
		"\x487\x488\x5\xA0Q\x2\x488\x489\bR\x1\x2\x489\x48D\x3\x2\x2\x2\x48A\x48B"+
		"\bR\x1\x2\x48B\x48D\x5\xA4S\x2\x48C\x487\x3\x2\x2\x2\x48C\x48A\x3\x2\x2"+
		"\x2\x48D\xA3\x3\x2\x2\x2\x48E\x48F\a\xA1\x2\x2\x48F\x490\x5\x96L\x2\x490"+
		"\x491\a\xA2\x2\x2\x491\xA5\x3\x2\x2\x2\x492\x493\x5\xC6\x64\x2\x493\x494"+
		"\bT\x1\x2\x494\xA7\x3\x2\x2\x2\x495\x496\bU\x1\x2\x496\x497\x5\xA6T\x2"+
		"\x497\x498\x5\xAAV\x2\x498\x49F\x3\x2\x2\x2\x499\x49A\bU\x1\x2\x49A\x49C"+
		"\x5\xBE`\x2\x49B\x49D\x5\xAAV\x2\x49C\x49B\x3\x2\x2\x2\x49C\x49D\x3\x2"+
		"\x2\x2\x49D\x49F\x3\x2\x2\x2\x49E\x495\x3\x2\x2\x2\x49E\x499\x3\x2\x2"+
		"\x2\x49F\xA9\x3\x2\x2\x2\x4A0\x4A1\x5\xB0Y\x2\x4A1\x4A2\x5\xACW\x2\x4A2"+
		"\x4A7\x3\x2\x2\x2\x4A3\x4A4\x5\xCA\x66\x2\x4A4\x4A5\x5\xACW\x2\x4A5\x4A7"+
		"\x3\x2\x2\x2\x4A6\x4A0\x3\x2\x2\x2\x4A6\x4A3\x3\x2\x2\x2\x4A7\x4B5\x3"+
		"\x2\x2\x2\x4A8\x4B1\a\x12\x2\x2\x4A9\x4AA\x5\xB0Y\x2\x4AA\x4AB\x5\xAC"+
		"W\x2\x4AB\x4B0\x3\x2\x2\x2\x4AC\x4AD\x5\xCA\x66\x2\x4AD\x4AE\x5\xACW\x2"+
		"\x4AE\x4B0\x3\x2\x2\x2\x4AF\x4A9\x3\x2\x2\x2\x4AF\x4AC\x3\x2\x2\x2\x4B0"+
		"\x4B2\x3\x2\x2\x2\x4B1\x4AF\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B4"+
		"\x3\x2\x2\x2\x4B3\x4A8\x3\x2\x2\x2\x4B4\x4B7\x3\x2\x2\x2\x4B5\x4B3\x3"+
		"\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\xAB\x3\x2\x2\x2\x4B7\x4B5\x3\x2\x2"+
		"\x2\x4B8\x4BD\x5\xAEX\x2\x4B9\x4BA\a\x3\x2\x2\x4BA\x4BC\x5\xAEX\x2\x4BB"+
		"\x4B9\x3\x2\x2\x2\x4BC\x4BF\x3\x2\x2\x2\x4BD\x4BB\x3\x2\x2\x2\x4BD\x4BE"+
		"\x3\x2\x2\x2\x4BE\xAD\x3\x2\x2\x2\x4BF\x4BD\x3\x2\x2\x2\x4C0\x4C1\x5\xC4"+
		"\x63\x2\x4C1\x4C2\bX\x1\x2\x4C2\xAF\x3\x2\x2\x2\x4C3\x4C4\x5\xB2Z\x2\x4C4"+
		"\x4CB\bY\x1\x2\x4C5\x4C6\a\x18\x2\x2\x4C6\x4C7\x5\xB2Z\x2\x4C7\x4C8\b"+
		"Y\x1\x2\x4C8\x4CA\x3\x2\x2\x2\x4C9\x4C5\x3\x2\x2\x2\x4CA\x4CD\x3\x2\x2"+
		"\x2\x4CB\x4C9\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\xB1\x3\x2\x2\x2\x4CD"+
		"\x4CB\x3\x2\x2\x2\x4CE\x4CF\x5\xB4[\x2\x4CF\x4D6\bZ\x1\x2\x4D0\x4D1\a"+
		"\x16\x2\x2\x4D1\x4D2\x5\xB4[\x2\x4D2\x4D3\bZ\x1\x2\x4D3\x4D5\x3\x2\x2"+
		"\x2\x4D4\x4D0\x3\x2\x2\x2\x4D5\x4D8\x3\x2\x2\x2\x4D6\x4D4\x3\x2\x2\x2"+
		"\x4D6\x4D7\x3\x2\x2\x2\x4D7\xB3\x3\x2\x2\x2\x4D8\x4D6\x3\x2\x2\x2\x4D9"+
		"\x4DA\x5\xB6\\\x2\x4DA\x4DB\b[\x1\x2\x4DB\x4E1\x3\x2\x2\x2\x4DC\x4DD\a"+
		"\r\x2\x2\x4DD\x4DE\x5\xB6\\\x2\x4DE\x4DF\b[\x1\x2\x4DF\x4E1\x3\x2\x2\x2"+
		"\x4E0\x4D9\x3\x2\x2\x2\x4E0\x4DC\x3\x2\x2\x2\x4E1\xB5\x3\x2\x2\x2\x4E2"+
		"\x4E3\x5\xB8]\x2\x4E3\x4EA\b\\\x1\x2\x4E4\x4E5\a\t\x2\x2\x4E5\x4EB\b\\"+
		"\x1\x2\x4E6\x4E7\a\x4\x2\x2\x4E7\x4EB\b\\\x1\x2\x4E8\x4E9\a\x10\x2\x2"+
		"\x4E9\x4EB\b\\\x1\x2\x4EA\x4E4\x3\x2\x2\x2\x4EA\x4E6\x3\x2\x2\x2\x4EA"+
		"\x4E8\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\xB7\x3\x2\x2\x2\x4EC\x4ED"+
		"\x5\xFE\x80\x2\x4ED\x4EE\b]\x1\x2\x4EE\x4FB\x3\x2\x2\x2\x4EF\x4F0\a\xE"+
		"\x2\x2\x4F0\x4FB\b]\x1\x2\x4F1\x4F2\a\x19\x2\x2\x4F2\x4F3\x5\xBA^\x2\x4F3"+
		"\x4F4\b]\x1\x2\x4F4\x4FB\x3\x2\x2\x2\x4F5\x4F6\a\x9D\x2\x2\x4F6\x4F7\x5"+
		"\xB0Y\x2\x4F7\x4F8\b]\x1\x2\x4F8\x4F9\a\x9E\x2\x2\x4F9\x4FB\x3\x2\x2\x2"+
		"\x4FA\x4EC\x3\x2\x2\x2\x4FA\x4EF\x3\x2\x2\x2\x4FA\x4F1\x3\x2\x2\x2\x4FA"+
		"\x4F5\x3\x2\x2\x2\x4FB\xB9\x3\x2\x2\x2\x4FC\x4FD\x5\xBC_\x2\x4FD\x4FE"+
		"\b^\x1\x2\x4FE\x50F\x3\x2\x2\x2\x4FF\x50B\a\x9D\x2\x2\x500\x501\x5\xBC"+
		"_\x2\x501\x508\b^\x1\x2\x502\x503\a\x18\x2\x2\x503\x504\x5\xBC_\x2\x504"+
		"\x505\b^\x1\x2\x505\x507\x3\x2\x2\x2\x506\x502\x3\x2\x2\x2\x507\x50A\x3"+
		"\x2\x2\x2\x508\x506\x3\x2\x2\x2\x508\x509\x3\x2\x2\x2\x509\x50C\x3\x2"+
		"\x2\x2\x50A\x508\x3\x2\x2\x2\x50B\x500\x3\x2\x2\x2\x50B\x50C\x3\x2\x2"+
		"\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50F\a\x9E\x2\x2\x50E\x4FC\x3\x2\x2\x2"+
		"\x50E\x4FF\x3\x2\x2\x2\x50F\xBB\x3\x2\x2\x2\x510\x511\x5\xFE\x80\x2\x511"+
		"\x512\b_\x1\x2\x512\x51E\x3\x2\x2\x2\x513\x514\a\xE\x2\x2\x514\x51E\b"+
		"_\x1\x2\x515\x51B\a\r\x2\x2\x516\x517\x5\xFE\x80\x2\x517\x518\b_\x1\x2"+
		"\x518\x51C\x3\x2\x2\x2\x519\x51A\a\xE\x2\x2\x51A\x51C\b_\x1\x2\x51B\x516"+
		"\x3\x2\x2\x2\x51B\x519\x3\x2\x2\x2\x51C\x51E\x3\x2\x2\x2\x51D\x510\x3"+
		"\x2\x2\x2\x51D\x513\x3\x2\x2\x2\x51D\x515\x3\x2\x2\x2\x51E\xBD\x3\x2\x2"+
		"\x2\x51F\x520\x5\xC2\x62\x2\x520\x521\b`\x1\x2\x521\x525\x3\x2\x2\x2\x522"+
		"\x523\b`\x1\x2\x523\x525\x5\xC0\x61\x2\x524\x51F\x3\x2\x2\x2\x524\x522"+
		"\x3\x2\x2\x2\x525\xBF\x3\x2\x2\x2\x526\x527\a\xA1\x2\x2\x527\x528\x5\xAA"+
		"V\x2\x528\x529\a\xA2\x2\x2\x529\xC1\x3\x2\x2\x2\x52A\x52B\a\x9D\x2\x2"+
		"\x52B\x52F\b\x62\x1\x2\x52C\x52D\x5\xC4\x63\x2\x52D\x52E\b\x62\x1\x2\x52E"+
		"\x530\x3\x2\x2\x2\x52F\x52C\x3\x2\x2\x2\x530\x531\x3\x2\x2\x2\x531\x52F"+
		"\x3\x2\x2\x2\x531\x532\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533\x534\a\x9E"+
		"\x2\x2\x534\xC3\x3\x2\x2\x2\x535\x536\x5\xC6\x64\x2\x536\x537\b\x63\x1"+
		"\x2\x537\x53C\x3\x2\x2\x2\x538\x539\x5\xBE`\x2\x539\x53A\b\x63\x1\x2\x53A"+
		"\x53C\x3\x2\x2\x2\x53B\x535\x3\x2\x2\x2\x53B\x538\x3\x2\x2\x2\x53C\xC5"+
		"\x3\x2\x2\x2\x53D\x53E\x5\xCA\x66\x2\x53E\x53F\b\x64\x1\x2\x53F\x544\x3"+
		"\x2\x2\x2\x540\x541\x5\xCEh\x2\x541\x542\b\x64\x1\x2\x542\x544\x3\x2\x2"+
		"\x2\x543\x53D\x3\x2\x2\x2\x543\x540\x3\x2\x2\x2\x544\xC7\x3\x2\x2\x2\x545"+
		"\x546\x5\xCA\x66\x2\x546\x547\b\x65\x1\x2\x547\x54C\x3\x2\x2\x2\x548\x549"+
		"\x5\xFE\x80\x2\x549\x54A\b\x65\x1\x2\x54A\x54C\x3\x2\x2\x2\x54B\x545\x3"+
		"\x2\x2\x2\x54B\x548\x3\x2\x2\x2\x54C\xC9\x3\x2\x2\x2\x54D\x54E\x5\xCC"+
		"g\x2\x54E\x54F\b\x66\x1\x2\x54F\xCB\x3\x2\x2\x2\x550\x551\t\x2\x2\x2\x551"+
		"\xCD\x3\x2\x2\x2\x552\x553\x5\xFE\x80\x2\x553\x554\bh\x1\x2\x554\x564"+
		"\x3\x2\x2\x2\x555\x556\x5\xEEx\x2\x556\x557\bh\x1\x2\x557\x564\x3\x2\x2"+
		"\x2\x558\x559\x5\xF0y\x2\x559\x55A\bh\x1\x2\x55A\x564\x3\x2\x2\x2\x55B"+
		"\x55C\x5\xF8}\x2\x55C\x55D\bh\x1\x2\x55D\x564\x3\x2\x2\x2\x55E\x55F\x5"+
		"\x102\x82\x2\x55F\x560\bh\x1\x2\x560\x564\x3\x2\x2\x2\x561\x562\a\x9C"+
		"\x2\x2\x562\x564\bh\x1\x2\x563\x552\x3\x2\x2\x2\x563\x555\x3\x2\x2\x2"+
		"\x563\x558\x3\x2\x2\x2\x563\x55B\x3\x2\x2\x2\x563\x55E\x3\x2\x2\x2\x563"+
		"\x561\x3\x2\x2\x2\x564\xCF\x3\x2\x2\x2\x565\x566\x5\xD2j\x2\x566\x56D"+
		"\bi\x1\x2\x567\x568\a\x14\x2\x2\x568\x569\x5\xD2j\x2\x569\x56A\bi\x1\x2"+
		"\x56A\x56C\x3\x2\x2\x2\x56B\x567\x3\x2\x2\x2\x56C\x56F\x3\x2\x2\x2\x56D"+
		"\x56B\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\xD1\x3\x2\x2\x2\x56F\x56D"+
		"\x3\x2\x2\x2\x570\x571\x5\xD4k\x2\x571\x578\bj\x1\x2\x572\x573\a\x13\x2"+
		"\x2\x573\x574\x5\xD4k\x2\x574\x575\bj\x1\x2\x575\x577\x3\x2\x2\x2\x576"+
		"\x572\x3\x2\x2\x2\x577\x57A\x3\x2\x2\x2\x578\x576\x3\x2\x2\x2\x578\x579"+
		"\x3\x2\x2\x2\x579\xD3\x3\x2\x2\x2\x57A\x578\x3\x2\x2\x2\x57B\x57C\x5\xD6"+
		"l\x2\x57C\x59E\bk\x1\x2\x57D\x57E\a\x11\x2\x2\x57E\x57F\x5\xD6l\x2\x57F"+
		"\x580\bk\x1\x2\x580\x59F\x3\x2\x2\x2\x581\x582\a\a\x2\x2\x582\x583\x5"+
		"\xD6l\x2\x583\x584\bk\x1\x2\x584\x59F\x3\x2\x2\x2\x585\x586\a\x6\x2\x2"+
		"\x586\x587\x5\xD6l\x2\x587\x588\bk\x1\x2\x588\x59F\x3\x2\x2\x2\x589\x58A"+
		"\a\x15\x2\x2\x58A\x58B\x5\xD6l\x2\x58B\x58C\bk\x1\x2\x58C\x59F\x3\x2\x2"+
		"\x2\x58D\x58E\a\b\x2\x2\x58E\x58F\x5\xD6l\x2\x58F\x590\bk\x1\x2\x590\x59F"+
		"\x3\x2\x2\x2\x591\x592\a\x17\x2\x2\x592\x593\x5\xD6l\x2\x593\x594\bk\x1"+
		"\x2\x594\x59F\x3\x2\x2\x2\x595\x596\a\x31\x2\x2\x596\x597\x5\x8EH\x2\x597"+
		"\x598\bk\x1\x2\x598\x59F\x3\x2\x2\x2\x599\x59A\a:\x2\x2\x59A\x59B\a\x31"+
		"\x2\x2\x59B\x59C\x5\x8EH\x2\x59C\x59D\bk\x1\x2\x59D\x59F\x3\x2\x2\x2\x59E"+
		"\x57D\x3\x2\x2\x2\x59E\x581\x3\x2\x2\x2\x59E\x585\x3\x2\x2\x2\x59E\x589"+
		"\x3\x2\x2\x2\x59E\x58D\x3\x2\x2\x2\x59E\x591\x3\x2\x2\x2\x59E\x595\x3"+
		"\x2\x2\x2\x59E\x599\x3\x2\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\xD5\x3\x2\x2"+
		"\x2\x5A0\x5A1\x5\xD8m\x2\x5A1\x5C4\bl\x1\x2\x5A2\x5A3\a\x10\x2\x2\x5A3"+
		"\x5A4\x5\xD8m\x2\x5A4\x5A5\bl\x1\x2\x5A5\x5C3\x3\x2\x2\x2\x5A6\x5A7\a"+
		"\x5\x2\x2\x5A7\x5A8\x5\xD8m\x2\x5A8\x5A9\bl\x1\x2\x5A9\x5C3\x3\x2\x2\x2"+
		"\x5AA\x5B1\bl\x1\x2\x5AB\x5AC\x5\xF4{\x2\x5AC\x5AD\bl\x1\x2\x5AD\x5B2"+
		"\x3\x2\x2\x2\x5AE\x5AF\x5\xF6|\x2\x5AF\x5B0\bl\x1\x2\x5B0\x5B2\x3\x2\x2"+
		"\x2\x5B1\x5AB\x3\x2\x2\x2\x5B1\x5AE\x3\x2\x2\x2\x5B2\x5BD\x3\x2\x2\x2"+
		"\x5B3\x5B4\a\x4\x2\x2\x5B4\x5B5\x5\xDAn\x2\x5B5\x5B6\bl\x1\x2\x5B6\x5BC"+
		"\x3\x2\x2\x2\x5B7\x5B8\a\x16\x2\x2\x5B8\x5B9\x5\xDAn\x2\x5B9\x5BA\bl\x1"+
		"\x2\x5BA\x5BC\x3\x2\x2\x2\x5BB\x5B3\x3\x2\x2\x2\x5BB\x5B7\x3\x2\x2\x2"+
		"\x5BC\x5BF\x3\x2\x2\x2\x5BD\x5BB\x3\x2\x2\x2\x5BD\x5BE\x3\x2\x2\x2\x5BE"+
		"\x5C0\x3\x2\x2\x2\x5BF\x5BD\x3\x2\x2\x2\x5C0\x5C1\bl\x1\x2\x5C1\x5C3\x3"+
		"\x2\x2\x2\x5C2\x5A2\x3\x2\x2\x2\x5C2\x5A6\x3\x2\x2\x2\x5C2\x5AA\x3\x2"+
		"\x2\x2\x5C3\x5C6\x3\x2\x2\x2\x5C4\x5C2\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2"+
		"\x2\x5C5\xD7\x3\x2\x2\x2\x5C6\x5C4\x3\x2\x2\x2\x5C7\x5C8\x5\xDAn\x2\x5C8"+
		"\x5D3\bm\x1\x2\x5C9\x5CA\a\x4\x2\x2\x5CA\x5CB\x5\xDAn\x2\x5CB\x5CC\bm"+
		"\x1\x2\x5CC\x5D2\x3\x2\x2\x2\x5CD\x5CE\a\x16\x2\x2\x5CE\x5CF\x5\xDAn\x2"+
		"\x5CF\x5D0\bm\x1\x2\x5D0\x5D2\x3\x2\x2\x2\x5D1\x5C9\x3\x2\x2\x2\x5D1\x5CD"+
		"\x3\x2\x2\x2\x5D2\x5D5\x3\x2\x2\x2\x5D3\x5D1\x3\x2\x2\x2\x5D3\x5D4\x3"+
		"\x2\x2\x2\x5D4\xD9\x3\x2\x2\x2\x5D5\x5D3\x3\x2\x2\x2\x5D6\x5D7\a\x19\x2"+
		"\x2\x5D7\x5D8\x5\xDCo\x2\x5D8\x5D9\bn\x1\x2\x5D9\x5E6\x3\x2\x2\x2\x5DA"+
		"\x5DB\a\x10\x2\x2\x5DB\x5DC\x5\xDCo\x2\x5DC\x5DD\bn\x1\x2\x5DD\x5E6\x3"+
		"\x2\x2\x2\x5DE\x5DF\a\x5\x2\x2\x5DF\x5E0\x5\xDCo\x2\x5E0\x5E1\bn\x1\x2"+
		"\x5E1\x5E6\x3\x2\x2\x2\x5E2\x5E3\x5\xDCo\x2\x5E3\x5E4\bn\x1\x2\x5E4\x5E6"+
		"\x3\x2\x2\x2\x5E5\x5D6\x3\x2\x2\x2\x5E5\x5DA\x3\x2\x2\x2\x5E5\x5DE\x3"+
		"\x2\x2\x2\x5E5\x5E2\x3\x2\x2\x2\x5E6\xDB\x3\x2\x2\x2\x5E7\x5E8\x5\xDE"+
		"p\x2\x5E8\x5E9\bo\x1\x2\x5E9\x601\x3\x2\x2\x2\x5EA\x5EB\x5\xE0q\x2\x5EB"+
		"\x5EC\bo\x1\x2\x5EC\x601\x3\x2\x2\x2\x5ED\x5EE\x5\x100\x81\x2\x5EE\x5F2"+
		"\bo\x1\x2\x5EF\x5F0\x5\x8CG\x2\x5F0\x5F1\bo\x1\x2\x5F1\x5F3\x3\x2\x2\x2"+
		"\x5F2\x5EF\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x601\x3\x2\x2\x2\x5F4"+
		"\x5F5\x5\xEEx\x2\x5F5\x5F6\bo\x1\x2\x5F6\x601\x3\x2\x2\x2\x5F7\x5F8\x5"+
		"\xF0y\x2\x5F8\x5F9\bo\x1\x2\x5F9\x601\x3\x2\x2\x2\x5FA\x5FB\x5\xF8}\x2"+
		"\x5FB\x5FC\bo\x1\x2\x5FC\x601\x3\x2\x2\x2\x5FD\x5FE\x5\xCA\x66\x2\x5FE"+
		"\x5FF\bo\x1\x2\x5FF\x601\x3\x2\x2\x2\x600\x5E7\x3\x2\x2\x2\x600\x5EA\x3"+
		"\x2\x2\x2\x600\x5ED\x3\x2\x2\x2\x600\x5F4\x3\x2\x2\x2\x600\x5F7\x3\x2"+
		"\x2\x2\x600\x5FA\x3\x2\x2\x2\x600\x5FD\x3\x2\x2\x2\x601\xDD\x3\x2\x2\x2"+
		"\x602\x603\a\x9D\x2\x2\x603\x604\x5\xD0i\x2\x604\x605\a\x9E\x2\x2\x605"+
		"\x606\bp\x1\x2\x606\xDF\x3\x2\x2\x2\x607\x608\x5\xECw\x2\x608\x609\bq"+
		"\x1\x2\x609\x74A\x3\x2\x2\x2\x60A\x60B\aH\x2\x2\x60B\x60C\a\x9D\x2\x2"+
		"\x60C\x60D\x5\xD0i\x2\x60D\x60E\a\x9E\x2\x2\x60E\x60F\bq\x1\x2\x60F\x74A"+
		"\x3\x2\x2\x2\x610\x611\aI\x2\x2\x611\x612\a\x9D\x2\x2\x612\x613\x5\xD0"+
		"i\x2\x613\x614\a\x9E\x2\x2\x614\x615\bq\x1\x2\x615\x74A\x3\x2\x2\x2\x616"+
		"\x617\aJ\x2\x2\x617\x618\a\x9D\x2\x2\x618\x619\x5\xD0i\x2\x619\x61A\a"+
		"\x3\x2\x2\x61A\x61B\x5\xD0i\x2\x61B\x61C\a\x9E\x2\x2\x61C\x61D\bq\x1\x2"+
		"\x61D\x74A\x3\x2\x2\x2\x61E\x61F\aK\x2\x2\x61F\x620\a\x9D\x2\x2\x620\x621"+
		"\x5\xD0i\x2\x621\x622\a\x9E\x2\x2\x622\x623\bq\x1\x2\x623\x74A\x3\x2\x2"+
		"\x2\x624\x625\aL\x2\x2\x625\x626\a\x9D\x2\x2\x626\x627\x5\xCA\x66\x2\x627"+
		"\x628\a\x9E\x2\x2\x628\x629\bq\x1\x2\x629\x74A\x3\x2\x2\x2\x62A\x62B\a"+
		"M\x2\x2\x62B\x62C\a\x9D\x2\x2\x62C\x62D\x5\xD0i\x2\x62D\x62E\a\x9E\x2"+
		"\x2\x62E\x62F\bq\x1\x2\x62F\x74A\x3\x2\x2\x2\x630\x631\aN\x2\x2\x631\x632"+
		"\a\x9D\x2\x2\x632\x633\x5\xD0i\x2\x633\x634\a\x9E\x2\x2\x634\x635\bq\x1"+
		"\x2\x635\x74A\x3\x2\x2\x2\x636\x63E\aO\x2\x2\x637\x638\a\x9D\x2\x2\x638"+
		"\x639\x5\xD0i\x2\x639\x63A\a\x9E\x2\x2\x63A\x63B\bq\x1\x2\x63B\x63F\x3"+
		"\x2\x2\x2\x63C\x63D\a\x9C\x2\x2\x63D\x63F\bq\x1\x2\x63E\x637\x3\x2\x2"+
		"\x2\x63E\x63C\x3\x2\x2\x2\x63F\x74A\x3\x2\x2\x2\x640\x641\aP\x2\x2\x641"+
		"\x642\a\x9C\x2\x2\x642\x74A\bq\x1\x2\x643\x644\aQ\x2\x2\x644\x645\a\x9D"+
		"\x2\x2\x645\x646\x5\xD0i\x2\x646\x647\a\x9E\x2\x2\x647\x648\bq\x1\x2\x648"+
		"\x74A\x3\x2\x2\x2\x649\x64A\aR\x2\x2\x64A\x64B\a\x9D\x2\x2\x64B\x64C\x5"+
		"\xD0i\x2\x64C\x64D\a\x9E\x2\x2\x64D\x64E\bq\x1\x2\x64E\x74A\x3\x2\x2\x2"+
		"\x64F\x650\aS\x2\x2\x650\x651\a\x9D\x2\x2\x651\x652\x5\xD0i\x2\x652\x653"+
		"\a\x9E\x2\x2\x653\x654\bq\x1\x2\x654\x74A\x3\x2\x2\x2\x655\x656\aT\x2"+
		"\x2\x656\x657\a\x9D\x2\x2\x657\x658\x5\xD0i\x2\x658\x659\a\x9E\x2\x2\x659"+
		"\x65A\bq\x1\x2\x65A\x74A\x3\x2\x2\x2\x65B\x65C\aU\x2\x2\x65C\x65D\x5\x8E"+
		"H\x2\x65D\x65E\bq\x1\x2\x65E\x74A\x3\x2\x2\x2\x65F\x660\x5\xE4s\x2\x660"+
		"\x661\bq\x1\x2\x661\x74A\x3\x2\x2\x2\x662\x663\aV\x2\x2\x663\x664\a\x9D"+
		"\x2\x2\x664\x665\x5\xD0i\x2\x665\x666\a\x9E\x2\x2\x666\x667\bq\x1\x2\x667"+
		"\x74A\x3\x2\x2\x2\x668\x669\x5\xE6t\x2\x669\x66A\bq\x1\x2\x66A\x74A\x3"+
		"\x2\x2\x2\x66B\x66C\aW\x2\x2\x66C\x66D\a\x9D\x2\x2\x66D\x66E\x5\xD0i\x2"+
		"\x66E\x66F\a\x9E\x2\x2\x66F\x670\bq\x1\x2\x670\x74A\x3\x2\x2\x2\x671\x672"+
		"\aX\x2\x2\x672\x673\a\x9D\x2\x2\x673\x674\x5\xD0i\x2\x674\x675\a\x9E\x2"+
		"\x2\x675\x676\bq\x1\x2\x676\x74A\x3\x2\x2\x2\x677\x678\aY\x2\x2\x678\x679"+
		"\a\x9D\x2\x2\x679\x67A\x5\xD0i\x2\x67A\x67B\a\x9E\x2\x2\x67B\x67C\bq\x1"+
		"\x2\x67C\x74A\x3\x2\x2\x2\x67D\x67E\aZ\x2\x2\x67E\x67F\a\x9D\x2\x2\x67F"+
		"\x680\x5\xD0i\x2\x680\x681\a\x3\x2\x2\x681\x682\x5\xD0i\x2\x682\x683\a"+
		"\x9E\x2\x2\x683\x684\bq\x1\x2\x684\x74A\x3\x2\x2\x2\x685\x686\a[\x2\x2"+
		"\x686\x687\a\x9D\x2\x2\x687\x688\x5\xD0i\x2\x688\x689\a\x3\x2\x2\x689"+
		"\x68A\x5\xD0i\x2\x68A\x68B\a\x9E\x2\x2\x68B\x68C\bq\x1\x2\x68C\x74A\x3"+
		"\x2\x2\x2\x68D\x68E\a\\\x2\x2\x68E\x68F\a\x9D\x2\x2\x68F\x690\x5\xD0i"+
		"\x2\x690\x691\a\x3\x2\x2\x691\x692\x5\xD0i\x2\x692\x693\a\x9E\x2\x2\x693"+
		"\x694\bq\x1\x2\x694\x74A\x3\x2\x2\x2\x695\x696\a]\x2\x2\x696\x697\a\x9D"+
		"\x2\x2\x697\x698\x5\xD0i\x2\x698\x699\a\x3\x2\x2\x699\x69A\x5\xD0i\x2"+
		"\x69A\x69B\a\x9E\x2\x2\x69B\x69C\bq\x1\x2\x69C\x74A\x3\x2\x2\x2\x69D\x69E"+
		"\a^\x2\x2\x69E\x69F\a\x9D\x2\x2\x69F\x6A0\x5\xD0i\x2\x6A0\x6A1\a\x3\x2"+
		"\x2\x6A1\x6A2\x5\xD0i\x2\x6A2\x6A3\a\x9E\x2\x2\x6A3\x6A4\bq\x1\x2\x6A4"+
		"\x74A\x3\x2\x2\x2\x6A5\x6A6\a_\x2\x2\x6A6\x6A7\a\x9D\x2\x2\x6A7\x6A8\x5"+
		"\xD0i\x2\x6A8\x6A9\a\x9E\x2\x2\x6A9\x6AA\bq\x1\x2\x6AA\x74A\x3\x2\x2\x2"+
		"\x6AB\x6AC\a`\x2\x2\x6AC\x6AD\a\x9D\x2\x2\x6AD\x6AE\x5\xD0i\x2\x6AE\x6AF"+
		"\a\x9E\x2\x2\x6AF\x6B0\bq\x1\x2\x6B0\x74A\x3\x2\x2\x2\x6B1\x6B2\a\x61"+
		"\x2\x2\x6B2\x6B3\a\x9D\x2\x2\x6B3\x6B4\x5\xD0i\x2\x6B4\x6B5\a\x9E\x2\x2"+
		"\x6B5\x6B6\bq\x1\x2\x6B6\x74A\x3\x2\x2\x2\x6B7\x6B8\a\x62\x2\x2\x6B8\x6B9"+
		"\a\x9D\x2\x2\x6B9\x6BA\x5\xD0i\x2\x6BA\x6BB\a\x9E\x2\x2\x6BB\x6BC\bq\x1"+
		"\x2\x6BC\x74A\x3\x2\x2\x2\x6BD\x6BE\a\x63\x2\x2\x6BE\x6BF\a\x9D\x2\x2"+
		"\x6BF\x6C0\x5\xD0i\x2\x6C0\x6C1\a\x9E\x2\x2\x6C1\x6C2\bq\x1\x2\x6C2\x74A"+
		"\x3\x2\x2\x2\x6C3\x6C4\a\x64\x2\x2\x6C4\x6C5\a\x9D\x2\x2\x6C5\x6C6\x5"+
		"\xD0i\x2\x6C6\x6C7\a\x9E\x2\x2\x6C7\x6C8\bq\x1\x2\x6C8\x74A\x3\x2\x2\x2"+
		"\x6C9\x6CA\a\x65\x2\x2\x6CA\x6CB\a\x9D\x2\x2\x6CB\x6CC\x5\xD0i\x2\x6CC"+
		"\x6CD\a\x9E\x2\x2\x6CD\x6CE\bq\x1\x2\x6CE\x74A\x3\x2\x2\x2\x6CF\x6D0\a"+
		"\x66\x2\x2\x6D0\x6D1\a\x9D\x2\x2\x6D1\x6D2\x5\xD0i\x2\x6D2\x6D3\a\x9E"+
		"\x2\x2\x6D3\x6D4\bq\x1\x2\x6D4\x74A\x3\x2\x2\x2\x6D5\x6D6\ag\x2\x2\x6D6"+
		"\x6D7\a\x9C\x2\x2\x6D7\x74A\bq\x1\x2\x6D8\x6D9\ah\x2\x2\x6D9\x6DA\a\x9C"+
		"\x2\x2\x6DA\x74A\bq\x1\x2\x6DB\x6DC\ai\x2\x2\x6DC\x6DD\a\x9C\x2\x2\x6DD"+
		"\x74A\bq\x1\x2\x6DE\x6DF\aj\x2\x2\x6DF\x6E0\a\x9D\x2\x2\x6E0\x6E1\x5\xD0"+
		"i\x2\x6E1\x6E2\a\x9E\x2\x2\x6E2\x6E3\bq\x1\x2\x6E3\x74A\x3\x2\x2\x2\x6E4"+
		"\x6E5\ak\x2\x2\x6E5\x6E6\a\x9D\x2\x2\x6E6\x6E7\x5\xD0i\x2\x6E7\x6E8\a"+
		"\x9E\x2\x2\x6E8\x6E9\bq\x1\x2\x6E9\x74A\x3\x2\x2\x2\x6EA\x6EB\al\x2\x2"+
		"\x6EB\x6EC\a\x9D\x2\x2\x6EC\x6ED\x5\xD0i\x2\x6ED\x6EE\a\x9E\x2\x2\x6EE"+
		"\x6EF\bq\x1\x2\x6EF\x74A\x3\x2\x2\x2\x6F0\x6F1\am\x2\x2\x6F1\x6F2\a\x9D"+
		"\x2\x2\x6F2\x6F3\x5\xD0i\x2\x6F3\x6F4\a\x9E\x2\x2\x6F4\x6F5\bq\x1\x2\x6F5"+
		"\x74A\x3\x2\x2\x2\x6F6\x6F7\an\x2\x2\x6F7\x6F8\a\x9D\x2\x2\x6F8\x6F9\x5"+
		"\xD0i\x2\x6F9\x6FA\a\x9E\x2\x2\x6FA\x6FB\bq\x1\x2\x6FB\x74A\x3\x2\x2\x2"+
		"\x6FC\x6FD\ao\x2\x2\x6FD\x6FE\x5\x8EH\x2\x6FE\x6FF\bq\x1\x2\x6FF\x74A"+
		"\x3\x2\x2\x2\x700\x701\ap\x2\x2\x701\x702\a\x9D\x2\x2\x702\x703\x5\xD0"+
		"i\x2\x703\x704\a\x3\x2\x2\x704\x705\x5\xD0i\x2\x705\x706\a\x3\x2\x2\x706"+
		"\x707\x5\xD0i\x2\x707\x708\a\x9E\x2\x2\x708\x709\bq\x1\x2\x709\x74A\x3"+
		"\x2\x2\x2\x70A\x70B\aq\x2\x2\x70B\x70C\a\x9D\x2\x2\x70C\x70D\x5\xD0i\x2"+
		"\x70D\x70E\a\x3\x2\x2\x70E\x70F\x5\xD0i\x2\x70F\x710\a\x9E\x2\x2\x710"+
		"\x711\bq\x1\x2\x711\x74A\x3\x2\x2\x2\x712\x713\ar\x2\x2\x713\x714\a\x9D"+
		"\x2\x2\x714\x715\x5\xD0i\x2\x715\x716\a\x3\x2\x2\x716\x717\x5\xD0i\x2"+
		"\x717\x718\a\x9E\x2\x2\x718\x719\bq\x1\x2\x719\x74A\x3\x2\x2\x2\x71A\x71B"+
		"\as\x2\x2\x71B\x71C\a\x9D\x2\x2\x71C\x71D\x5\xD0i\x2\x71D\x71E\a\x3\x2"+
		"\x2\x71E\x71F\x5\xD0i\x2\x71F\x720\a\x9E\x2\x2\x720\x721\bq\x1\x2\x721"+
		"\x74A\x3\x2\x2\x2\x722\x723\at\x2\x2\x723\x724\a\x9D\x2\x2\x724\x725\x5"+
		"\xD0i\x2\x725\x726\a\x9E\x2\x2\x726\x727\bq\x1\x2\x727\x74A\x3\x2\x2\x2"+
		"\x728\x729\au\x2\x2\x729\x72A\a\x9D\x2\x2\x72A\x72B\x5\xD0i\x2\x72B\x72C"+
		"\a\x9E\x2\x2\x72C\x72D\bq\x1\x2\x72D\x74A\x3\x2\x2\x2\x72E\x72F\av\x2"+
		"\x2\x72F\x730\a\x9D\x2\x2\x730\x731\x5\xD0i\x2\x731\x732\a\x9E\x2\x2\x732"+
		"\x733\bq\x1\x2\x733\x74A\x3\x2\x2\x2\x734\x735\aw\x2\x2\x735\x736\a\x9D"+
		"\x2\x2\x736\x737\x5\xD0i\x2\x737\x738\a\x9E\x2\x2\x738\x739\bq\x1\x2\x739"+
		"\x74A\x3\x2\x2\x2\x73A\x73B\ax\x2\x2\x73B\x73C\a\x9D\x2\x2\x73C\x73D\x5"+
		"\xD0i\x2\x73D\x73E\a\x9E\x2\x2\x73E\x73F\bq\x1\x2\x73F\x74A\x3\x2\x2\x2"+
		"\x740\x741\x5\xE2r\x2\x741\x742\bq\x1\x2\x742\x74A\x3\x2\x2\x2\x743\x744"+
		"\x5\xE8u\x2\x744\x745\bq\x1\x2\x745\x74A\x3\x2\x2\x2\x746\x747\x5\xEA"+
		"v\x2\x747\x748\bq\x1\x2\x748\x74A\x3\x2\x2\x2\x749\x607\x3\x2\x2\x2\x749"+
		"\x60A\x3\x2\x2\x2\x749\x610\x3\x2\x2\x2\x749\x616\x3\x2\x2\x2\x749\x61E"+
		"\x3\x2\x2\x2\x749\x624\x3\x2\x2\x2\x749\x62A\x3\x2\x2\x2\x749\x630\x3"+
		"\x2\x2\x2\x749\x636\x3\x2\x2\x2\x749\x640\x3\x2\x2\x2\x749\x643\x3\x2"+
		"\x2\x2\x749\x649\x3\x2\x2\x2\x749\x64F\x3\x2\x2\x2\x749\x655\x3\x2\x2"+
		"\x2\x749\x65B\x3\x2\x2\x2\x749\x65F\x3\x2\x2\x2\x749\x662\x3\x2\x2\x2"+
		"\x749\x668\x3\x2\x2\x2\x749\x66B\x3\x2\x2\x2\x749\x671\x3\x2\x2\x2\x749"+
		"\x677\x3\x2\x2\x2\x749\x67D\x3\x2\x2\x2\x749\x685\x3\x2\x2\x2\x749\x68D"+
		"\x3\x2\x2\x2\x749\x695\x3\x2\x2\x2\x749\x69D\x3\x2\x2\x2\x749\x6A5\x3"+
		"\x2\x2\x2\x749\x6AB\x3\x2\x2\x2\x749\x6B1\x3\x2\x2\x2\x749\x6B7\x3\x2"+
		"\x2\x2\x749\x6BD\x3\x2\x2\x2\x749\x6C3\x3\x2\x2\x2\x749\x6C9\x3\x2\x2"+
		"\x2\x749\x6CF\x3\x2\x2\x2\x749\x6D5\x3\x2\x2\x2\x749\x6D8\x3\x2\x2\x2"+
		"\x749\x6DB\x3\x2\x2\x2\x749\x6DE\x3\x2\x2\x2\x749\x6E4\x3\x2\x2\x2\x749"+
		"\x6EA\x3\x2\x2\x2\x749\x6F0\x3\x2\x2\x2\x749\x6F6\x3\x2\x2\x2\x749\x6FC"+
		"\x3\x2\x2\x2\x749\x700\x3\x2\x2\x2\x749\x70A\x3\x2\x2\x2\x749\x712\x3"+
		"\x2\x2\x2\x749\x71A\x3\x2\x2\x2\x749\x722\x3\x2\x2\x2\x749\x728\x3\x2"+
		"\x2\x2\x749\x72E\x3\x2\x2\x2\x749\x734\x3\x2\x2\x2\x749\x73A\x3\x2\x2"+
		"\x2\x749\x740\x3\x2\x2\x2\x749\x743\x3\x2\x2\x2\x749\x746\x3\x2\x2\x2"+
		"\x74A\xE1\x3\x2\x2\x2\x74B\x74C\ay\x2\x2\x74C\x74D\br\x1\x2\x74D\x74E"+
		"\a\x9D\x2\x2\x74E\x74F\x5\xD0i\x2\x74F\x750\br\x1\x2\x750\x751\a\x3\x2"+
		"\x2\x751\x756\x5\xD0i\x2\x752\x753\a\x3\x2\x2\x753\x754\x5\xD0i\x2\x754"+
		"\x755\br\x1\x2\x755\x757\x3\x2\x2\x2\x756\x752\x3\x2\x2\x2\x756\x757\x3"+
		"\x2\x2\x2\x757\x758\x3\x2\x2\x2\x758\x759\a\x9E\x2\x2\x759\x75A\br\x1"+
		"\x2\x75A\xE3\x3\x2\x2\x2\x75B\x75C\az\x2\x2\x75C\x75D\bs\x1\x2\x75D\x75E"+
		"\a\x9D\x2\x2\x75E\x75F\x5\xD0i\x2\x75F\x760\bs\x1\x2\x760\x761\a\x3\x2"+
		"\x2\x761\x762\x5\xD0i\x2\x762\x767\bs\x1\x2\x763\x764\a\x3\x2\x2\x764"+
		"\x765\x5\xD0i\x2\x765\x766\bs\x1\x2\x766\x768\x3\x2\x2\x2\x767\x763\x3"+
		"\x2\x2\x2\x767\x768\x3\x2\x2\x2\x768\x769\x3\x2\x2\x2\x769\x76A\a\x9E"+
		"\x2\x2\x76A\xE5\x3\x2\x2\x2\x76B\x76C\a{\x2\x2\x76C\x76D\bt\x1\x2\x76D"+
		"\x76E\a\x9D\x2\x2\x76E\x76F\x5\xD0i\x2\x76F\x770\bt\x1\x2\x770\x771\a"+
		"\x3\x2\x2\x771\x772\x5\xD0i\x2\x772\x773\bt\x1\x2\x773\x774\a\x3\x2\x2"+
		"\x774\x775\x5\xD0i\x2\x775\x77A\bt\x1\x2\x776\x777\a\x3\x2\x2\x777\x778"+
		"\x5\xD0i\x2\x778\x779\bt\x1\x2\x779\x77B\x3\x2\x2\x2\x77A\x776\x3\x2\x2"+
		"\x2\x77A\x77B\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x77D\bt\x1\x2\x77D"+
		"\x77E\a\x9E\x2\x2\x77E\xE7\x3\x2\x2\x2\x77F\x780\a|\x2\x2\x780\x781\x5"+
		"h\x35\x2\x781\x782\bu\x1\x2\x782\xE9\x3\x2\x2\x2\x783\x784\a:\x2\x2\x784"+
		"\x785\a|\x2\x2\x785\x786\x5h\x35\x2\x786\x787\bv\x1\x2\x787\xEB\x3\x2"+
		"\x2\x2\x788\x789\a}\x2\x2\x789\x78A\bw\x1\x2\x78A\x78D\a\x9D\x2\x2\x78B"+
		"\x78C\a,\x2\x2\x78C\x78E\bw\x1\x2\x78D\x78B\x3\x2\x2\x2\x78D\x78E\x3\x2"+
		"\x2\x2\x78E\x794\x3\x2\x2\x2\x78F\x790\a\x4\x2\x2\x790\x795\bw\x1\x2\x791"+
		"\x792\x5\xD0i\x2\x792\x793\bw\x1\x2\x793\x795\x3\x2\x2\x2\x794\x78F\x3"+
		"\x2\x2\x2\x794\x791\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796\x7E2\a\x9E"+
		"\x2\x2\x797\x798\a~\x2\x2\x798\x799\bw\x1\x2\x799\x79C\a\x9D\x2\x2\x79A"+
		"\x79B\a,\x2\x2\x79B\x79D\bw\x1\x2\x79C\x79A\x3\x2\x2\x2\x79C\x79D\x3\x2"+
		"\x2\x2\x79D\x79E\x3\x2\x2\x2\x79E\x79F\x5\xD0i\x2\x79F\x7A0\bw\x1\x2\x7A0"+
		"\x7A1\a\x9E\x2\x2\x7A1\x7E2\x3\x2\x2\x2\x7A2\x7A3\a\x7F\x2\x2\x7A3\x7A4"+
		"\bw\x1\x2\x7A4\x7A7\a\x9D\x2\x2\x7A5\x7A6\a,\x2\x2\x7A6\x7A8\bw\x1\x2"+
		"\x7A7\x7A5\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9"+
		"\x7AA\x5\xD0i\x2\x7AA\x7AB\bw\x1\x2\x7AB\x7AC\a\x9E\x2\x2\x7AC\x7E2\x3"+
		"\x2\x2\x2\x7AD\x7AE\a\x80\x2\x2\x7AE\x7AF\bw\x1\x2\x7AF\x7B2\a\x9D\x2"+
		"\x2\x7B0\x7B1\a,\x2\x2\x7B1\x7B3\bw\x1\x2\x7B2\x7B0\x3\x2\x2\x2\x7B2\x7B3"+
		"\x3\x2\x2\x2\x7B3\x7B4\x3\x2\x2\x2\x7B4\x7B5\x5\xD0i\x2\x7B5\x7B6\bw\x1"+
		"\x2\x7B6\x7B7\a\x9E\x2\x2\x7B7\x7E2\x3\x2\x2\x2\x7B8\x7B9\a\x81\x2\x2"+
		"\x7B9\x7BA\bw\x1\x2\x7BA\x7BD\a\x9D\x2\x2\x7BB\x7BC\a,\x2\x2\x7BC\x7BE"+
		"\bw\x1\x2\x7BD\x7BB\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7BF\x3\x2"+
		"\x2\x2\x7BF\x7C0\x5\xD0i\x2\x7C0\x7C1\bw\x1\x2\x7C1\x7C2\a\x9E\x2\x2\x7C2"+
		"\x7E2\x3\x2\x2\x2\x7C3\x7C4\a\x82\x2\x2\x7C4\x7C5\bw\x1\x2\x7C5\x7C8\a"+
		"\x9D\x2\x2\x7C6\x7C7\a,\x2\x2\x7C7\x7C9\bw\x1\x2\x7C8\x7C6\x3\x2\x2\x2"+
		"\x7C8\x7C9\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CB\x5\xD0i\x2\x7CB"+
		"\x7CC\bw\x1\x2\x7CC\x7CD\a\x9E\x2\x2\x7CD\x7E2\x3\x2\x2\x2\x7CE\x7CF\a"+
		"\x83\x2\x2\x7CF\x7D0\bw\x1\x2\x7D0\x7D3\a\x9D\x2\x2\x7D1\x7D2\a,\x2\x2"+
		"\x7D2\x7D4\bw\x1\x2\x7D3\x7D1\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D5"+
		"\x3\x2\x2\x2\x7D5\x7D6\x5\xD0i\x2\x7D6\x7DD\bw\x1\x2\x7D7\x7D8\a\x12\x2"+
		"\x2\x7D8\x7D9\a\xB0\x2\x2\x7D9\x7DA\a\x11\x2\x2\x7DA\x7DB\x5\xFC\x7F\x2"+
		"\x7DB\x7DC\bw\x1\x2\x7DC\x7DE\x3\x2\x2\x2\x7DD\x7D7\x3\x2\x2\x2\x7DD\x7DE"+
		"\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E0\a\x9E\x2\x2\x7E0\x7E2\x3"+
		"\x2\x2\x2\x7E1\x788\x3\x2\x2\x2\x7E1\x797\x3\x2\x2\x2\x7E1\x7A2\x3\x2"+
		"\x2\x2\x7E1\x7AD\x3\x2\x2\x2\x7E1\x7B8\x3\x2\x2\x2\x7E1\x7C3\x3\x2\x2"+
		"\x2\x7E1\x7CE\x3\x2\x2\x2\x7E2\xED\x3\x2\x2\x2\x7E3\x7E4\x5\xFC\x7F\x2"+
		"\x7E4\x7E5\bx\x1\x2\x7E5\x7F0\x3\x2\x2\x2\x7E6\x7E7\x5\xFC\x7F\x2\x7E7"+
		"\x7E8\a\x8C\x2\x2\x7E8\x7E9\bx\x1\x2\x7E9\x7F0\x3\x2\x2\x2\x7EA\x7EB\x5"+
		"\xFC\x7F\x2\x7EB\x7EC\a\f\x2\x2\x7EC\x7ED\x5\x100\x81\x2\x7ED\x7EE\bx"+
		"\x1\x2\x7EE\x7F0\x3\x2\x2\x2\x7EF\x7E3\x3\x2\x2\x2\x7EF\x7E6\x3\x2\x2"+
		"\x2\x7EF\x7EA\x3\x2\x2\x2\x7F0\xEF\x3\x2\x2\x2\x7F1\x7F2\x5\xF2z\x2\x7F2"+
		"\x7F3\by\x1\x2\x7F3\x7FB\x3\x2\x2\x2\x7F4\x7F5\x5\xF4{\x2\x7F5\x7F6\b"+
		"y\x1\x2\x7F6\x7FB\x3\x2\x2\x2\x7F7\x7F8\x5\xF6|\x2\x7F8\x7F9\by\x1\x2"+
		"\x7F9\x7FB\x3\x2\x2\x2\x7FA\x7F1\x3\x2\x2\x2\x7FA\x7F4\x3\x2\x2\x2\x7FA"+
		"\x7F7\x3\x2\x2\x2\x7FB\xF1\x3\x2\x2\x2\x7FC\x7FD\a\x8D\x2\x2\x7FD\x803"+
		"\bz\x1\x2\x7FE\x7FF\a\x8E\x2\x2\x7FF\x803\bz\x1\x2\x800\x801\a\x8F\x2"+
		"\x2\x801\x803\bz\x1\x2\x802\x7FC\x3\x2\x2\x2\x802\x7FE\x3\x2\x2\x2\x802"+
		"\x800\x3\x2\x2\x2\x803\xF3\x3\x2\x2\x2\x804\x805\a\x90\x2\x2\x805\x80B"+
		"\b{\x1\x2\x806\x807\a\x91\x2\x2\x807\x80B\b{\x1\x2\x808\x809\a\x92\x2"+
		"\x2\x809\x80B\b{\x1\x2\x80A\x804\x3\x2\x2\x2\x80A\x806\x3\x2\x2\x2\x80A"+
		"\x808\x3\x2\x2\x2\x80B\xF5\x3\x2\x2\x2\x80C\x80D\a\x93\x2\x2\x80D\x813"+
		"\b|\x1\x2\x80E\x80F\a\x94\x2\x2\x80F\x813\b|\x1\x2\x810\x811\a\x95\x2"+
		"\x2\x811\x813\b|\x1\x2\x812\x80C\x3\x2\x2\x2\x812\x80E\x3\x2\x2\x2\x812"+
		"\x810\x3\x2\x2\x2\x813\xF7\x3\x2\x2\x2\x814\x815\x5\xFA~\x2\x815\x816"+
		"\b}\x1\x2\x816\xF9\x3\x2\x2\x2\x817\x818\a\x84\x2\x2\x818\x81C\b~\x1\x2"+
		"\x819\x81A\a\x85\x2\x2\x81A\x81C\b~\x1\x2\x81B\x817\x3\x2\x2\x2\x81B\x819"+
		"\x3\x2\x2\x2\x81C\xFB\x3\x2\x2\x2\x81D\x81E\t\x3\x2\x2\x81E\xFD\x3\x2"+
		"\x2\x2\x81F\x820\x5\x100\x81\x2\x820\x821\b\x80\x1\x2\x821\xFF\x3\x2\x2"+
		"\x2\x822\x823\a\x86\x2\x2\x823\x829\b\x81\x1\x2\x824\x825\a\x87\x2\x2"+
		"\x825\x829\b\x81\x1\x2\x826\x827\a\x88\x2\x2\x827\x829\b\x81\x1\x2\x828"+
		"\x822\x3\x2\x2\x2\x828\x824\x3\x2\x2\x2\x828\x826\x3\x2\x2\x2\x829\x101"+
		"\x3\x2\x2\x2\x82A\x82B\a\x89\x2\x2\x82B\x82F\b\x82\x1\x2\x82C\x82D\a\xA0"+
		"\x2\x2\x82D\x82F\b\x82\x1\x2\x82E\x82A\x3\x2\x2\x2\x82E\x82C\x3\x2\x2"+
		"\x2\x82F\x103\x3\x2\x2\x2\xA0\x112\x11A\x11E\x120\x131\x146\x152\x154"+
		"\x158\x160\x16A\x172\x178\x181\x185\x18A\x190\x19A\x1A4\x1B1\x1BA\x1BF"+
		"\x1C4\x1C9\x1D3\x1E2\x1E9\x1F2\x1FF\x203\x214\x216\x21E\x225\x227\x238"+
		"\x243\x245\x268\x26E\x276\x27C\x285\x28E\x297\x2A2\x2AD\x2C8\x2CF\x2D4"+
		"\x2DA\x2DC\x2F2\x2F6\x2FB\x30A\x31A\x31F\x324\x328\x332\x33C\x33E\x347"+
		"\x34F\x354\x359\x35D\x366\x368\x382\x392\x3AA\x3B4\x3C1\x3C5\x3CE\x3D4"+
		"\x3D6\x3EC\x3FA\x40A\x415\x41F\x424\x430\x435\x43C\x446\x448\x451\x453"+
		"\x45B\x45F\x467\x46E\x47A\x483\x48C\x49C\x49E\x4A6\x4AF\x4B1\x4B5\x4BD"+
		"\x4CB\x4D6\x4E0\x4EA\x4FA\x508\x50B\x50E\x51B\x51D\x524\x531\x53B\x543"+
		"\x54B\x563\x56D\x578\x59E\x5B1\x5BB\x5BD\x5C2\x5C4\x5D1\x5D3\x5E5\x5F2"+
		"\x600\x63E\x749\x756\x767\x77A\x78D\x794\x79C\x7A7\x7B2\x7BD\x7C8\x7D3"+
		"\x7DD\x7E1\x7EF\x7FA\x802\x80A\x812\x81B\x828\x82E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SparqlParseRun
