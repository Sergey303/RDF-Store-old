//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Admin\Source\Repos\PolarDemo\SparqlParseRun\sparql2PacNS.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SparqlParseRun {

	using System;
	using System.Linq;
	using System.Xml.Linq;		
	using System.Text.RegularExpressions;
    using SparqlParseRun;
	using RdfInMemoryCopy;
	using System.Linq.Expressions;
	using TripleIntClasses;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class sparql2PacNSParser : Parser {
	public const int
		T__72=1, T__71=2, T__70=3, T__69=4, T__68=5, T__67=6, T__66=7, T__65=8, 
		T__64=9, T__63=10, T__62=11, T__61=12, T__60=13, T__59=14, T__58=15, T__57=16, 
		T__56=17, T__55=18, T__54=19, T__53=20, T__52=21, T__51=22, T__50=23, 
		T__49=24, T__48=25, T__47=26, T__46=27, T__45=28, T__44=29, T__43=30, 
		T__42=31, T__41=32, T__40=33, T__39=34, T__38=35, T__37=36, T__36=37, 
		T__35=38, T__34=39, T__33=40, T__32=41, T__31=42, T__30=43, T__29=44, 
		T__28=45, T__27=46, T__26=47, T__25=48, T__24=49, T__23=50, T__22=51, 
		T__21=52, T__20=53, T__19=54, T__18=55, T__17=56, T__16=57, T__15=58, 
		T__14=59, T__13=60, T__12=61, T__11=62, T__10=63, T__9=64, T__8=65, T__7=66, 
		T__6=67, T__5=68, T__4=69, T__3=70, T__2=71, T__1=72, T__0=73, PNAME_NS=74, 
		PREFIXED_NAME=75, NumericLiteralPositive=76, NumericLiteralNegative=77, 
		BooleanLiteral=78, String=79, BlankNode=80, IRI_REF=81, BLANK_NODE_LABEL=82, 
		VAR1=83, VAR2=84, LANGTAG=85, INTEGER=86, DECIMAL=87, DOUBLE=88, INTEGER_POSITIVE=89, 
		DECIMAL_POSITIVE=90, DOUBLE_POSITIVE=91, INTEGER_NEGATIVE=92, DECIMAL_NEGATIVE=93, 
		DOUBLE_NEGATIVE=94, EXPONENT=95, STRING_LITERAL1=96, STRING_LITERAL2=97, 
		STRING_LITERAL_LONG1=98, STRING_LITERAL_LONG2=99, ECHAR=100, NIL=101, 
		WS=102, ANON=103, PN_CHARS_BASE=104, PN_CHARS_U=105, VARNAME=106, PN_CHARS=107, 
		PN_PREFIX=108, PN_LOCAL=109;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'DISTINCT'", "'isBLANK'", "'Langmatches'", "'['", "'WHERE'", 
		"'*'", "'FILTER'", "'<'", "'isIRI'", "'!='", "'<='", "'REGEX'", "'}'", 
		"'^^'", "'ORDER'", "'PREFIX'", "'LANGMATCHES'", "'langmatches'", "')'", 
		"'regex'", "'\"*\"'", "'BOUND'", "'Bound'", "'langMatches'", "'DESC'", 
		"'='", "'DATATYPE'", "'STR'", "'dataType'", "'BASE'", "'datatype'", "'FROM'", 
		"'sameTerm'", "'str'", "'!'", "'SELECT'", "']'", "'OPTIONAL'", "'BY'", 
		"','", "'OFFSET'", "'ASC'", "'-'", "'('", "'Datatype'", "'DataType'", 
		"'LangMatches'", "'isURI'", "'{'", "'bound'", "'isLITERAL'", "'Lang'", 
		"'ASK'", "'GRAPH'", "'a'", "'.'", "'REDUCED'", "'+'", "';'", "'CONSTRUCT'", 
		"'lang'", "'LANG'", "'&&'", "'||'", "'>'", "'Regex'", "'DESCRIBE'", "'LIMIT'", 
		"'/'", "'>='", "'Str'", "'UNION'", "'NAMED'", "PNAME_NS", "PREFIXED_NAME", 
		"NumericLiteralPositive", "NumericLiteralNegative", "BooleanLiteral", 
		"String", "BlankNode", "IRI_REF", "BLANK_NODE_LABEL", "VAR1", "VAR2", 
		"LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", 
		"DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", 
		"EXPONENT", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
		"STRING_LITERAL_LONG2", "ECHAR", "NIL", "WS", "ANON", "PN_CHARS_BASE", 
		"PN_CHARS_U", "VARNAME", "PN_CHARS", "PN_PREFIX", "PN_LOCAL"
	};
	public const int
		RULE_query = 0, RULE_prologue = 1, RULE_basedecl = 2, RULE_prefixDecl = 3, 
		RULE_selectQuery = 4, RULE_constructQuery = 5, RULE_describeQuery = 6, 
		RULE_askQuery = 7, RULE_datasetClause = 8, RULE_defaultGraphClause = 9, 
		RULE_namedGraphClause = 10, RULE_sourceSelector = 11, RULE_whereClause = 12, 
		RULE_solutionModifier = 13, RULE_limitOffsetClauses = 14, RULE_orderClause = 15, 
		RULE_orderCondition = 16, RULE_limitClause = 17, RULE_offsetClause = 18, 
		RULE_groupGraphPattern = 19, RULE_triplesBlock = 20, RULE_graphPatternNotTriples = 21, 
		RULE_optionalGraphPattern = 22, RULE_graphGraphPattern = 23, RULE_groupOrUnionGraphPattern = 24, 
		RULE_filter = 25, RULE_constraint = 26, RULE_functionCall = 27, RULE_argList = 28, 
		RULE_constructTemplate = 29, RULE_constructTriples = 30, RULE_triplesSameSubjectConstruct = 31, 
		RULE_varOrTermSubConstruct = 32, RULE_propertyListNotEmptyConstruct = 33, 
		RULE_verbObjectListConstruct = 34, RULE_verbConstruct = 35, RULE_objectListConstruct = 36, 
		RULE_graphNodeConstruct = 37, RULE_varOrTermConstruct = 38, RULE_graphTermConstuct = 39, 
		RULE_triplesSameSubject = 40, RULE_propertyListNotEmpty = 41, RULE_propertyList = 42, 
		RULE_verbObjectList = 43, RULE_objectList = 44, RULE_verb = 45, RULE_triplesNode = 46, 
		RULE_blankNodePropertyList = 47, RULE_collection = 48, RULE_graphNode = 49, 
		RULE_varOrTermSub = 50, RULE_varOrTerm = 51, RULE_varOrIRIref = 52, RULE_var = 53, 
		RULE_varLiteral = 54, RULE_graphTerm = 55, RULE_expression = 56, RULE_conditionalAndExpression = 57, 
		RULE_valueLogical = 58, RULE_additiveExpression = 59, RULE_multiplicativeExpression = 60, 
		RULE_unaryExpression = 61, RULE_primaryExpression = 62, RULE_brackettedExpression = 63, 
		RULE_builtInCall = 64, RULE_regexExpression = 65, RULE_iRIrefOrFunction = 66, 
		RULE_rDFLiteral = 67, RULE_iRIref = 68, RULE_numeric = 69, RULE_numericLiteral = 70, 
		RULE_numericLiteralUnsigned = 71;
	public static readonly string[] ruleNames = {
		"query", "prologue", "basedecl", "prefixDecl", "selectQuery", "constructQuery", 
		"describeQuery", "askQuery", "datasetClause", "defaultGraphClause", "namedGraphClause", 
		"sourceSelector", "whereClause", "solutionModifier", "limitOffsetClauses", 
		"orderClause", "orderCondition", "limitClause", "offsetClause", "groupGraphPattern", 
		"triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
		"groupOrUnionGraphPattern", "filter", "constraint", "functionCall", "argList", 
		"constructTemplate", "constructTriples", "triplesSameSubjectConstruct", 
		"varOrTermSubConstruct", "propertyListNotEmptyConstruct", "verbObjectListConstruct", 
		"verbConstruct", "objectListConstruct", "graphNodeConstruct", "varOrTermConstruct", 
		"graphTermConstuct", "triplesSameSubject", "propertyListNotEmpty", "propertyList", 
		"verbObjectList", "objectList", "verb", "triplesNode", "blankNodePropertyList", 
		"collection", "graphNode", "varOrTermSub", "varOrTerm", "varOrIRIref", 
		"var", "varLiteral", "graphTerm", "expression", "conditionalAndExpression", 
		"valueLogical", "additiveExpression", "multiplicativeExpression", "unaryExpression", 
		"primaryExpression", "brackettedExpression", "builtInCall", "regexExpression", 
		"iRIrefOrFunction", "rDFLiteral", "iRIref", "numeric", "numericLiteral", 
		"numericLiteralUnsigned"
	};

	public override string GrammarFileName { get { return "sparql2PacNS.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

			  	

	public static Regex PrefixNSSlpit=new Regex("^([^:]*:)(.*)$");
	public Query q;		

	public sparql2PacNSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class QueryContext : ParserRuleContext {
		public AskQueryContext askQuery() {
			return GetRuleContext<AskQueryContext>(0);
		}
		public DescribeQueryContext describeQuery() {
			return GetRuleContext<DescribeQueryContext>(0);
		}
		public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		public ConstructQueryContext constructQuery() {
			return GetRuleContext<ConstructQueryContext>(0);
		}
		public SelectQueryContext selectQuery() {
			return GetRuleContext<SelectQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_query; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; prologue();
			State = 149;
			switch (_input.La(1)) {
			case 36:
				{
				State = 145; selectQuery();
				}
				break;
			case 60:
				{
				State = 146; constructQuery();
				}
				break;
			case 67:
				{
				State = 147; describeQuery();
				}
				break;
			case 53:
				{
				State = 148; askQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologueContext : ParserRuleContext {
		public PrefixDeclContext prefixDecl(int i) {
			return GetRuleContext<PrefixDeclContext>(i);
		}
		public BasedeclContext basedecl() {
			return GetRuleContext<BasedeclContext>(0);
		}
		public IReadOnlyList<PrefixDeclContext> prefixDecl() {
			return GetRuleContexts<PrefixDeclContext>();
		}
		public PrologueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prologue; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterPrologue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitPrologue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrologue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrologueContext prologue() {
		PrologueContext _localctx = new PrologueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_prologue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = _input.La(1);
			if (_la==30) {
				{
				State = 151; basedecl();
				}
			}

			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==16) {
				{
				{
				State = 154; prefixDecl();
				}
				}
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedeclContext : ParserRuleContext {
		public ITerminalNode IRI_REF() { return GetToken(sparql2PacNSParser.IRI_REF, 0); }
		public BasedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_basedecl; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterBasedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitBasedecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasedecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasedeclContext basedecl() {
		BasedeclContext _localctx = new BasedeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_basedecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(30);
			State = 161; Match(IRI_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixDeclContext : ParserRuleContext {
		public IToken _PNAME_NS;
		public IToken _IRI_REF;
		public ITerminalNode IRI_REF() { return GetToken(sparql2PacNSParser.IRI_REF, 0); }
		public ITerminalNode PNAME_NS() { return GetToken(sparql2PacNSParser.PNAME_NS, 0); }
		public PrefixDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefixDecl; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterPrefixDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitPrefixDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixDeclContext prefixDecl() {
		PrefixDeclContext _localctx = new PrefixDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_prefixDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(16);
			State = 164; _localctx._PNAME_NS = Match(PNAME_NS);
			State = 165; _localctx._IRI_REF = Match(IRI_REF);
			 	
				var iri=(_localctx._IRI_REF!=null?_localctx._IRI_REF.Text:null);
				iri=iri.Substring(1,iri.Length-2);
				q.prefixes.Add((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null), iri);	
			 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		public VarLiteralContext _varLiteral;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public IReadOnlyList<VarLiteralContext> varLiteral() {
			return GetRuleContexts<VarLiteralContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public VarLiteralContext varLiteral(int i) {
			return GetRuleContext<VarLiteralContext>(i);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selectQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterSelectQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitSelectQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_selectQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(36);
			State = 173;
			switch (_input.La(1)) {
			case 1:
				{
				State = 169; Match(1);
				 q.isDistinct=true;	
				}
				break;
			case 57:
				{
				State = 171; Match(57);
				 q.isReduce=true;	
				}
				break;
			case 6:
			case VAR1:
			case VAR2:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 184;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				{
				State = 178;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 175; _localctx._varLiteral = varLiteral();
					 q.variables.Add((_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null));	 
					}
					}
					State = 180;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR1 || _la==VAR2 );
				}
				break;
			case 6:
				{
				State = 182; Match(6);
				 q.all=true;	
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 186; datasetClause();
				}
				}
				State = 191;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 192; whereClause();
			State = 193; solutionModifier();
			  q.CreateSelectRun(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructQueryContext : ParserRuleContext {
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public ConstructTemplateContext constructTemplate() {
			return GetRuleContext<ConstructTemplateContext>(0);
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public ConstructQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterConstructQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitConstructQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructQueryContext constructQuery() {
		ConstructQueryContext _localctx = new ConstructQueryContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constructQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(60);
			State = 197; constructTemplate();
			State = 201;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 198; datasetClause();
				}
				}
				State = 203;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 204; whereClause();
			State = 205; solutionModifier();
				    
			q.CreateConstructRun();

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeQueryContext : ParserRuleContext {
		public VarLiteralContext _varLiteral;
		public IRIrefContext _iRIref;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public IReadOnlyList<IRIrefContext> iRIref() {
			return GetRuleContexts<IRIrefContext>();
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public IReadOnlyList<VarLiteralContext> varLiteral() {
			return GetRuleContexts<VarLiteralContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public VarLiteralContext varLiteral(int i) {
			return GetRuleContext<VarLiteralContext>(i);
		}
		public IRIrefContext iRIref(int i) {
			return GetRuleContext<IRIrefContext>(i);
		}
		public DescribeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_describeQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterDescribeQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitDescribeQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeQueryContext describeQuery() {
		DescribeQueryContext _localctx = new DescribeQueryContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_describeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(67);
			State = 221;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
			case VAR1:
			case VAR2:
				{
				State = 215;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 215;
					switch (_input.La(1)) {
					case VAR1:
					case VAR2:
						{
						State = 209; _localctx._varLiteral = varLiteral();
						q.variables.Add((_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null));
						}
						break;
					case PREFIXED_NAME:
					case IRI_REF:
						{
						State = 212; _localctx._iRIref = iRIref();
						 q.constants.Add(q.ts.CodeEntityFullName( (_localctx._iRIref!=null?_input.GetText(_localctx._iRIref.start,_localctx._iRIref.stop):null))); 
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 217;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)))) != 0) );
				}
				break;
			case 6:
				{
				State = 219; Match(6);
				 q.all=true; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 226;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 223; datasetClause();
				}
				}
				State = 228;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 230;
			_la = _input.La(1);
			if (_la==5 || _la==49) {
				{
				State = 229; whereClause();
				}
			}

			State = 232; solutionModifier();
			 q.ResultSet.ResultType=ResultType.Describe; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskQueryContext : ParserRuleContext {
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public AskQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_askQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterAskQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitAskQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAskQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AskQueryContext askQuery() {
		AskQueryContext _localctx = new AskQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_askQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(53);
			State = 239;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 236; datasetClause();
				}
				}
				State = 241;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 242; whereClause();
			q.CreateAsqRun();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetClauseContext : ParserRuleContext {
		public NamedGraphClauseContext namedGraphClause() {
			return GetRuleContext<NamedGraphClauseContext>(0);
		}
		public DefaultGraphClauseContext defaultGraphClause() {
			return GetRuleContext<DefaultGraphClauseContext>(0);
		}
		public DatasetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_datasetClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterDatasetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitDatasetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetClauseContext datasetClause() {
		DatasetClauseContext _localctx = new DatasetClauseContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_datasetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(32);
			State = 248;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
				{
				State = 246; defaultGraphClause();
				}
				break;
			case 73:
				{
				State = 247; namedGraphClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public DefaultGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_defaultGraphClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterDefaultGraphClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitDefaultGraphClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultGraphClauseContext defaultGraphClause() {
		DefaultGraphClauseContext _localctx = new DefaultGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_defaultGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public NamedGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_namedGraphClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterNamedGraphClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitNamedGraphClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedGraphClauseContext namedGraphClause() {
		NamedGraphClauseContext _localctx = new NamedGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(73);
			State = 253; sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceSelectorContext : ParserRuleContext {
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public SourceSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sourceSelector; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterSourceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitSourceSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceSelectorContext sourceSelector() {
		SourceSelectorContext _localctx = new SourceSelectorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_sourceSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; iRIref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public GroupGraphPatternContext _groupGraphPattern;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whereClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = _input.La(1);
			if (_la==5) {
				{
				State = 257; Match(5);
				}
			}

			State = 260; _localctx._groupGraphPattern = groupGraphPattern();
			q.WereList.Add(_localctx._groupGraphPattern.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SolutionModifierContext : ParserRuleContext {
		public LimitOffsetClausesContext limitOffsetClauses() {
			return GetRuleContext<LimitOffsetClausesContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SolutionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_solutionModifier; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterSolutionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitSolutionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolutionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SolutionModifierContext solutionModifier() {
		SolutionModifierContext _localctx = new SolutionModifierContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_solutionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = _input.La(1);
			if (_la==15) {
				{
				State = 263; orderClause();
				}
			}

			State = 267;
			_la = _input.La(1);
			if (_la==41 || _la==68) {
				{
				State = 266; limitOffsetClauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOffsetClausesContext : ParserRuleContext {
		public LimitClauseContext _limitClause;
		public OffsetClauseContext _offsetClause;
		public OffsetClauseContext offsetClause() {
			return GetRuleContext<OffsetClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public LimitOffsetClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_limitOffsetClauses; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterLimitOffsetClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitLimitOffsetClauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOffsetClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOffsetClausesContext limitOffsetClauses() {
		LimitOffsetClausesContext _localctx = new LimitOffsetClausesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_limitOffsetClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			switch (_input.La(1)) {
			case 68:
				{
				State = 269; _localctx._limitClause = limitClause();
				 q.listSsolutionModifiersCount.Add(_localctx._limitClause.value); 
				State = 274;
				_la = _input.La(1);
				if (_la==41) {
					{
					State = 271; _localctx._offsetClause = offsetClause();
					 q.listSsolutionModifiersCount.Add(_localctx._offsetClause.value); 
					}
				}

				}
				break;
			case 41:
				{
				State = 276; _localctx._offsetClause = offsetClause();
				 q.listSsolutionModifiersCount.Add(_localctx._offsetClause.value); 
				State = 281;
				_la = _input.La(1);
				if (_la==68) {
					{
					State = 278; _localctx._limitClause = limitClause();
					 q.listSsolutionModifiersCount.Add(_localctx._limitClause.value); 
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		public OrderConditionContext main;
		public OrderConditionContext others;
		public OrderConditionContext orderCondition(int i) {
			return GetRuleContext<OrderConditionContext>(i);
		}
		public IReadOnlyList<OrderConditionContext> orderCondition() {
			return GetRuleContexts<OrderConditionContext>();
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_orderClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_orderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(15);
			State = 286; Match(39);
			State = 287; _localctx.main = orderCondition();
			q.listSolutionModifiersOrder.Add(_localctx.main.value); 
			State = 294;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 3) | (1L << 9) | (1L << 12) | (1L << 17) | (1L << 18) | (1L << 20) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 33) | (1L << 34) | (1L << 42) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 61) | (1L << 62))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (66 - 66)) | (1L << (71 - 66)) | (1L << (PREFIXED_NAME - 66)) | (1L << (IRI_REF - 66)) | (1L << (VAR1 - 66)) | (1L << (VAR2 - 66)))) != 0)) {
				{
				{
				State = 289; _localctx.others = orderCondition();
				 q.listSolutionModifiersOrder.Add(_localctx.others.value); 
				}
				}
				State = 296;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderConditionContext : ParserRuleContext {
		public Func<IEnumerable<SparqlResult>, IEnumerable<SparqlResult>> value;
		public bool isDescending;
		public BrackettedExpressionContext _brackettedExpression;
		public ConstraintContext _constraint;
		public VarContext _var;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OrderConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_orderCondition; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterOrderCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitOrderCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderConditionContext orderCondition() {
		OrderConditionContext _localctx = new OrderConditionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_orderCondition);
		try {
			State = 313;
			switch (_input.La(1)) {
			case 25:
			case 42:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 300;
				switch (_input.La(1)) {
				case 42:
					{
					State = 297; Match(42);
					}
					break;
				case 25:
					{
					State = 298; Match(25);
					 _localctx.isDescending = true;  
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 302; _localctx._brackettedExpression = brackettedExpression();
				 
				 var orderFunc = _localctx._brackettedExpression.value;
				 if(_localctx.isDescending)
					_localctx.value =  pacs => pacs.OrderByDescending(pac=>
										{
										    var node = orderFunc(pac);
											if(node
				                            if(o is Int32)
										    return (int)o;
				                            else if (!(o is ILiteralNode))
				                                return o;
				                            else
				                            {
				                                var l = (ILiteralNode)o;
				                                if (l.Value is double)
				                                    return double.Parse(l.Value);
				                                if (l.Value is long)
				                                    return long.Parse(l.Value);
				                                return l.ToString();
				                            }
										});
				 else 
				_localctx.value =  pacs => pacs.OrderBy(pac=>
										{
										    var o = orderFunc.DynamicInvoke(pac);
				                            if(o is Int32)
										    return (int)o;
				                            else if (!(o is ILiteralNode))
				                                return o;
				                            else
				                            {
				                                var l = (ILiteralNode)o;
				                                if (l.Value is double)
				                                    return double.Parse(l.Value);
				                                if (l.Value is long)
				                                    return long.Parse(l.Value);
				                                return l.ToString();
				                            }
										});
				 	 
				}
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
			case PREFIXED_NAME:
			case IRI_REF:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311;
				switch (_input.La(1)) {
				case 2:
				case 3:
				case 9:
				case 12:
				case 17:
				case 18:
				case 20:
				case 22:
				case 23:
				case 24:
				case 27:
				case 28:
				case 29:
				case 31:
				case 33:
				case 34:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 50:
				case 51:
				case 52:
				case 61:
				case 62:
				case 66:
				case 71:
				case PREFIXED_NAME:
				case IRI_REF:
					{
					State = 305; _localctx._constraint = constraint();

					  var orderExpr = Expression.Lambda(_localctx._constraint.value, q.currentFilterParameter).Compile();	 
						_localctx.value =  pacs=> pacs.OrderBy(pac=>
											{
											    var o = orderExpr.DynamicInvoke(pac);
					                            if(o is Int32)
											    return (int)o;
					                            else if (!(o is ILiteralNode))
					                                return o;
					                            else
					                            {
					                                var l = (ILiteralNode)o;
					                                if (l.Value is double)
					                                    return double.Parse(l.Value);
					                                if (l.Value is long)
					                                    return long.Parse(l.Value);
					                                return l.ToString();
					                            }
											});
					 
					}
					break;
				case VAR1:
				case VAR2:
					{
					State = 308; _localctx._var = var();

					 var orderExpr = Expression.Lambda(q.Parameter(_localctx._var.p), q.currentFilterParameter).Compile();	 
						_localctx.value =  pacs=> pacs.OrderBy(pac=>
											{
											    var o = orderExpr.DynamicInvoke(pac);
					                            if(o is Int32)
											    return (int)o;
					                            else if (!(o is ILiteralNode))
					                                return o;
					                            else
					                            {
					                                var l = (ILiteralNode)o;
					                                if (l.Value is double)
					                                    return double.Parse(l.Value);
					                                if (l.Value is long)
					                                    return long.Parse(l.Value);
					                                return l.ToString();
					                            }
											});
					 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public Func<IEnumerable<SparqlResult>, IEnumerable<SparqlResult>> value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparql2PacNSParser.INTEGER, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_limitClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(68);
			State = 316; _localctx._INTEGER = Match(INTEGER);
			 _localctx.value = sequence=>sequence.Take(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetClauseContext : ParserRuleContext {
		public Func<IEnumerable<SparqlResult>, IEnumerable<SparqlResult>> value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparql2PacNSParser.INTEGER, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_offsetClause; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterOffsetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitOffsetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetClauseContext offsetClause() {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_offsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(41);
			State = 320; _localctx._INTEGER = Match(INTEGER);
			 _localctx.value = sequence=>sequence.Skip(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public TriplesBlockContext _triplesBlock;
		public GraphPatternNotTriplesContext _graphPatternNotTriples;
		public FilterContext _filter;
		public IReadOnlyList<FilterContext> filter() {
			return GetRuleContexts<FilterContext>();
		}
		public IReadOnlyList<GraphPatternNotTriplesContext> graphPatternNotTriples() {
			return GetRuleContexts<GraphPatternNotTriplesContext>();
		}
		public GraphPatternNotTriplesContext graphPatternNotTriples(int i) {
			return GetRuleContext<GraphPatternNotTriplesContext>(i);
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public TriplesBlockContext triplesBlock(int i) {
			return GetRuleContext<TriplesBlockContext>(i);
		}
		public IReadOnlyList<TriplesBlockContext> triplesBlock() {
			return GetRuleContexts<TriplesBlockContext>();
		}
		public GroupGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_groupGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGroupGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGroupGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupGraphPatternContext groupGraphPattern() {
		GroupGraphPatternContext _localctx = new GroupGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_groupGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(49);
			State = 327;
			_la = _input.La(1);
			if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
				{
				State = 324; _localctx._triplesBlock = triplesBlock();
				_localctx.value = _localctx._triplesBlock.value;
				}
			}

			State = 347;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << 38) | (1L << 49) | (1L << 54))) != 0)) {
				{
				{
				State = 335;
				switch (_input.La(1)) {
				case 38:
				case 49:
				case 54:
					{
					State = 329; _localctx._graphPatternNotTriples = graphPatternNotTriples();
					 _localctx.value = (_localctx._graphPatternNotTriples.value);  
					}
					break;
				case 7:
					{
					State = 332; _localctx._filter = filter();
					 _localctx.value = _localctx._filter.value;  
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 338;
				_la = _input.La(1);
				if (_la==56) {
					{
					State = 337; Match(56);
					}
				}

				State = 343;
				_la = _input.La(1);
				if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
					{
					State = 340; _localctx._triplesBlock = triplesBlock();
					_localctx.value = _localctx._triplesBlock.value;
					}
				}

				}
				}
				State = 349;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 350; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesBlockContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public TriplesSameSubjectContext _triplesSameSubject;
		public TriplesBlockContext next;
		public TriplesBlockContext triplesBlock() {
			return GetRuleContext<TriplesBlockContext>(0);
		}
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public TriplesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesBlock; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterTriplesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitTriplesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesBlockContext triplesBlock() {
		TriplesBlockContext _localctx = new TriplesBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_triplesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; _localctx._triplesSameSubject = triplesSameSubject();
			_localctx.value = _localctx._triplesSameSubject.value;
			State = 360;
			_la = _input.La(1);
			if (_la==56) {
				{
				State = 354; Match(56);
				State = 358;
				_la = _input.La(1);
				if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
					{
					State = 355; _localctx.next = triplesBlock();
					_localctx.value = _localctx.next.value; 
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphPatternNotTriplesContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public OptionalGraphPatternContext _optionalGraphPattern;
		public GroupOrUnionGraphPatternContext _groupOrUnionGraphPattern;
		public GraphGraphPatternContext _graphGraphPattern;
		public GraphGraphPatternContext graphGraphPattern() {
			return GetRuleContext<GraphGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext optionalGraphPattern() {
			return GetRuleContext<OptionalGraphPatternContext>(0);
		}
		public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
			return GetRuleContext<GroupOrUnionGraphPatternContext>(0);
		}
		public GraphPatternNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphPatternNotTriples; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGraphPatternNotTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGraphPatternNotTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphPatternNotTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphPatternNotTriplesContext graphPatternNotTriples() {
		GraphPatternNotTriplesContext _localctx = new GraphPatternNotTriplesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_graphPatternNotTriples);
		try {
			State = 371;
			switch (_input.La(1)) {
			case 38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; _localctx._optionalGraphPattern = optionalGraphPattern();
				_localctx.value = _localctx._optionalGraphPattern.value;
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; _localctx._groupOrUnionGraphPattern = groupOrUnionGraphPattern();
				_localctx.value = _localctx._groupOrUnionGraphPattern.value;
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 3);
				{
				State = 368; _localctx._graphGraphPattern = graphGraphPattern();
				_localctx.value = _localctx._graphGraphPattern.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalGraphPatternContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public GroupGraphPatternContext _groupGraphPattern;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_optionalGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterOptionalGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitOptionalGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalGraphPatternContext optionalGraphPattern() {
		OptionalGraphPatternContext _localctx = new OptionalGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_optionalGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(38);
			short parametersStartIndex = (short)q.ResultSet.Variables.Count; 
			State = 375; _localctx._groupGraphPattern = groupGraphPattern();

				_localctx.value =  _localctx._groupGraphPattern.value.Optional(parametersStartIndex, (short)q.ResultSet.Variables.Count);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphGraphPatternContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public VarOrIRIrefContext varOrIRIref() {
			return GetRuleContext<VarOrIRIrefContext>(0);
		}
		public GraphGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGraphGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGraphGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphGraphPatternContext graphGraphPattern() {
		GraphGraphPatternContext _localctx = new GraphGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_graphGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(54);
			State = 379; varOrIRIref();
			State = 380; groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupOrUnionGraphPatternContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public GroupGraphPatternContext first;
		public GroupGraphPatternContext second;
		public IReadOnlyList<GroupGraphPatternContext> groupGraphPattern() {
			return GetRuleContexts<GroupGraphPatternContext>();
		}
		public GroupGraphPatternContext groupGraphPattern(int i) {
			return GetRuleContext<GroupGraphPatternContext>(i);
		}
		public GroupOrUnionGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_groupOrUnionGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGroupOrUnionGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGroupOrUnionGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupOrUnionGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
		GroupOrUnionGraphPatternContext _localctx = new GroupOrUnionGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_groupOrUnionGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			short lastKnownIndex = (short)q.ResultSet.Variables.Count;
			State = 383; _localctx.first = groupGraphPattern();
			_localctx.value = _localctx.first.value;
			State = 392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==72) {
				{
				{
				  foreach(var newV in q.ResultSet.Variables.Skip(lastKnownIndex))
					newV.Value.isNew=true; 
				State = 386; Match(72);
				State = 387; _localctx.second = groupGraphPattern();
				 _localctx.value =  _localctx.value.Union(_localctx.second.value);
				}
				}
				State = 394;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			 foreach(var newV in q.ResultSet.Variables.Skip(lastKnownIndex))
				newV.Value.isNew=false; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public ConstraintContext _constraint;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_filter; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(7);
			State = 398; _localctx._constraint = constraint();

			var f=_localctx._constraint.value;
			     _localctx.value =  store => f(store) ? new []{new Action(()=>{})}: Enumerable.Empty<Action>();

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public FunctionCallContext _functionCall;
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constraint; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_constraint);
		try {
			State = 410;
			switch (_input.La(1)) {
			case 44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value = _localctx._brackettedExpression.value;
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; _localctx._builtInCall = builtInCall();
				_localctx.value = _localctx._builtInCall.value;
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; _localctx._functionCall = functionCall();
				_localctx.value = _localctx._functionCall.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public IRIrefContext _iRIref;
		public ArgListContext _argList;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCall; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; _localctx._iRIref = iRIref();
			State = 413; _localctx._argList = argList();
			_localctx.value = q.Call(_localctx._iRIref.value, _localctx._argList.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public List<Func<IStore, dynamic>> value;
		public ExpressionContext main;
		public ExpressionContext second;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NIL() { return GetToken(sparql2PacNSParser.NIL, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argList; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			switch (_input.La(1)) {
			case NIL:
				{
				State = 416; Match(NIL);

				}
				break;
			case 44:
				{
				State = 418; Match(44);
				State = 419; _localctx.main = expression();
				 _localctx.value = new List<Func<IStore, dynamic>>(){ _localctx.main.value }; 
				State = 427;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 421; Match(40);
					State = 422; _localctx.second = expression();
					 _localctx.value.Add(_localctx.second.value); 
					}
					}
					State = 429;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 430; Match(19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTemplateContext : ParserRuleContext {
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public ConstructTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructTemplate; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterConstructTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitConstructTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTemplateContext constructTemplate() {
		ConstructTemplateContext _localctx = new ConstructTemplateContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_constructTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(49);
			State = 438;
			_la = _input.La(1);
			if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
				{
				State = 435; constructTriples();
				 q.CreateConstructTemplate(); 
				}
			}

			State = 440; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTriplesContext : ParserRuleContext {
		public TriplesSameSubjectConstructContext _triplesSameSubjectConstruct;
		public ConstructTriplesContext next;
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public TriplesSameSubjectConstructContext triplesSameSubjectConstruct() {
			return GetRuleContext<TriplesSameSubjectConstructContext>(0);
		}
		public ConstructTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructTriples; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterConstructTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitConstructTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTriplesContext constructTriples() {
		ConstructTriplesContext _localctx = new ConstructTriplesContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constructTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; _localctx._triplesSameSubjectConstruct = triplesSameSubjectConstruct();
			 q.constructTriples.Add(_localctx._triplesSameSubjectConstruct.value); 
			State = 448;
			_la = _input.La(1);
			if (_la==56) {
				{
				State = 444; Match(56);
				State = 446;
				_la = _input.La(1);
				if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
					{
					State = 445; _localctx.next = constructTriples();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectConstructContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public Func<IStore, string> subj=null;
		public PropertyListNotEmptyConstructContext _propertyListNotEmptyConstruct;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public PropertyListNotEmptyConstructContext propertyListNotEmptyConstruct() {
			return GetRuleContext<PropertyListNotEmptyConstructContext>(0);
		}
		public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public VarOrTermSubConstructContext varOrTermSubConstruct() {
			return GetRuleContext<VarOrTermSubConstructContext>(0);
		}
		public TriplesSameSubjectConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesSameSubjectConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubjectConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubjectConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubjectConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectConstructContext triplesSameSubjectConstruct() {
		TriplesSameSubjectConstructContext _localctx = new TriplesSameSubjectConstructContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_triplesSameSubjectConstruct);
		try {
			State = 458;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450; varOrTermSubConstruct();
				State = 451; _localctx._propertyListNotEmptyConstruct = propertyListNotEmptyConstruct();
				  _localctx.value = _localctx._propertyListNotEmptyConstruct.value; 
				}
				break;
			case 4:
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454; triplesNode();
				State = 455; propertyList();

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermSubConstructContext : ParserRuleContext {
		public VarLiteralContext _varLiteral;
		public GraphTermConstuctContext _graphTermConstuct;
		public GraphTermConstuctContext graphTermConstuct() {
			return GetRuleContext<GraphTermConstuctContext>(0);
		}
		public VarLiteralContext varLiteral() {
			return GetRuleContext<VarLiteralContext>(0);
		}
		public VarOrTermSubConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTermSubConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVarOrTermSubConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVarOrTermSubConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTermSubConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermSubConstructContext varOrTermSubConstruct() {
		VarOrTermSubConstructContext _localctx = new VarOrTermSubConstructContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_varOrTermSubConstruct);
		try {
			State = 466;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; _localctx._varLiteral = varLiteral();
				  ((TriplesSameSubjectConstructContext)GetInvokingContext(31)).subj =  pac=> pac.Get(q.ResultSet.Variables[(_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null)].index); 
				}
				break;
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463; _localctx._graphTermConstuct = graphTermConstuct();
					((TriplesSameSubjectConstructContext)GetInvokingContext(31)).subj =  pac=> _localctx._graphTermConstuct.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListNotEmptyConstructContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Tuple<string,string,string>>> value;
		public VerbObjectListConstructContext main;
		public VerbObjectListConstructContext seconds;
		public VerbObjectListConstructContext verbObjectListConstruct(int i) {
			return GetRuleContext<VerbObjectListConstructContext>(i);
		}
		public IReadOnlyList<VerbObjectListConstructContext> verbObjectListConstruct() {
			return GetRuleContexts<VerbObjectListConstructContext>();
		}
		public PropertyListNotEmptyConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyListNotEmptyConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterPropertyListNotEmptyConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitPropertyListNotEmptyConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListNotEmptyConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListNotEmptyConstructContext propertyListNotEmptyConstruct() {
		PropertyListNotEmptyConstructContext _localctx = new PropertyListNotEmptyConstructContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_propertyListNotEmptyConstruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; _localctx.main = verbObjectListConstruct();
			 _localctx.value = _localctx.main.value; 
			State = 478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==59) {
				{
				{
				State = 470; Match(59);
				State = 474;
				_la = _input.La(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (55 - 55)) | (1L << (PREFIXED_NAME - 55)) | (1L << (IRI_REF - 55)) | (1L << (VAR1 - 55)) | (1L << (VAR2 - 55)))) != 0)) {
					{
					State = 471; _localctx.seconds = verbObjectListConstruct();
					  var valueClone=_localctx.value.Clone() as Func<IStore, IEnumerable<Action>>;var scnds=_localctx.seconds.value; _localctx.value = packs=>scnds(packs).Concat(valueClone(packs)); 
					}
				}

				}
				}
				State = 480;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbObjectListConstructContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Tuple<string,string,string>>> value;
		public Func<IStore, string> pred=null;
		public ObjectListConstructContext _objectListConstruct;
		public ObjectListConstructContext objectListConstruct() {
			return GetRuleContext<ObjectListConstructContext>(0);
		}
		public VerbConstructContext verbConstruct() {
			return GetRuleContext<VerbConstructContext>(0);
		}
		public VerbObjectListConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verbObjectListConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVerbObjectListConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVerbObjectListConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbObjectListConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbObjectListConstructContext verbObjectListConstruct() {
		VerbObjectListConstructContext _localctx = new VerbObjectListConstructContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_verbObjectListConstruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; verbConstruct();
			State = 482; _localctx._objectListConstruct = objectListConstruct();
			 _localctx.value = _localctx._objectListConstruct.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbConstructContext : ParserRuleContext {
		public VarLiteralContext _varLiteral;
		public IRIrefContext _iRIref;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public VarLiteralContext varLiteral() {
			return GetRuleContext<VarLiteralContext>(0);
		}
		public VerbConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verbConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVerbConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVerbConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbConstructContext verbConstruct() {
		VerbConstructContext _localctx = new VerbConstructContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_verbConstruct);
		try {
			State = 493;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; _localctx._varLiteral = varLiteral();
				 ((VerbObjectListConstructContext)GetInvokingContext(34)).pred =  pac=> pac.Get(q.ResultSet.Variables[(_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null)].index); 
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488; _localctx._iRIref = iRIref();
				 ((VerbObjectListConstructContext)GetInvokingContext(34)).pred =  pac=> _localctx._iRIref.value; 
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 3);
				{
				State = 491; Match(55);
				 ((VerbObjectListConstructContext)GetInvokingContext(34)).pred =  pac=> "a"; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListConstructContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Tuple<string,string,string>>> value;
		public GraphNodeConstructContext o0;
		public GraphNodeConstructContext o1;
		public GraphNodeConstructContext graphNodeConstruct(int i) {
			return GetRuleContext<GraphNodeConstructContext>(i);
		}
		public IReadOnlyList<GraphNodeConstructContext> graphNodeConstruct() {
			return GetRuleContexts<GraphNodeConstructContext>();
		}
		public ObjectListConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectListConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterObjectListConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitObjectListConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectListConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListConstructContext objectListConstruct() {
		ObjectListConstructContext _localctx = new ObjectListConstructContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_objectListConstruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; _localctx.o0 = graphNodeConstruct();
			 var o0value= _localctx.o0.value; _localctx.value = pack => Enumerable.Repeat(o0value(pack),1);	 
			State = 503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==40) {
				{
				{
				State = 497; Match(40);
				State = 498; _localctx.o1 = graphNodeConstruct();
				  var valueClone=_localctx.value; var o11=_localctx.o1.value; _localctx.value = packs=>valueClone(packs).Concat(Enumerable.Repeat(o11(packs),1)); 
				}
				}
				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodeConstructContext : ParserRuleContext {
		public Func<IStore, Tuple<string,string,string>> value;
		public VarOrTermConstructContext _varOrTermConstruct;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public VarOrTermConstructContext varOrTermConstruct() {
			return GetRuleContext<VarOrTermConstructContext>(0);
		}
		public GraphNodeConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphNodeConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGraphNodeConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGraphNodeConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNodeConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodeConstructContext graphNodeConstruct() {
		GraphNodeConstructContext _localctx = new GraphNodeConstructContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_graphNodeConstruct);
		try {
			State = 510;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506; _localctx._varOrTermConstruct = varOrTermConstruct();
				 _localctx.value = _localctx._varOrTermConstruct.value; 
				}
				break;
			case 4:
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509; triplesNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermConstructContext : ParserRuleContext {
		public Func<IStore, Tuple<string,string,string>> value;
		public VarLiteralContext _varLiteral;
		public GraphTermConstuctContext _graphTermConstuct;
		public GraphTermConstuctContext graphTermConstuct() {
			return GetRuleContext<GraphTermConstuctContext>(0);
		}
		public VarLiteralContext varLiteral() {
			return GetRuleContext<VarLiteralContext>(0);
		}
		public VarOrTermConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTermConstruct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVarOrTermConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVarOrTermConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTermConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermConstructContext varOrTermConstruct() {
		VarOrTermConstructContext _localctx = new VarOrTermConstructContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_varOrTermConstruct);
		try {
			State = 518;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512; _localctx._varLiteral = varLiteral();
					   
					var p = ((VerbObjectListConstructContext)GetInvokingContext(34)).pred;
					var s = ((TriplesSameSubjectConstructContext)GetInvokingContext(31)).subj;		  	
					string oVar=(_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null);
					_localctx.value =  pac=> Tuple.Create(s(pac), p(pac), pac.Get(q.ResultSet.Variables[oVar].index));
				  
				}
				break;
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515; _localctx._graphTermConstuct = graphTermConstuct();

					
					var p = ((VerbObjectListConstructContext)GetInvokingContext(34)).pred;
					var s = ((TriplesSameSubjectConstructContext)GetInvokingContext(31)).subj;		  	
					string oVar=(_localctx._graphTermConstuct!=null?_input.GetText(_localctx._graphTermConstuct.start,_localctx._graphTermConstuct.stop):null);
					_localctx.value = pac => Tuple.Create( s(pac), p(pac), _localctx._graphTermConstuct.value);

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphTermConstuctContext : ParserRuleContext {
		public string value;
		public IRIrefContext _iRIref;
		public RDFLiteralContext _rDFLiteral;
		public NumericContext _numeric;
		public IToken _BooleanLiteral;
		public IToken _BlankNode;
		public IToken _NIL;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public ITerminalNode BlankNode() { return GetToken(sparql2PacNSParser.BlankNode, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(sparql2PacNSParser.NIL, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(sparql2PacNSParser.BooleanLiteral, 0); }
		public GraphTermConstuctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphTermConstuct; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGraphTermConstuct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGraphTermConstuct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphTermConstuct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphTermConstuctContext graphTermConstuct() {
		GraphTermConstuctContext _localctx = new GraphTermConstuctContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_graphTermConstuct);
		try {
			State = 535;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520; _localctx._iRIref = iRIref();
				   _localctx.value =  _localctx._iRIref.value; 
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523; _localctx._rDFLiteral = rDFLiteral();
				 _localctx.value =  _localctx._rDFLiteral.value.ToString(); 
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 526; _localctx._numeric = numeric();
				  _localctx.value =  (_localctx._numeric!=null?_input.GetText(_localctx._numeric.start,_localctx._numeric.stop):null); 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 529; _localctx._BooleanLiteral = Match(BooleanLiteral);
					 _localctx.value =  (_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null); 
				}
				break;
			case BlankNode:
				EnterOuterAlt(_localctx, 5);
				{
				State = 531; _localctx._BlankNode = Match(BlankNode);
				 _localctx.value =  (_localctx._BlankNode!=null?_localctx._BlankNode.Text:null); 
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 533; _localctx._NIL = Match(NIL);
					_localctx.value = (_localctx._NIL!=null?_localctx._NIL.Text:null);  
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> value;
		public INode subj;
		public PropertyListNotEmptyContext _propertyListNotEmpty;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public VarOrTermSubContext varOrTermSub() {
			return GetRuleContext<VarOrTermSubContext>(0);
		}
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public TriplesSameSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesSameSubject; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectContext triplesSameSubject() {
		TriplesSameSubjectContext _localctx = new TriplesSameSubjectContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_triplesSameSubject);
		try {
			State = 545;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537; varOrTermSub();
				State = 538; _localctx._propertyListNotEmpty = propertyListNotEmpty();
				  _localctx.value = _localctx._propertyListNotEmpty.f; 
				}
				break;
			case 4:
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541; triplesNode();
				State = 542; propertyList();

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListNotEmptyContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public VerbObjectListContext main;
		public VerbObjectListContext seconds;
		public IReadOnlyList<VerbObjectListContext> verbObjectList() {
			return GetRuleContexts<VerbObjectListContext>();
		}
		public VerbObjectListContext verbObjectList(int i) {
			return GetRuleContext<VerbObjectListContext>(i);
		}
		public PropertyListNotEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyListNotEmpty; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterPropertyListNotEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitPropertyListNotEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListNotEmptyContext propertyListNotEmpty() {
		PropertyListNotEmptyContext _localctx = new PropertyListNotEmptyContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_propertyListNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; _localctx.main = verbObjectList();
			 _localctx.f = _localctx.main.f; 
			State = 557;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==59) {
				{
				{
				State = 549; Match(59);
				State = 553;
				_la = _input.La(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (55 - 55)) | (1L << (PREFIXED_NAME - 55)) | (1L << (IRI_REF - 55)) | (1L << (VAR1 - 55)) | (1L << (VAR2 - 55)))) != 0)) {
					{
					State = 550; _localctx.seconds = verbObjectList();
					 var valueClone=_localctx.f.Clone() as Func<IEnumerable<IStore>,IEnumerable<IStore>>; var scnds=_localctx.seconds.f; _localctx.f = packs=>scnds(valueClone(packs)); 
					}
				}

				}
				}
				State = 559;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListContext : ParserRuleContext {
		public List<VarOrTermContext> value;
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyList; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListContext propertyList() {
		PropertyListContext _localctx = new PropertyListContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_propertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (55 - 55)) | (1L << (PREFIXED_NAME - 55)) | (1L << (IRI_REF - 55)) | (1L << (VAR1 - 55)) | (1L << (VAR2 - 55)))) != 0)) {
				{
				State = 560; propertyListNotEmpty();
				  
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbObjectListContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public INode Predicate;
		public ObjectListContext _objectList;
		public VerbContext verb() {
			return GetRuleContext<VerbContext>(0);
		}
		public ObjectListContext objectList() {
			return GetRuleContext<ObjectListContext>(0);
		}
		public VerbObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verbObjectList; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVerbObjectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVerbObjectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbObjectListContext verbObjectList() {
		VerbObjectListContext _localctx = new VerbObjectListContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_verbObjectList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; verb();
			State = 566; _localctx._objectList = objectList();
			 _localctx.f = _localctx._objectList.f; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public GraphNodeContext o0;
		public GraphNodeContext o1;
		public IReadOnlyList<GraphNodeContext> graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectList; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterObjectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitObjectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListContext objectList() {
		ObjectListContext _localctx = new ObjectListContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_objectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; _localctx.o0 = graphNode();
			 _localctx.f = _localctx.o0.f;	 
			State = 577;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==40) {
				{
				{
				State = 571; Match(40);
				State = 572; _localctx.o1 = graphNode();
				 
				Func<IStore,IEnumerable<IStore>> valueClone=_localctx.f;
				 var o11=_localctx.o1.f; _localctx.f = packs=>o11(valueClone(packs)); 
				}
				}
				State = 579;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbContext : ParserRuleContext {
		public VarOrIRIrefContext _varOrIRIref;
		public VarOrIRIrefContext varOrIRIref() {
			return GetRuleContext<VarOrIRIrefContext>(0);
		}
		public VerbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verb; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVerb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVerb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbContext verb() {
		VerbContext _localctx = new VerbContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_verb);
		try {
			State = 585;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580; _localctx._varOrIRIref = varOrIRIref();
				 ((VerbObjectListContext)GetInvokingContext(43)).Predicate = _localctx._varOrIRIref.p; 
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; Match(55);
					((VerbObjectListContext)GetInvokingContext(43)).Predicate = store=>store.NameSpaceMap.@type; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodeContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TriplesNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesNode; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterTriplesNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitTriplesNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesNodeContext triplesNode() {
		TriplesNodeContext _localctx = new TriplesNodeContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_triplesNode);
		try {
			State = 593;
			switch (_input.La(1)) {
			case 44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587; collection();
				 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590; blankNodePropertyList();

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blankNodePropertyList; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListContext blankNodePropertyList() {
		BlankNodePropertyListContext _localctx = new BlankNodePropertyListContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_blankNodePropertyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; Match(4);
			State = 596; propertyListNotEmpty();
			State = 597; Match(37);
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public IReadOnlyList<GraphNodeContext> graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_collection; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; Match(44);
			State = 604;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 601; graphNode();
					 
				}
				}
				State = 606;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0) );
			State = 608; Match(19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodeContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public VarOrTermContext _varOrTerm;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public GraphNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphNode; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGraphNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGraphNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodeContext graphNode() {
		GraphNodeContext _localctx = new GraphNodeContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_graphNode);
		try {
			State = 614;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610; _localctx._varOrTerm = varOrTerm();
				 _localctx.f = _localctx._varOrTerm.f; 
				}
				break;
			case 4:
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613; triplesNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermSubContext : ParserRuleContext {
		public VarContext _var;
		public GraphTermContext _graphTerm;
		public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrTermSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTermSub; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVarOrTermSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVarOrTermSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTermSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermSubContext varOrTermSub() {
		VarOrTermSubContext _localctx = new VarOrTermSubContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_varOrTermSub);
		try {
			State = 622;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 616; _localctx._var = var();
				 ((TriplesSameSubjectContext)GetInvokingContext(40)).subj = _localctx._var.p; q.SetSubjectIsDataFalse(_localctx._var.p);
				}
				break;
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619; _localctx._graphTerm = graphTerm();
					((TriplesSameSubjectContext)GetInvokingContext(40)).subj.pacElement = q.ts.EntityCoding.GetCode(_localctx._graphTerm.constantNode); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermContext : ParserRuleContext {
		public Func<IStore, IEnumerable<Action>> f;
		public VarContext _var;
		public GraphTermContext _graphTerm;
		public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVarOrTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVarOrTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermContext varOrTerm() {
		VarOrTermContext _localctx = new VarOrTermContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_varOrTerm);
		try {
			State = 630;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; _localctx._var = var();
					   
					var p = ((VerbObjectListContext)GetInvokingContext(43)).Predicate;
					var sVar = ((TriplesSameSubjectContext)GetInvokingContext(40)).subj;		  	
						_localctx.f =  q.CreateTriplet(sVar, p, _localctx._var.p);	 		
				  
				}
				break;
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; _localctx._graphTerm = graphTerm();

					var p = ((VerbObjectListContext)GetInvokingContext(43)).Predicate;
					var sVar = ((TriplesSameSubjectContext)GetInvokingContext(40)).subj;
					_localctx.f =  q.CreateTriplet(sVar, p, _localctx._graphTerm.constantNode	);	

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrIRIrefContext : ParserRuleContext {
		public Func<IStore,INode> p;
		public VarContext _var;
		public IRIrefContext _iRIref;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrIRIrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrIRIref; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVarOrIRIref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVarOrIRIref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrIRIref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrIRIrefContext varOrIRIref() {
		VarOrIRIrefContext _localctx = new VarOrIRIrefContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_varOrIRIref);
		try {
			State = 638;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632; _localctx._var = var();
				  _localctx.p =  store=> _localctx._var.p;  
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635; _localctx._iRIref = iRIref();
					
				_localctx.p =  store=>store.CreateUriNode(_localctx._iRIref.value);    

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public VariableNode p;
		public VarLiteralContext _varLiteral;
		public VarLiteralContext varLiteral() {
			return GetRuleContext<VarLiteralContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_var; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; _localctx._varLiteral = varLiteral();

			_localctx.p = 	q.GetVariable((_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null));

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarLiteralContext : ParserRuleContext {
		public ITerminalNode VAR2() { return GetToken(sparql2PacNSParser.VAR2, 0); }
		public ITerminalNode VAR1() { return GetToken(sparql2PacNSParser.VAR1, 0); }
		public VarLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varLiteral; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterVarLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitVarLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarLiteralContext varLiteral() {
		VarLiteralContext _localctx = new VarLiteralContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_varLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			_la = _input.La(1);
			if ( !(_la==VAR1 || _la==VAR2) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphTermContext : ParserRuleContext {
		public Func<IStore,INode> constantNode;
		public IRIrefContext _iRIref;
		public RDFLiteralContext _rDFLiteral;
		public NumericContext _numeric;
		public IToken _BooleanLiteral;
		public IToken _BlankNode;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public ITerminalNode BlankNode() { return GetToken(sparql2PacNSParser.BlankNode, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(sparql2PacNSParser.NIL, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(sparql2PacNSParser.BooleanLiteral, 0); }
		public GraphTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterGraphTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitGraphTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphTermContext graphTerm() {
		GraphTermContext _localctx = new GraphTermContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_graphTerm);
		try {
			State = 660;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645; _localctx._iRIref = iRIref();
				   _localctx.constantNode =  store => store.CreateUriNode(_localctx._iRIref.value);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648; _localctx._rDFLiteral = rDFLiteral();
				_localctx.constantNode =   _localctx._rDFLiteral.value;
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 651; _localctx._numeric = numeric();
				  _localctx.constantNode =  store=> store.CreateLiteralNode(_localctx._numeric.num); 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 654; _localctx._BooleanLiteral = Match(BooleanLiteral);
					 _localctx.constantNode =  store=> store.CreateLiteralNode(bool.Parse((_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null))); 
				}
				break;
			case BlankNode:
				EnterOuterAlt(_localctx, 5);
				{
				State = 656; _localctx._BlankNode = Match(BlankNode);
				 _localctx.constantNode =  store => store.CreateBlankNode((_localctx._BlankNode!=null?_localctx._BlankNode.Text:null)); 
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 658; Match(NIL);
					_localctx.constantNode =  store=> null;  
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public ConditionalAndExpressionContext main;
		public ConditionalAndExpressionContext alt;
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public IReadOnlyList<ConditionalAndExpressionContext> conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; _localctx.main = conditionalAndExpression();
			 _localctx.value = _localctx.main.value;  
			State = 670;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==64) {
				{
				{
				State = 664; Match(64);
				State = 665; _localctx.alt = conditionalAndExpression();
				 Func<IStore, dynamic> cloneValue=_localctx.value; 
				Func<IStore, dynamic> cloneAlt=_localctx.alt.value;
					_localctx.value =  x=> cloneValue(x) || cloneAlt(x); 
					
				}
				}
				State = 672;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public ValueLogicalContext main;
		public ValueLogicalContext alt;
		public IReadOnlyList<ValueLogicalContext> valueLogical() {
			return GetRuleContexts<ValueLogicalContext>();
		}
		public ValueLogicalContext valueLogical(int i) {
			return GetRuleContext<ValueLogicalContext>(i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_conditionalAndExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; _localctx.main = valueLogical();
			_localctx.value = _localctx.main.value; 
			State = 681;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==63) {
				{
				{
				State = 675; Match(63);
				State = 676; _localctx.alt = valueLogical();

				Func<IStore, dynamic> cloneValue=_localctx.value;
				Func<IStore, dynamic> cloneAlt=_localctx.alt.value;
				_localctx.value =  x=>cloneValue(x) && cloneAlt.value(x); 
				}
				}
				State = 683;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueLogicalContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public AdditiveExpressionContext main;
		public AdditiveExpressionContext second;
		public IReadOnlyList<AdditiveExpressionContext> additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ValueLogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_valueLogical; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterValueLogical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitValueLogical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueLogicalContext valueLogical() {
		ValueLogicalContext _localctx = new ValueLogicalContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_valueLogical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; _localctx.main = additiveExpression();
			 _localctx.value = _localctx.main.value; 
			State = 710;
			switch (_input.La(1)) {
			case 26:
				{
				State = 686; Match(26);
				State = 687; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)==f1(x);  
				}
				break;
			case 10:
				{
				State = 690; Match(10);
				State = 691; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)!=f1(x); 
				}
				break;
			case 8:
				{
				State = 694; Match(8);
				State = 695; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)<f1(x);  
				}
				break;
			case 65:
				{
				State = 698; Match(65);
				State = 699; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)>f1(x);  
				}
				break;
			case 11:
				{
				State = 702; Match(11);
				State = 703; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)<=f1(x);  
				}
				break;
			case 70:
				{
				State = 706; Match(70);
				State = 707; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)>=f1(x);  
				}
				break;
			case 19:
			case 40:
			case 63:
			case 64:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public MultiplicativeExpressionContext main;
		public MultiplicativeExpressionContext second;
		public IToken _NumericLiteralPositive;
		public IToken _NumericLiteralNegative;
		public ITerminalNode NumericLiteralNegative(int i) {
			return GetToken(sparql2PacNSParser.NumericLiteralNegative, i);
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode NumericLiteralPositive(int i) {
			return GetToken(sparql2PacNSParser.NumericLiteralPositive, i);
		}
		public IReadOnlyList<MultiplicativeExpressionContext> multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public IReadOnlyList<ITerminalNode> NumericLiteralPositive() { return GetTokens(sparql2PacNSParser.NumericLiteralPositive); }
		public IReadOnlyList<ITerminalNode> NumericLiteralNegative() { return GetTokens(sparql2PacNSParser.NumericLiteralNegative); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_additiveExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; _localctx.main = multiplicativeExpression();
			 _localctx.value = _localctx.main.value;  
			State = 728;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (43 - 43)) | (1L << (58 - 43)) | (1L << (NumericLiteralPositive - 43)) | (1L << (NumericLiteralNegative - 43)))) != 0)) {
				{
				State = 726;
				switch (_input.La(1)) {
				case 58:
					{
					State = 714; Match(58);
					State = 715; _localctx.second = multiplicativeExpression();
					   var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)+f1(x);  
					}
					break;
				case 43:
					{
					State = 718; Match(43);
					State = 719; _localctx.second = multiplicativeExpression();
					   var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)-f1(x);  
					}
					break;
				case NumericLiteralPositive:
					{
					State = 722; _localctx._NumericLiteralPositive = Match(NumericLiteralPositive);
					 _localctx.value =  Expression.Add(_localctx.value, Expression.Constant(double.Parse((_localctx._NumericLiteralPositive!=null?_localctx._NumericLiteralPositive.Text:null))));  
					}
					break;
				case NumericLiteralNegative:
					{
					State = 724; _localctx._NumericLiteralNegative = Match(NumericLiteralNegative);
					 _localctx.value =  Expression.Add(_localctx.value, Expression.Constant(double.Parse((_localctx._NumericLiteralNegative!=null?_localctx._NumericLiteralNegative.Text:null))));  
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 730;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public UnaryExpressionContext main;
		public UnaryExpressionContext second;
		public IReadOnlyList<UnaryExpressionContext> unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_multiplicativeExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; _localctx.main = unaryExpression();
			 _localctx.value = _localctx.main.value;  
			State = 743;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==6 || _la==69) {
				{
				State = 741;
				switch (_input.La(1)) {
				case 6:
					{
					State = 733; Match(6);
					State = 734; _localctx.second = unaryExpression();
					  var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)*f1(x);  
					}
					break;
				case 69:
					{
					State = 737; Match(69);
					State = 738; _localctx.second = unaryExpression();
					  var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)/f1(x); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 745;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public PrimaryExpressionContext _primaryExpression;
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_unaryExpression);
		try {
			State = 761;
			switch (_input.La(1)) {
			case 35:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746; Match(35);
				State = 747; _localctx._primaryExpression = primaryExpression();
				 var f=_localctx._primaryExpression.value; _localctx.value = store=>! f(store); 
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750; Match(58);
				State = 751; _localctx._primaryExpression = primaryExpression();
				 _localctx.value =  _localctx._primaryExpression.value; 
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 3);
				{
				State = 754; Match(43);
				State = 755; _localctx._primaryExpression = primaryExpression();
				 var f=_localctx._primaryExpression.value; _localctx.value = store=> - f(store);  
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 758; _localctx._primaryExpression = primaryExpression();
				 _localctx.value = _localctx._primaryExpression.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public IRIrefOrFunctionContext _iRIrefOrFunction;
		public NumericContext _numeric;
		public IToken _BooleanLiteral;
		public VarContext _var;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public IRIrefOrFunctionContext iRIrefOrFunction() {
			return GetRuleContext<IRIrefOrFunctionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode BooleanLiteral() { return GetToken(sparql2PacNSParser.BooleanLiteral, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_primaryExpression);
		try {
			State = 783;
			switch (_input.La(1)) {
			case 44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763; _localctx._brackettedExpression = brackettedExpression();
				 _localctx.value = _localctx._brackettedExpression.value; 
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766; _localctx._builtInCall = builtInCall();
				 _localctx.value = _localctx._builtInCall.value;  
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 769; _localctx._iRIrefOrFunction = iRIrefOrFunction();
				 _localctx.value =  _localctx._iRIrefOrFunction.value; 
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 772; rDFLiteral();
				 _localctx.value = rDFLiteral.value; 
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 775; _localctx._numeric = numeric();
				 _localctx.value =  store=>store.CreateLiteralNode(_localctx._numeric.num); 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 778; _localctx._BooleanLiteral = Match(BooleanLiteral);
				 _localctx.value =  store=>store.CreateLiteralNode(bool.Parse((_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null))); 
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 780; _localctx._var = var();
					 _localctx.value =  store=> _localctx._var.p; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrackettedExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BrackettedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_brackettedExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterBrackettedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitBrackettedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackettedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrackettedExpressionContext brackettedExpression() {
		BrackettedExpressionContext _localctx = new BrackettedExpressionContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_brackettedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(44);
			State = 786; _localctx._expression = expression();
			State = 787; Match(19);
			 _localctx.value = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltInCallContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public ExpressionContext _expression;
		public RDFLiteralContext _rDFLiteral;
		public VarContext _var;
		public ExpressionContext l;
		public ExpressionContext r;
		public RegexExpressionContext _regexExpression;
		public RegexExpressionContext regexExpression() {
			return GetRuleContext<RegexExpressionContext>(0);
		}
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BuiltInCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_builtInCall; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterBuiltInCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitBuiltInCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInCallContext builtInCall() {
		BuiltInCallContext _localctx = new BuiltInCallContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_builtInCall);
		int _la;
		try {
			State = 871;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 790;
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (28 - 28)) | (1L << (34 - 28)) | (1L << (71 - 28)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 791; Match(44);
				State = 792; _localctx._expression = expression();
				State = 793; Match(19);
				 var f= _localctx._expression.value; _localctx.value = store => f(store).ToString();  
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 52) | (1L << 61) | (1L << 62))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 797; Match(44);
				State = 798; _localctx._rDFLiteral = rDFLiteral();
				State = 799; Match(19);
				 var f=_localctx._rDFLiteral.value; _localctx.value = q.Lang(_localctx._rDFLiteral.value);  
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 802;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 52) | (1L << 61) | (1L << 62))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 803; Match(44);
				State = 804; _localctx._var = var();
				State = 805; Match(19);
				 _localctx.value = q.Lang(_localctx._var.p);  
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 808;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 17) | (1L << 18) | (1L << 24) | (1L << 47))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 809; Match(44);
				State = 810; _localctx.l = expression();
				State = 811; Match(40);
				State = 812; Match(21);
				State = 813; Match(19);
				 _localctx.value =  q.Langmatch(_localctx.l.value);  
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 816;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 17) | (1L << 18) | (1L << 24) | (1L << 47))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 817; Match(44);
				State = 818; _localctx.l = expression();
				State = 819; Match(40);
				State = 820; _localctx.r = expression();
				State = 821; Match(19);
				 _localctx.value =  q.Langmatch(_localctx.l.value, _localctx.r.value);  
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 824;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 27) | (1L << 29) | (1L << 31) | (1L << 45) | (1L << 46))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 825; Match(44);
				State = 826; expression();
				State = 827; Match(19);
				  
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 830;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 22) | (1L << 23) | (1L << 50))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 831; Match(44);
				State = 832; _localctx._var = var();
				State = 833; Match(19);
				 _localctx.value =  q.Bound(_localctx._var.p);  
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 836; Match(33);
				State = 837; Match(44);
				State = 838; _localctx.l = expression();
				State = 839; Match(40);
				State = 840; _localctx.r = expression();
				State = 841; Match(19);
				 _localctx.value = q.EqualOrAssign(_localctx.l.value, _localctx.r.value);  
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 844; Match(9);
				State = 845; Match(44);
				State = 846; expression();
				State = 847; Match(19);

				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 850; Match(48);
				State = 851; Match(44);
				State = 852; expression();
				State = 853; Match(19);
				 
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 856; Match(2);
				State = 857; Match(44);
				State = 858; expression();
				State = 859; Match(19);
				  
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 862; Match(51);
				State = 863; Match(44);
				State = 864; expression();
				State = 865; Match(19);
				 
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 868; _localctx._regexExpression = regexExpression();
				 _localctx.value = _localctx._regexExpression.value;  
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExpressionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public VarContext v;
		public IToken rex;
		public IToken extraParam;
		public IReadOnlyList<ITerminalNode> String() { return GetTokens(sparql2PacNSParser.String); }
		public ITerminalNode String(int i) {
			return GetToken(sparql2PacNSParser.String, i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public RegexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_regexExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterRegexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitRegexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExpressionContext regexExpression() {
		RegexExpressionContext _localctx = new RegexExpressionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_regexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			_la = _input.La(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (12 - 12)) | (1L << (20 - 12)) | (1L << (66 - 12)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 874; Match(44);
			State = 875; _localctx.v = var();
			State = 876; Match(40);
			State = 877; _localctx.rex = Match(String);
			State = 880;
			_la = _input.La(1);
			if (_la==40) {
				{
				State = 878; Match(40);
				State = 879; _localctx.extraParam = Match(String);
				}
			}

			State = 882; Match(19);
			 _localctx.value = Query.RegExpression(_localctx.v.p, (_localctx.rex!=null?_localctx.rex.Text:null), _localctx.extraParam==null ? null : (_localctx.extraParam!=null?_localctx.extraParam.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IRIrefOrFunctionContext : ParserRuleContext {
		public Func<IStore, dynamic> value;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IRIrefOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_iRIrefOrFunction; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterIRIrefOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitIRIrefOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIRIrefOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IRIrefOrFunctionContext iRIrefOrFunction() {
		IRIrefOrFunctionContext _localctx = new IRIrefOrFunctionContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_iRIrefOrFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885; iRIref();
			 
			throw new NotImplementedException();
			   
			State = 890;
			_la = _input.La(1);
			if (_la==44 || _la==NIL) {
				{
				State = 887; argList();
				  
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RDFLiteralContext : ParserRuleContext {
		public Func<IStore, ILiteralNode> value;
		public IToken _String;
		public IToken _LANGTAG;
		public IRIrefContext _iRIref;
		public ITerminalNode String() { return GetToken(sparql2PacNSParser.String, 0); }
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode LANGTAG() { return GetToken(sparql2PacNSParser.LANGTAG, 0); }
		public RDFLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rDFLiteral; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterRDFLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitRDFLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRDFLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RDFLiteralContext rDFLiteral() {
		RDFLiteralContext _localctx = new RDFLiteralContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_rDFLiteral);
		try {
			State = 902;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 892; _localctx._String = Match(String);
				State = 893; _localctx._LANGTAG = Match(LANGTAG);

				var s1= (_localctx._String!=null?_localctx._String.Text:null);	 
				s1 = s1.Substring(1,s1.Length-2);
				_localctx.value =  store => store.CreateLiteralNode(null, s1, (_localctx._LANGTAG!=null?_localctx._LANGTAG.Text:null).ToLower());

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 895; _localctx._String = Match(String);
				State = 896; Match(14);
				State = 897; _localctx._iRIref = iRIref();

				 var s2= (_localctx._String!=null?_localctx._String.Text:null);	 
				s2 = s2.Substring(1,s2.Length-2);
				var t=_localctx._iRIref.value;
				 _localctx.value =  store=>store.CreateLiteralNode(t, s2, null);

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 900; _localctx._String = Match(String);

				var s= (_localctx._String!=null?_localctx._String.Text:null);	 
				s = s.Substring(1,s.Length-2);
				_localctx.value =  store=>store.CreateLiteralNode(null, s,null);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IRIrefContext : ParserRuleContext {
		public string value;
		public IToken _IRI_REF;
		public IToken _PREFIXED_NAME;
		public ITerminalNode IRI_REF() { return GetToken(sparql2PacNSParser.IRI_REF, 0); }
		public ITerminalNode PREFIXED_NAME() { return GetToken(sparql2PacNSParser.PREFIXED_NAME, 0); }
		public IRIrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_iRIref; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterIRIref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitIRIref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIRIref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IRIrefContext iRIref() {
		IRIrefContext _localctx = new IRIrefContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_iRIref);
		try {
			State = 908;
			switch (_input.La(1)) {
			case IRI_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 904; _localctx._IRI_REF = Match(IRI_REF);
					
						var iri=(_localctx._IRI_REF!=null?_localctx._IRI_REF.Text:null);	
								    iri = iri.Substring(1, iri.Length - 2);
						_localctx.value =  q.ts.NameSpaceStore.FromFullName(iri);
						 
				}
				break;
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 906; _localctx._PREFIXED_NAME = Match(PREFIXED_NAME);
					
				var match = PrefixNSSlpit.Match((_localctx._PREFIXED_NAME!=null?_localctx._PREFIXED_NAME.Text:null));		            
				 _localctx.value =  q.ts.NameSpaceStore.FromSplitted(q.prefixes[match.Groups[1].Value], match.Groups[2].Value); 
				 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public double num;
		public NumericLiteralContext _numericLiteral;
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numeric; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; _localctx._numericLiteral = numericLiteral();
			double value; string txt=(_localctx._numericLiteral!=null?_input.GetText(_localctx._numericLiteral.start,_localctx._numericLiteral.stop):null); if(!double.TryParse(txt, out value) && !double.TryParse(txt.Replace(".",","), out value)) throw new Exception("qe5645");   _localctx.num = value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode NumericLiteralPositive() { return GetToken(sparql2PacNSParser.NumericLiteralPositive, 0); }
		public NumericLiteralUnsignedContext numericLiteralUnsigned() {
			return GetRuleContext<NumericLiteralUnsignedContext>(0);
		}
		public ITerminalNode NumericLiteralNegative() { return GetToken(sparql2PacNSParser.NumericLiteralNegative, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericLiteral; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_numericLiteral);
		try {
			State = 916;
			switch (_input.La(1)) {
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 913; numericLiteralUnsigned();
				}
				break;
			case NumericLiteralPositive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 914; Match(NumericLiteralPositive);
				}
				break;
			case NumericLiteralNegative:
				EnterOuterAlt(_localctx, 3);
				{
				State = 915; Match(NumericLiteralNegative);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralUnsignedContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(sparql2PacNSParser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(sparql2PacNSParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(sparql2PacNSParser.DECIMAL, 0); }
		public NumericLiteralUnsignedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericLiteralUnsigned; }
		public override void EnterRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.EnterNumericLiteralUnsigned(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isparql2PacNSListener typedListener = listener as Isparql2PacNSListener;
			if (typedListener != null) typedListener.ExitNumericLiteralUnsigned(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isparql2PacNSVisitor<TResult> typedVisitor = visitor as Isparql2PacNSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralUnsigned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralUnsignedContext numericLiteralUnsigned() {
		NumericLiteralUnsignedContext _localctx = new NumericLiteralUnsignedContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_numericLiteralUnsigned);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			_la = _input.La(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (INTEGER - 86)) | (1L << (DECIMAL - 86)) | (1L << (DOUBLE - 86)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3o\x39B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2"+
		"\x98\n\x2\x3\x3\x5\x3\x9B\n\x3\x3\x3\a\x3\x9E\n\x3\f\x3\xE\x3\xA1\v\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\xB0\n\x6\x3\x6\x3\x6\x3\x6\x6\x6\xB5\n\x6\r\x6\xE\x6\xB6"+
		"\x3\x6\x3\x6\x5\x6\xBB\n\x6\x3\x6\a\x6\xBE\n\x6\f\x6\xE\x6\xC1\v\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xCA\n\a\f\a\xE\a\xCD\v\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\xDA\n\b\r\b\xE"+
		"\b\xDB\x3\b\x3\b\x5\b\xE0\n\b\x3\b\a\b\xE3\n\b\f\b\xE\b\xE6\v\b\x3\b\x5"+
		"\b\xE9\n\b\x3\b\x3\b\x3\b\x3\t\x3\t\a\t\xF0\n\t\f\t\xE\t\xF3\v\t\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x5\n\xFB\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\xE\x5\xE\x105\n\xE\x3\xE\x3\xE\x3\xE\x3\xF\x5\xF\x10B\n\xF\x3\xF"+
		"\x5\xF\x10E\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x115\n\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x11C\n\x10\x5\x10\x11E\n\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x127\n\x11\f\x11"+
		"\xE\x11\x12A\v\x11\x3\x12\x3\x12\x3\x12\x5\x12\x12F\n\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x13A\n\x12\x5"+
		"\x12\x13C\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x14A\n\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x152\n\x15\x3\x15\x5\x15\x155\n\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x15A\n\x15\a\x15\x15C\n\x15\f\x15\xE\x15\x15F\v\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x169\n"+
		"\x16\x5\x16\x16B\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x5\x17\x176\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\a\x1A\x189\n\x1A\f\x1A\xE\x1A\x18C\v\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x19D\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x1AC\n"+
		"\x1E\f\x1E\xE\x1E\x1AF\v\x1E\x3\x1E\x3\x1E\x5\x1E\x1B3\n\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x1B9\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x5"+
		" \x1C1\n \x5 \x1C3\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x1CD\n!\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x1D5\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x1DD"+
		"\n#\a#\x1DF\n#\f#\xE#\x1E2\v#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%"+
		"\x3%\x3%\x5%\x1F0\n%\x3&\x3&\x3&\x3&\x3&\x3&\a&\x1F8\n&\f&\xE&\x1FB\v"+
		"&\x3\'\x3\'\x3\'\x3\'\x5\'\x201\n\'\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x209\n"+
		"(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x21A"+
		"\n)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x224\n*\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x5+\x22C\n+\a+\x22E\n+\f+\xE+\x231\v+\x3,\x3,\x3,\x5,\x236\n,\x3-\x3"+
		"-\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\a.\x242\n.\f.\xE.\x245\v.\x3/\x3/\x3"+
		"/\x3/\x3/\x5/\x24C\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30"+
		"\x254\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x6\x32\x25F\n\x32\r\x32\xE\x32\x260\x3\x32\x3\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x5\x33\x269\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x5\x34\x271\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x279"+
		"\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x281\n\x36\x3"+
		"\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5"+
		"\x39\x297\n\x39\x3:\x3:\x3:\x3:\x3:\x3:\a:\x29F\n:\f:\xE:\x2A2\v:\x3;"+
		"\x3;\x3;\x3;\x3;\x3;\a;\x2AA\n;\f;\xE;\x2AD\v;\x3<\x3<\x3<\x3<\x3<\x3"+
		"<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<"+
		"\x3<\x3<\x3<\x5<\x2C9\n<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\a=\x2D9\n=\f=\xE=\x2DC\v=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3"+
		">\x3>\a>\x2E8\n>\f>\xE>\x2EB\v>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\x3?\x3?\x5?\x2FC\n?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@"+
		"\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x312\n@\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x36A\n\x42\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x5\x43\x373\n\x43\x3\x43\x3\x43\x3\x43\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x37D\n\x44\x3\x45\x3\x45\x3\x45\x3"+
		"\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x389\n\x45\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x5\x46\x38F\n\x46\x3G\x3G\x3G\x3H\x3H\x3H\x5H\x397"+
		"\nH\x3I\x3I\x3I\x2\x2\x2J\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62"+
		"\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80"+
		"\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x2\n\x3\x2"+
		"UV\x5\x2\x1E\x1E$$II\x4\x2\x36\x36?@\x6\x2\x5\x5\x13\x14\x1A\x1A\x31\x31"+
		"\x6\x2\x1D\x1D\x1F\x1F!!/\x30\x4\x2\x18\x19\x34\x34\x5\x2\xE\xE\x16\x16"+
		"\x44\x44\x3\x2XZ\x3C8\x2\x92\x3\x2\x2\x2\x4\x9A\x3\x2\x2\x2\x6\xA2\x3"+
		"\x2\x2\x2\b\xA5\x3\x2\x2\x2\n\xAA\x3\x2\x2\x2\f\xC6\x3\x2\x2\x2\xE\xD2"+
		"\x3\x2\x2\x2\x10\xED\x3\x2\x2\x2\x12\xF7\x3\x2\x2\x2\x14\xFC\x3\x2\x2"+
		"\x2\x16\xFE\x3\x2\x2\x2\x18\x101\x3\x2\x2\x2\x1A\x104\x3\x2\x2\x2\x1C"+
		"\x10A\x3\x2\x2\x2\x1E\x11D\x3\x2\x2\x2 \x11F\x3\x2\x2\x2\"\x13B\x3\x2"+
		"\x2\x2$\x13D\x3\x2\x2\x2&\x141\x3\x2\x2\x2(\x145\x3\x2\x2\x2*\x162\x3"+
		"\x2\x2\x2,\x175\x3\x2\x2\x2.\x177\x3\x2\x2\x2\x30\x17C\x3\x2\x2\x2\x32"+
		"\x180\x3\x2\x2\x2\x34\x18F\x3\x2\x2\x2\x36\x19C\x3\x2\x2\x2\x38\x19E\x3"+
		"\x2\x2\x2:\x1B2\x3\x2\x2\x2<\x1B4\x3\x2\x2\x2>\x1BC\x3\x2\x2\x2@\x1CC"+
		"\x3\x2\x2\x2\x42\x1D4\x3\x2\x2\x2\x44\x1D6\x3\x2\x2\x2\x46\x1E3\x3\x2"+
		"\x2\x2H\x1EF\x3\x2\x2\x2J\x1F1\x3\x2\x2\x2L\x200\x3\x2\x2\x2N\x208\x3"+
		"\x2\x2\x2P\x219\x3\x2\x2\x2R\x223\x3\x2\x2\x2T\x225\x3\x2\x2\x2V\x235"+
		"\x3\x2\x2\x2X\x237\x3\x2\x2\x2Z\x23B\x3\x2\x2\x2\\\x24B\x3\x2\x2\x2^\x253"+
		"\x3\x2\x2\x2`\x255\x3\x2\x2\x2\x62\x25A\x3\x2\x2\x2\x64\x268\x3\x2\x2"+
		"\x2\x66\x270\x3\x2\x2\x2h\x278\x3\x2\x2\x2j\x280\x3\x2\x2\x2l\x282\x3"+
		"\x2\x2\x2n\x285\x3\x2\x2\x2p\x296\x3\x2\x2\x2r\x298\x3\x2\x2\x2t\x2A3"+
		"\x3\x2\x2\x2v\x2AE\x3\x2\x2\x2x\x2CA\x3\x2\x2\x2z\x2DD\x3\x2\x2\x2|\x2FB"+
		"\x3\x2\x2\x2~\x311\x3\x2\x2\x2\x80\x313\x3\x2\x2\x2\x82\x369\x3\x2\x2"+
		"\x2\x84\x36B\x3\x2\x2\x2\x86\x377\x3\x2\x2\x2\x88\x388\x3\x2\x2\x2\x8A"+
		"\x38E\x3\x2\x2\x2\x8C\x390\x3\x2\x2\x2\x8E\x396\x3\x2\x2\x2\x90\x398\x3"+
		"\x2\x2\x2\x92\x97\x5\x4\x3\x2\x93\x98\x5\n\x6\x2\x94\x98\x5\f\a\x2\x95"+
		"\x98\x5\xE\b\x2\x96\x98\x5\x10\t\x2\x97\x93\x3\x2\x2\x2\x97\x94\x3\x2"+
		"\x2\x2\x97\x95\x3\x2\x2\x2\x97\x96\x3\x2\x2\x2\x98\x3\x3\x2\x2\x2\x99"+
		"\x9B\x5\x6\x4\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9F\x3\x2"+
		"\x2\x2\x9C\x9E\x5\b\x5\x2\x9D\x9C\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F"+
		"\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\x5\x3\x2\x2\x2\xA1\x9F\x3\x2"+
		"\x2\x2\xA2\xA3\a \x2\x2\xA3\xA4\aS\x2\x2\xA4\a\x3\x2\x2\x2\xA5\xA6\a\x12"+
		"\x2\x2\xA6\xA7\aL\x2\x2\xA7\xA8\aS\x2\x2\xA8\xA9\b\x5\x1\x2\xA9\t\x3\x2"+
		"\x2\x2\xAA\xAF\a&\x2\x2\xAB\xAC\a\x3\x2\x2\xAC\xB0\b\x6\x1\x2\xAD\xAE"+
		"\a;\x2\x2\xAE\xB0\b\x6\x1\x2\xAF\xAB\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF"+
		"\xB0\x3\x2\x2\x2\xB0\xBA\x3\x2\x2\x2\xB1\xB2\x5n\x38\x2\xB2\xB3\b\x6\x1"+
		"\x2\xB3\xB5\x3\x2\x2\x2\xB4\xB1\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB4"+
		"\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xBB\x3\x2\x2\x2\xB8\xB9\a\b\x2\x2"+
		"\xB9\xBB\b\x6\x1\x2\xBA\xB4\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB\xBF\x3"+
		"\x2\x2\x2\xBC\xBE\x5\x12\n\x2\xBD\xBC\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2"+
		"\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\x3\x2\x2\x2\xC1\xBF\x3"+
		"\x2\x2\x2\xC2\xC3\x5\x1A\xE\x2\xC3\xC4\x5\x1C\xF\x2\xC4\xC5\b\x6\x1\x2"+
		"\xC5\v\x3\x2\x2\x2\xC6\xC7\a>\x2\x2\xC7\xCB\x5<\x1F\x2\xC8\xCA\x5\x12"+
		"\n\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB"+
		"\xCC\x3\x2\x2\x2\xCC\xCE\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\xCF\x5\x1A"+
		"\xE\x2\xCF\xD0\x5\x1C\xF\x2\xD0\xD1\b\a\x1\x2\xD1\r\x3\x2\x2\x2\xD2\xDF"+
		"\a\x45\x2\x2\xD3\xD4\x5n\x38\x2\xD4\xD5\b\b\x1\x2\xD5\xDA\x3\x2\x2\x2"+
		"\xD6\xD7\x5\x8A\x46\x2\xD7\xD8\b\b\x1\x2\xD8\xDA\x3\x2\x2\x2\xD9\xD3\x3"+
		"\x2\x2\x2\xD9\xD6\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2"+
		"\xDB\xDC\x3\x2\x2\x2\xDC\xE0\x3\x2\x2\x2\xDD\xDE\a\b\x2\x2\xDE\xE0\b\b"+
		"\x1\x2\xDF\xD9\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE4\x3\x2\x2\x2\xE1"+
		"\xE3\x5\x12\n\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7"+
		"\xE9\x5\x1A\xE\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEA\x3\x2"+
		"\x2\x2\xEA\xEB\x5\x1C\xF\x2\xEB\xEC\b\b\x1\x2\xEC\xF\x3\x2\x2\x2\xED\xF1"+
		"\a\x37\x2\x2\xEE\xF0\x5\x12\n\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF3\x3\x2\x2"+
		"\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF1"+
		"\x3\x2\x2\x2\xF4\xF5\x5\x1A\xE\x2\xF5\xF6\b\t\x1\x2\xF6\x11\x3\x2\x2\x2"+
		"\xF7\xFA\a\"\x2\x2\xF8\xFB\x5\x14\v\x2\xF9\xFB\x5\x16\f\x2\xFA\xF8\x3"+
		"\x2\x2\x2\xFA\xF9\x3\x2\x2\x2\xFB\x13\x3\x2\x2\x2\xFC\xFD\x5\x18\r\x2"+
		"\xFD\x15\x3\x2\x2\x2\xFE\xFF\aK\x2\x2\xFF\x100\x5\x18\r\x2\x100\x17\x3"+
		"\x2\x2\x2\x101\x102\x5\x8A\x46\x2\x102\x19\x3\x2\x2\x2\x103\x105\a\a\x2"+
		"\x2\x104\x103\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2"+
		"\x106\x107\x5(\x15\x2\x107\x108\b\xE\x1\x2\x108\x1B\x3\x2\x2\x2\x109\x10B"+
		"\x5 \x11\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10D\x3\x2"+
		"\x2\x2\x10C\x10E\x5\x1E\x10\x2\x10D\x10C\x3\x2\x2\x2\x10D\x10E\x3\x2\x2"+
		"\x2\x10E\x1D\x3\x2\x2\x2\x10F\x110\x5$\x13\x2\x110\x114\b\x10\x1\x2\x111"+
		"\x112\x5&\x14\x2\x112\x113\b\x10\x1\x2\x113\x115\x3\x2\x2\x2\x114\x111"+
		"\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x11E\x3\x2\x2\x2\x116\x117\x5"+
		"&\x14\x2\x117\x11B\b\x10\x1\x2\x118\x119\x5$\x13\x2\x119\x11A\b\x10\x1"+
		"\x2\x11A\x11C\x3\x2\x2\x2\x11B\x118\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2"+
		"\x11C\x11E\x3\x2\x2\x2\x11D\x10F\x3\x2\x2\x2\x11D\x116\x3\x2\x2\x2\x11E"+
		"\x1F\x3\x2\x2\x2\x11F\x120\a\x11\x2\x2\x120\x121\a)\x2\x2\x121\x122\x5"+
		"\"\x12\x2\x122\x128\b\x11\x1\x2\x123\x124\x5\"\x12\x2\x124\x125\b\x11"+
		"\x1\x2\x125\x127\x3\x2\x2\x2\x126\x123\x3\x2\x2\x2\x127\x12A\x3\x2\x2"+
		"\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129!\x3\x2\x2\x2\x12A"+
		"\x128\x3\x2\x2\x2\x12B\x12F\a,\x2\x2\x12C\x12D\a\x1B\x2\x2\x12D\x12F\b"+
		"\x12\x1\x2\x12E\x12B\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12F\x130\x3\x2"+
		"\x2\x2\x130\x131\x5\x80\x41\x2\x131\x132\b\x12\x1\x2\x132\x13C\x3\x2\x2"+
		"\x2\x133\x134\x5\x36\x1C\x2\x134\x135\b\x12\x1\x2\x135\x13A\x3\x2\x2\x2"+
		"\x136\x137\x5l\x37\x2\x137\x138\b\x12\x1\x2\x138\x13A\x3\x2\x2\x2\x139"+
		"\x133\x3\x2\x2\x2\x139\x136\x3\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x12E"+
		"\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13C#\x3\x2\x2\x2\x13D\x13E\a\x46\x2"+
		"\x2\x13E\x13F\aX\x2\x2\x13F\x140\b\x13\x1\x2\x140%\x3\x2\x2\x2\x141\x142"+
		"\a+\x2\x2\x142\x143\aX\x2\x2\x143\x144\b\x14\x1\x2\x144\'\x3\x2\x2\x2"+
		"\x145\x149\a\x33\x2\x2\x146\x147\x5*\x16\x2\x147\x148\b\x15\x1\x2\x148"+
		"\x14A\x3\x2\x2\x2\x149\x146\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x15D"+
		"\x3\x2\x2\x2\x14B\x14C\x5,\x17\x2\x14C\x14D\b\x15\x1\x2\x14D\x152\x3\x2"+
		"\x2\x2\x14E\x14F\x5\x34\x1B\x2\x14F\x150\b\x15\x1\x2\x150\x152\x3\x2\x2"+
		"\x2\x151\x14B\x3\x2\x2\x2\x151\x14E\x3\x2\x2\x2\x152\x154\x3\x2\x2\x2"+
		"\x153\x155\a:\x2\x2\x154\x153\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x159"+
		"\x3\x2\x2\x2\x156\x157\x5*\x16\x2\x157\x158\b\x15\x1\x2\x158\x15A\x3\x2"+
		"\x2\x2\x159\x156\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15C\x3\x2\x2"+
		"\x2\x15B\x151\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2"+
		"\x15D\x15E\x3\x2\x2\x2\x15E\x160\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x160"+
		"\x161\a\xF\x2\x2\x161)\x3\x2\x2\x2\x162\x163\x5R*\x2\x163\x16A\b\x16\x1"+
		"\x2\x164\x168\a:\x2\x2\x165\x166\x5*\x16\x2\x166\x167\b\x16\x1\x2\x167"+
		"\x169\x3\x2\x2\x2\x168\x165\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16B"+
		"\x3\x2\x2\x2\x16A\x164\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B+\x3\x2\x2"+
		"\x2\x16C\x16D\x5.\x18\x2\x16D\x16E\b\x17\x1\x2\x16E\x176\x3\x2\x2\x2\x16F"+
		"\x170\x5\x32\x1A\x2\x170\x171\b\x17\x1\x2\x171\x176\x3\x2\x2\x2\x172\x173"+
		"\x5\x30\x19\x2\x173\x174\b\x17\x1\x2\x174\x176\x3\x2\x2\x2\x175\x16C\x3"+
		"\x2\x2\x2\x175\x16F\x3\x2\x2\x2\x175\x172\x3\x2\x2\x2\x176-\x3\x2\x2\x2"+
		"\x177\x178\a(\x2\x2\x178\x179\b\x18\x1\x2\x179\x17A\x5(\x15\x2\x17A\x17B"+
		"\b\x18\x1\x2\x17B/\x3\x2\x2\x2\x17C\x17D\a\x38\x2\x2\x17D\x17E\x5j\x36"+
		"\x2\x17E\x17F\x5(\x15\x2\x17F\x31\x3\x2\x2\x2\x180\x181\b\x1A\x1\x2\x181"+
		"\x182\x5(\x15\x2\x182\x18A\b\x1A\x1\x2\x183\x184\b\x1A\x1\x2\x184\x185"+
		"\aJ\x2\x2\x185\x186\x5(\x15\x2\x186\x187\b\x1A\x1\x2\x187\x189\x3\x2\x2"+
		"\x2\x188\x183\x3\x2\x2\x2\x189\x18C\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2"+
		"\x18A\x18B\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18D"+
		"\x18E\b\x1A\x1\x2\x18E\x33\x3\x2\x2\x2\x18F\x190\a\t\x2\x2\x190\x191\x5"+
		"\x36\x1C\x2\x191\x192\b\x1B\x1\x2\x192\x35\x3\x2\x2\x2\x193\x194\x5\x80"+
		"\x41\x2\x194\x195\b\x1C\x1\x2\x195\x19D\x3\x2\x2\x2\x196\x197\x5\x82\x42"+
		"\x2\x197\x198\b\x1C\x1\x2\x198\x19D\x3\x2\x2\x2\x199\x19A\x5\x38\x1D\x2"+
		"\x19A\x19B\b\x1C\x1\x2\x19B\x19D\x3\x2\x2\x2\x19C\x193\x3\x2\x2\x2\x19C"+
		"\x196\x3\x2\x2\x2\x19C\x199\x3\x2\x2\x2\x19D\x37\x3\x2\x2\x2\x19E\x19F"+
		"\x5\x8A\x46\x2\x19F\x1A0\x5:\x1E\x2\x1A0\x1A1\b\x1D\x1\x2\x1A1\x39\x3"+
		"\x2\x2\x2\x1A2\x1A3\ag\x2\x2\x1A3\x1B3\b\x1E\x1\x2\x1A4\x1A5\a.\x2\x2"+
		"\x1A5\x1A6\x5r:\x2\x1A6\x1AD\b\x1E\x1\x2\x1A7\x1A8\a*\x2\x2\x1A8\x1A9"+
		"\x5r:\x2\x1A9\x1AA\b\x1E\x1\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A7\x3\x2\x2"+
		"\x2\x1AC\x1AF\x3\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2"+
		"\x1AE\x1B0\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2\x1B0\x1B1\a\x15\x2\x2\x1B1"+
		"\x1B3\x3\x2\x2\x2\x1B2\x1A2\x3\x2\x2\x2\x1B2\x1A4\x3\x2\x2\x2\x1B3;\x3"+
		"\x2\x2\x2\x1B4\x1B8\a\x33\x2\x2\x1B5\x1B6\x5> \x2\x1B6\x1B7\b\x1F\x1\x2"+
		"\x1B7\x1B9\x3\x2\x2\x2\x1B8\x1B5\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9"+
		"\x1BA\x3\x2\x2\x2\x1BA\x1BB\a\xF\x2\x2\x1BB=\x3\x2\x2\x2\x1BC\x1BD\x5"+
		"@!\x2\x1BD\x1C2\b \x1\x2\x1BE\x1C0\a:\x2\x2\x1BF\x1C1\x5> \x2\x1C0\x1BF"+
		"\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C3\x3\x2\x2\x2\x1C2\x1BE\x3"+
		"\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3?\x3\x2\x2\x2\x1C4\x1C5\x5\x42\"\x2"+
		"\x1C5\x1C6\x5\x44#\x2\x1C6\x1C7\b!\x1\x2\x1C7\x1CD\x3\x2\x2\x2\x1C8\x1C9"+
		"\x5^\x30\x2\x1C9\x1CA\x5V,\x2\x1CA\x1CB\b!\x1\x2\x1CB\x1CD\x3\x2\x2\x2"+
		"\x1CC\x1C4\x3\x2\x2\x2\x1CC\x1C8\x3\x2\x2\x2\x1CD\x41\x3\x2\x2\x2\x1CE"+
		"\x1CF\x5n\x38\x2\x1CF\x1D0\b\"\x1\x2\x1D0\x1D5\x3\x2\x2\x2\x1D1\x1D2\x5"+
		"P)\x2\x1D2\x1D3\b\"\x1\x2\x1D3\x1D5\x3\x2\x2\x2\x1D4\x1CE\x3\x2\x2\x2"+
		"\x1D4\x1D1\x3\x2\x2\x2\x1D5\x43\x3\x2\x2\x2\x1D6\x1D7\x5\x46$\x2\x1D7"+
		"\x1E0\b#\x1\x2\x1D8\x1DC\a=\x2\x2\x1D9\x1DA\x5\x46$\x2\x1DA\x1DB\b#\x1"+
		"\x2\x1DB\x1DD\x3\x2\x2\x2\x1DC\x1D9\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2"+
		"\x1DD\x1DF\x3\x2\x2\x2\x1DE\x1D8\x3\x2\x2\x2\x1DF\x1E2\x3\x2\x2\x2\x1E0"+
		"\x1DE\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x45\x3\x2\x2\x2\x1E2\x1E0"+
		"\x3\x2\x2\x2\x1E3\x1E4\x5H%\x2\x1E4\x1E5\x5J&\x2\x1E5\x1E6\b$\x1\x2\x1E6"+
		"G\x3\x2\x2\x2\x1E7\x1E8\x5n\x38\x2\x1E8\x1E9\b%\x1\x2\x1E9\x1F0\x3\x2"+
		"\x2\x2\x1EA\x1EB\x5\x8A\x46\x2\x1EB\x1EC\b%\x1\x2\x1EC\x1F0\x3\x2\x2\x2"+
		"\x1ED\x1EE\a\x39\x2\x2\x1EE\x1F0\b%\x1\x2\x1EF\x1E7\x3\x2\x2\x2\x1EF\x1EA"+
		"\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1F0I\x3\x2\x2\x2\x1F1\x1F2\x5L\'\x2"+
		"\x1F2\x1F9\b&\x1\x2\x1F3\x1F4\a*\x2\x2\x1F4\x1F5\x5L\'\x2\x1F5\x1F6\b"+
		"&\x1\x2\x1F6\x1F8\x3\x2\x2\x2\x1F7\x1F3\x3\x2\x2\x2\x1F8\x1FB\x3\x2\x2"+
		"\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FAK\x3\x2\x2\x2\x1FB"+
		"\x1F9\x3\x2\x2\x2\x1FC\x1FD\x5N(\x2\x1FD\x1FE\b\'\x1\x2\x1FE\x201\x3\x2"+
		"\x2\x2\x1FF\x201\x5^\x30\x2\x200\x1FC\x3\x2\x2\x2\x200\x1FF\x3\x2\x2\x2"+
		"\x201M\x3\x2\x2\x2\x202\x203\x5n\x38\x2\x203\x204\b(\x1\x2\x204\x209\x3"+
		"\x2\x2\x2\x205\x206\x5P)\x2\x206\x207\b(\x1\x2\x207\x209\x3\x2\x2\x2\x208"+
		"\x202\x3\x2\x2\x2\x208\x205\x3\x2\x2\x2\x209O\x3\x2\x2\x2\x20A\x20B\x5"+
		"\x8A\x46\x2\x20B\x20C\b)\x1\x2\x20C\x21A\x3\x2\x2\x2\x20D\x20E\x5\x88"+
		"\x45\x2\x20E\x20F\b)\x1\x2\x20F\x21A\x3\x2\x2\x2\x210\x211\x5\x8CG\x2"+
		"\x211\x212\b)\x1\x2\x212\x21A\x3\x2\x2\x2\x213\x214\aP\x2\x2\x214\x21A"+
		"\b)\x1\x2\x215\x216\aR\x2\x2\x216\x21A\b)\x1\x2\x217\x218\ag\x2\x2\x218"+
		"\x21A\b)\x1\x2\x219\x20A\x3\x2\x2\x2\x219\x20D\x3\x2\x2\x2\x219\x210\x3"+
		"\x2\x2\x2\x219\x213\x3\x2\x2\x2\x219\x215\x3\x2\x2\x2\x219\x217\x3\x2"+
		"\x2\x2\x21AQ\x3\x2\x2\x2\x21B\x21C\x5\x66\x34\x2\x21C\x21D\x5T+\x2\x21D"+
		"\x21E\b*\x1\x2\x21E\x224\x3\x2\x2\x2\x21F\x220\x5^\x30\x2\x220\x221\x5"+
		"V,\x2\x221\x222\b*\x1\x2\x222\x224\x3\x2\x2\x2\x223\x21B\x3\x2\x2\x2\x223"+
		"\x21F\x3\x2\x2\x2\x224S\x3\x2\x2\x2\x225\x226\x5X-\x2\x226\x22F\b+\x1"+
		"\x2\x227\x22B\a=\x2\x2\x228\x229\x5X-\x2\x229\x22A\b+\x1\x2\x22A\x22C"+
		"\x3\x2\x2\x2\x22B\x228\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22E\x3"+
		"\x2\x2\x2\x22D\x227\x3\x2\x2\x2\x22E\x231\x3\x2\x2\x2\x22F\x22D\x3\x2"+
		"\x2\x2\x22F\x230\x3\x2\x2\x2\x230U\x3\x2\x2\x2\x231\x22F\x3\x2\x2\x2\x232"+
		"\x233\x5T+\x2\x233\x234\b,\x1\x2\x234\x236\x3\x2\x2\x2\x235\x232\x3\x2"+
		"\x2\x2\x235\x236\x3\x2\x2\x2\x236W\x3\x2\x2\x2\x237\x238\x5\\/\x2\x238"+
		"\x239\x5Z.\x2\x239\x23A\b-\x1\x2\x23AY\x3\x2\x2\x2\x23B\x23C\x5\x64\x33"+
		"\x2\x23C\x243\b.\x1\x2\x23D\x23E\a*\x2\x2\x23E\x23F\x5\x64\x33\x2\x23F"+
		"\x240\b.\x1\x2\x240\x242\x3\x2\x2\x2\x241\x23D\x3\x2\x2\x2\x242\x245\x3"+
		"\x2\x2\x2\x243\x241\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244[\x3\x2\x2\x2"+
		"\x245\x243\x3\x2\x2\x2\x246\x247\x5j\x36\x2\x247\x248\b/\x1\x2\x248\x24C"+
		"\x3\x2\x2\x2\x249\x24A\a\x39\x2\x2\x24A\x24C\b/\x1\x2\x24B\x246\x3\x2"+
		"\x2\x2\x24B\x249\x3\x2\x2\x2\x24C]\x3\x2\x2\x2\x24D\x24E\x5\x62\x32\x2"+
		"\x24E\x24F\b\x30\x1\x2\x24F\x254\x3\x2\x2\x2\x250\x251\x5`\x31\x2\x251"+
		"\x252\b\x30\x1\x2\x252\x254\x3\x2\x2\x2\x253\x24D\x3\x2\x2\x2\x253\x250"+
		"\x3\x2\x2\x2\x254_\x3\x2\x2\x2\x255\x256\a\x6\x2\x2\x256\x257\x5T+\x2"+
		"\x257\x258\a\'\x2\x2\x258\x259\b\x31\x1\x2\x259\x61\x3\x2\x2\x2\x25A\x25E"+
		"\a.\x2\x2\x25B\x25C\x5\x64\x33\x2\x25C\x25D\b\x32\x1\x2\x25D\x25F\x3\x2"+
		"\x2\x2\x25E\x25B\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x25E\x3\x2\x2"+
		"\x2\x260\x261\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263\a\x15\x2\x2"+
		"\x263\x63\x3\x2\x2\x2\x264\x265\x5h\x35\x2\x265\x266\b\x33\x1\x2\x266"+
		"\x269\x3\x2\x2\x2\x267\x269\x5^\x30\x2\x268\x264\x3\x2\x2\x2\x268\x267"+
		"\x3\x2\x2\x2\x269\x65\x3\x2\x2\x2\x26A\x26B\x5l\x37\x2\x26B\x26C\b\x34"+
		"\x1\x2\x26C\x271\x3\x2\x2\x2\x26D\x26E\x5p\x39\x2\x26E\x26F\b\x34\x1\x2"+
		"\x26F\x271\x3\x2\x2\x2\x270\x26A\x3\x2\x2\x2\x270\x26D\x3\x2\x2\x2\x271"+
		"g\x3\x2\x2\x2\x272\x273\x5l\x37\x2\x273\x274\b\x35\x1\x2\x274\x279\x3"+
		"\x2\x2\x2\x275\x276\x5p\x39\x2\x276\x277\b\x35\x1\x2\x277\x279\x3\x2\x2"+
		"\x2\x278\x272\x3\x2\x2\x2\x278\x275\x3\x2\x2\x2\x279i\x3\x2\x2\x2\x27A"+
		"\x27B\x5l\x37\x2\x27B\x27C\b\x36\x1\x2\x27C\x281\x3\x2\x2\x2\x27D\x27E"+
		"\x5\x8A\x46\x2\x27E\x27F\b\x36\x1\x2\x27F\x281\x3\x2\x2\x2\x280\x27A\x3"+
		"\x2\x2\x2\x280\x27D\x3\x2\x2\x2\x281k\x3\x2\x2\x2\x282\x283\x5n\x38\x2"+
		"\x283\x284\b\x37\x1\x2\x284m\x3\x2\x2\x2\x285\x286\t\x2\x2\x2\x286o\x3"+
		"\x2\x2\x2\x287\x288\x5\x8A\x46\x2\x288\x289\b\x39\x1\x2\x289\x297\x3\x2"+
		"\x2\x2\x28A\x28B\x5\x88\x45\x2\x28B\x28C\b\x39\x1\x2\x28C\x297\x3\x2\x2"+
		"\x2\x28D\x28E\x5\x8CG\x2\x28E\x28F\b\x39\x1\x2\x28F\x297\x3\x2\x2\x2\x290"+
		"\x291\aP\x2\x2\x291\x297\b\x39\x1\x2\x292\x293\aR\x2\x2\x293\x297\b\x39"+
		"\x1\x2\x294\x295\ag\x2\x2\x295\x297\b\x39\x1\x2\x296\x287\x3\x2\x2\x2"+
		"\x296\x28A\x3\x2\x2\x2\x296\x28D\x3\x2\x2\x2\x296\x290\x3\x2\x2\x2\x296"+
		"\x292\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x297q\x3\x2\x2\x2\x298\x299\x5"+
		"t;\x2\x299\x2A0\b:\x1\x2\x29A\x29B\a\x42\x2\x2\x29B\x29C\x5t;\x2\x29C"+
		"\x29D\b:\x1\x2\x29D\x29F\x3\x2\x2\x2\x29E\x29A\x3\x2\x2\x2\x29F\x2A2\x3"+
		"\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1s\x3\x2\x2\x2"+
		"\x2A2\x2A0\x3\x2\x2\x2\x2A3\x2A4\x5v<\x2\x2A4\x2AB\b;\x1\x2\x2A5\x2A6"+
		"\a\x41\x2\x2\x2A6\x2A7\x5v<\x2\x2A7\x2A8\b;\x1\x2\x2A8\x2AA\x3\x2\x2\x2"+
		"\x2A9\x2A5\x3\x2\x2\x2\x2AA\x2AD\x3\x2\x2\x2\x2AB\x2A9\x3\x2\x2\x2\x2AB"+
		"\x2AC\x3\x2\x2\x2\x2ACu\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AE\x2AF\x5"+
		"x=\x2\x2AF\x2C8\b<\x1\x2\x2B0\x2B1\a\x1C\x2\x2\x2B1\x2B2\x5x=\x2\x2B2"+
		"\x2B3\b<\x1\x2\x2B3\x2C9\x3\x2\x2\x2\x2B4\x2B5\a\f\x2\x2\x2B5\x2B6\x5"+
		"x=\x2\x2B6\x2B7\b<\x1\x2\x2B7\x2C9\x3\x2\x2\x2\x2B8\x2B9\a\n\x2\x2\x2B9"+
		"\x2BA\x5x=\x2\x2BA\x2BB\b<\x1\x2\x2BB\x2C9\x3\x2\x2\x2\x2BC\x2BD\a\x43"+
		"\x2\x2\x2BD\x2BE\x5x=\x2\x2BE\x2BF\b<\x1\x2\x2BF\x2C9\x3\x2\x2\x2\x2C0"+
		"\x2C1\a\r\x2\x2\x2C1\x2C2\x5x=\x2\x2C2\x2C3\b<\x1\x2\x2C3\x2C9\x3\x2\x2"+
		"\x2\x2C4\x2C5\aH\x2\x2\x2C5\x2C6\x5x=\x2\x2C6\x2C7\b<\x1\x2\x2C7\x2C9"+
		"\x3\x2\x2\x2\x2C8\x2B0\x3\x2\x2\x2\x2C8\x2B4\x3\x2\x2\x2\x2C8\x2B8\x3"+
		"\x2\x2\x2\x2C8\x2BC\x3\x2\x2\x2\x2C8\x2C0\x3\x2\x2\x2\x2C8\x2C4\x3\x2"+
		"\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9w\x3\x2\x2\x2\x2CA\x2CB\x5z>\x2\x2CB"+
		"\x2DA\b=\x1\x2\x2CC\x2CD\a<\x2\x2\x2CD\x2CE\x5z>\x2\x2CE\x2CF\b=\x1\x2"+
		"\x2CF\x2D9\x3\x2\x2\x2\x2D0\x2D1\a-\x2\x2\x2D1\x2D2\x5z>\x2\x2D2\x2D3"+
		"\b=\x1\x2\x2D3\x2D9\x3\x2\x2\x2\x2D4\x2D5\aN\x2\x2\x2D5\x2D9\b=\x1\x2"+
		"\x2D6\x2D7\aO\x2\x2\x2D7\x2D9\b=\x1\x2\x2D8\x2CC\x3\x2\x2\x2\x2D8\x2D0"+
		"\x3\x2\x2\x2\x2D8\x2D4\x3\x2\x2\x2\x2D8\x2D6\x3\x2\x2\x2\x2D9\x2DC\x3"+
		"\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DBy\x3\x2\x2\x2"+
		"\x2DC\x2DA\x3\x2\x2\x2\x2DD\x2DE\x5|?\x2\x2DE\x2E9\b>\x1\x2\x2DF\x2E0"+
		"\a\b\x2\x2\x2E0\x2E1\x5|?\x2\x2E1\x2E2\b>\x1\x2\x2E2\x2E8\x3\x2\x2\x2"+
		"\x2E3\x2E4\aG\x2\x2\x2E4\x2E5\x5|?\x2\x2E5\x2E6\b>\x1\x2\x2E6\x2E8\x3"+
		"\x2\x2\x2\x2E7\x2DF\x3\x2\x2\x2\x2E7\x2E3\x3\x2\x2\x2\x2E8\x2EB\x3\x2"+
		"\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA{\x3\x2\x2\x2\x2EB"+
		"\x2E9\x3\x2\x2\x2\x2EC\x2ED\a%\x2\x2\x2ED\x2EE\x5~@\x2\x2EE\x2EF\b?\x1"+
		"\x2\x2EF\x2FC\x3\x2\x2\x2\x2F0\x2F1\a<\x2\x2\x2F1\x2F2\x5~@\x2\x2F2\x2F3"+
		"\b?\x1\x2\x2F3\x2FC\x3\x2\x2\x2\x2F4\x2F5\a-\x2\x2\x2F5\x2F6\x5~@\x2\x2F6"+
		"\x2F7\b?\x1\x2\x2F7\x2FC\x3\x2\x2\x2\x2F8\x2F9\x5~@\x2\x2F9\x2FA\b?\x1"+
		"\x2\x2FA\x2FC\x3\x2\x2\x2\x2FB\x2EC\x3\x2\x2\x2\x2FB\x2F0\x3\x2\x2\x2"+
		"\x2FB\x2F4\x3\x2\x2\x2\x2FB\x2F8\x3\x2\x2\x2\x2FC}\x3\x2\x2\x2\x2FD\x2FE"+
		"\x5\x80\x41\x2\x2FE\x2FF\b@\x1\x2\x2FF\x312\x3\x2\x2\x2\x300\x301\x5\x82"+
		"\x42\x2\x301\x302\b@\x1\x2\x302\x312\x3\x2\x2\x2\x303\x304\x5\x86\x44"+
		"\x2\x304\x305\b@\x1\x2\x305\x312\x3\x2\x2\x2\x306\x307\x5\x88\x45\x2\x307"+
		"\x308\b@\x1\x2\x308\x312\x3\x2\x2\x2\x309\x30A\x5\x8CG\x2\x30A\x30B\b"+
		"@\x1\x2\x30B\x312\x3\x2\x2\x2\x30C\x30D\aP\x2\x2\x30D\x312\b@\x1\x2\x30E"+
		"\x30F\x5l\x37\x2\x30F\x310\b@\x1\x2\x310\x312\x3\x2\x2\x2\x311\x2FD\x3"+
		"\x2\x2\x2\x311\x300\x3\x2\x2\x2\x311\x303\x3\x2\x2\x2\x311\x306\x3\x2"+
		"\x2\x2\x311\x309\x3\x2\x2\x2\x311\x30C\x3\x2\x2\x2\x311\x30E\x3\x2\x2"+
		"\x2\x312\x7F\x3\x2\x2\x2\x313\x314\a.\x2\x2\x314\x315\x5r:\x2\x315\x316"+
		"\a\x15\x2\x2\x316\x317\b\x41\x1\x2\x317\x81\x3\x2\x2\x2\x318\x319\t\x3"+
		"\x2\x2\x319\x31A\a.\x2\x2\x31A\x31B\x5r:\x2\x31B\x31C\a\x15\x2\x2\x31C"+
		"\x31D\b\x42\x1\x2\x31D\x36A\x3\x2\x2\x2\x31E\x31F\t\x4\x2\x2\x31F\x320"+
		"\a.\x2\x2\x320\x321\x5\x88\x45\x2\x321\x322\a\x15\x2\x2\x322\x323\b\x42"+
		"\x1\x2\x323\x36A\x3\x2\x2\x2\x324\x325\t\x4\x2\x2\x325\x326\a.\x2\x2\x326"+
		"\x327\x5l\x37\x2\x327\x328\a\x15\x2\x2\x328\x329\b\x42\x1\x2\x329\x36A"+
		"\x3\x2\x2\x2\x32A\x32B\t\x5\x2\x2\x32B\x32C\a.\x2\x2\x32C\x32D\x5r:\x2"+
		"\x32D\x32E\a*\x2\x2\x32E\x32F\a\x17\x2\x2\x32F\x330\a\x15\x2\x2\x330\x331"+
		"\b\x42\x1\x2\x331\x36A\x3\x2\x2\x2\x332\x333\t\x5\x2\x2\x333\x334\a.\x2"+
		"\x2\x334\x335\x5r:\x2\x335\x336\a*\x2\x2\x336\x337\x5r:\x2\x337\x338\a"+
		"\x15\x2\x2\x338\x339\b\x42\x1\x2\x339\x36A\x3\x2\x2\x2\x33A\x33B\t\x6"+
		"\x2\x2\x33B\x33C\a.\x2\x2\x33C\x33D\x5r:\x2\x33D\x33E\a\x15\x2\x2\x33E"+
		"\x33F\b\x42\x1\x2\x33F\x36A\x3\x2\x2\x2\x340\x341\t\a\x2\x2\x341\x342"+
		"\a.\x2\x2\x342\x343\x5l\x37\x2\x343\x344\a\x15\x2\x2\x344\x345\b\x42\x1"+
		"\x2\x345\x36A\x3\x2\x2\x2\x346\x347\a#\x2\x2\x347\x348\a.\x2\x2\x348\x349"+
		"\x5r:\x2\x349\x34A\a*\x2\x2\x34A\x34B\x5r:\x2\x34B\x34C\a\x15\x2\x2\x34C"+
		"\x34D\b\x42\x1\x2\x34D\x36A\x3\x2\x2\x2\x34E\x34F\a\v\x2\x2\x34F\x350"+
		"\a.\x2\x2\x350\x351\x5r:\x2\x351\x352\a\x15\x2\x2\x352\x353\b\x42\x1\x2"+
		"\x353\x36A\x3\x2\x2\x2\x354\x355\a\x32\x2\x2\x355\x356\a.\x2\x2\x356\x357"+
		"\x5r:\x2\x357\x358\a\x15\x2\x2\x358\x359\b\x42\x1\x2\x359\x36A\x3\x2\x2"+
		"\x2\x35A\x35B\a\x4\x2\x2\x35B\x35C\a.\x2\x2\x35C\x35D\x5r:\x2\x35D\x35E"+
		"\a\x15\x2\x2\x35E\x35F\b\x42\x1\x2\x35F\x36A\x3\x2\x2\x2\x360\x361\a\x35"+
		"\x2\x2\x361\x362\a.\x2\x2\x362\x363\x5r:\x2\x363\x364\a\x15\x2\x2\x364"+
		"\x365\b\x42\x1\x2\x365\x36A\x3\x2\x2\x2\x366\x367\x5\x84\x43\x2\x367\x368"+
		"\b\x42\x1\x2\x368\x36A\x3\x2\x2\x2\x369\x318\x3\x2\x2\x2\x369\x31E\x3"+
		"\x2\x2\x2\x369\x324\x3\x2\x2\x2\x369\x32A\x3\x2\x2\x2\x369\x332\x3\x2"+
		"\x2\x2\x369\x33A\x3\x2\x2\x2\x369\x340\x3\x2\x2\x2\x369\x346\x3\x2\x2"+
		"\x2\x369\x34E\x3\x2\x2\x2\x369\x354\x3\x2\x2\x2\x369\x35A\x3\x2\x2\x2"+
		"\x369\x360\x3\x2\x2\x2\x369\x366\x3\x2\x2\x2\x36A\x83\x3\x2\x2\x2\x36B"+
		"\x36C\t\b\x2\x2\x36C\x36D\a.\x2\x2\x36D\x36E\x5l\x37\x2\x36E\x36F\a*\x2"+
		"\x2\x36F\x372\aQ\x2\x2\x370\x371\a*\x2\x2\x371\x373\aQ\x2\x2\x372\x370"+
		"\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x375\a\x15"+
		"\x2\x2\x375\x376\b\x43\x1\x2\x376\x85\x3\x2\x2\x2\x377\x378\x5\x8A\x46"+
		"\x2\x378\x37C\b\x44\x1\x2\x379\x37A\x5:\x1E\x2\x37A\x37B\b\x44\x1\x2\x37B"+
		"\x37D\x3\x2\x2\x2\x37C\x379\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x87"+
		"\x3\x2\x2\x2\x37E\x37F\aQ\x2\x2\x37F\x380\aW\x2\x2\x380\x389\b\x45\x1"+
		"\x2\x381\x382\aQ\x2\x2\x382\x383\a\x10\x2\x2\x383\x384\x5\x8A\x46\x2\x384"+
		"\x385\b\x45\x1\x2\x385\x389\x3\x2\x2\x2\x386\x387\aQ\x2\x2\x387\x389\b"+
		"\x45\x1\x2\x388\x37E\x3\x2\x2\x2\x388\x381\x3\x2\x2\x2\x388\x386\x3\x2"+
		"\x2\x2\x389\x89\x3\x2\x2\x2\x38A\x38B\aS\x2\x2\x38B\x38F\b\x46\x1\x2\x38C"+
		"\x38D\aM\x2\x2\x38D\x38F\b\x46\x1\x2\x38E\x38A\x3\x2\x2\x2\x38E\x38C\x3"+
		"\x2\x2\x2\x38F\x8B\x3\x2\x2\x2\x390\x391\x5\x8EH\x2\x391\x392\bG\x1\x2"+
		"\x392\x8D\x3\x2\x2\x2\x393\x397\x5\x90I\x2\x394\x397\aN\x2\x2\x395\x397"+
		"\aO\x2\x2\x396\x393\x3\x2\x2\x2\x396\x394\x3\x2\x2\x2\x396\x395\x3\x2"+
		"\x2\x2\x397\x8F\x3\x2\x2\x2\x398\x399\t\t\x2\x2\x399\x91\x3\x2\x2\x2O"+
		"\x97\x9A\x9F\xAF\xB6\xBA\xBF\xCB\xD9\xDB\xDF\xE4\xE8\xF1\xFA\x104\x10A"+
		"\x10D\x114\x11B\x11D\x128\x12E\x139\x13B\x149\x151\x154\x159\x15D\x168"+
		"\x16A\x175\x18A\x19C\x1AD\x1B2\x1B8\x1C0\x1C2\x1CC\x1D4\x1DC\x1E0\x1EF"+
		"\x1F9\x200\x208\x219\x223\x22B\x22F\x235\x243\x24B\x253\x260\x268\x270"+
		"\x278\x280\x296\x2A0\x2AB\x2C8\x2D8\x2DA\x2E7\x2E9\x2FB\x311\x369\x372"+
		"\x37C\x388\x38E\x396";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SparqlParseRun
